#!/usr/bin/env python
# -*- coding: utf-8 -*- 

#
# Generated Sat Aug 11 02:13:43 2012 by generateDS.py version 2.7c.
#

import sys
import getopt
import re as re_

etree_ = None
Verbose_import_ = False
(   XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
    ) = range(3)
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_
    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        print("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_
        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            print("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_
            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                print("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree_
                XMLParser_import_library = XMLParser_import_elementtree
                if Verbose_import_:
                    print("running with cElementTree")
            except ImportError:
                try:
                    # normal ElementTree install
                    import elementtree.ElementTree as etree_
                    XMLParser_import_library = XMLParser_import_elementtree
                    if Verbose_import_:
                        print("running with ElementTree")
                except ImportError:
                    raise ImportError("Failed to import ElementTree from any known place")

def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
        'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_integer_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of integers')
            return input_data
        def gds_format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def gds_validate_float(self, input_data, node, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_float_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of floats')
            return input_data
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_double_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of doubles')
            return input_data
        def gds_format_boolean(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean(self, input_data, node, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(node, 'Requires sequence of booleans ("true", "1", "false", "0")')
            return input_data
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')

#
# Support/utility functions.
#

def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')

def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1

def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text

def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass

def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    else:
        msg = '%s (element %s)' % (msg, node.tag, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace, pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip(): 
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace, name, pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (self.name, self.value, self.name))
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container

def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#

class header_type(GeneratedsSuper):
    """Transaction header"""
    subclass = None
    superclass = None
    def __init__(self, from_site_name=None, to_site_name=None, originating_site_name=None, transaction_id=None, packet_id=None, expected_reply_list=None, date=None):
        self.from_site_name = from_site_name
        self.to_site_name = to_site_name
        self.originating_site_name = originating_site_name
        self.transaction_id = transaction_id
        self.packet_id = packet_id
        self.expected_reply_list = expected_reply_list
        self.date = date
    def factory(*args_, **kwargs_):
        if header_type.subclass:
            return header_type.subclass(*args_, **kwargs_)
        else:
            return header_type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_from_site_name(self): return self.from_site_name
    def set_from_site_name(self, from_site_name): self.from_site_name = from_site_name
    def get_to_site_name(self): return self.to_site_name
    def set_to_site_name(self, to_site_name): self.to_site_name = to_site_name
    def get_originating_site_name(self): return self.originating_site_name
    def set_originating_site_name(self, originating_site_name): self.originating_site_name = originating_site_name
    def get_transaction_id(self): return self.transaction_id
    def set_transaction_id(self, transaction_id): self.transaction_id = transaction_id
    def get_packet_id(self): return self.packet_id
    def set_packet_id(self, packet_id): self.packet_id = packet_id
    def get_expected_reply_list(self): return self.expected_reply_list
    def set_expected_reply_list(self, expected_reply_list): self.expected_reply_list = expected_reply_list
    def get_date(self): return self.date
    def set_date(self, date): self.date = date
    def export(self, outfile, level, namespace_='', name_='header_type', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='header_type')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='header_type'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='header_type', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.from_site_name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfrom_site_name>%s</%sfrom_site_name>%s' % (namespace_, self.gds_format_string(quote_xml(self.from_site_name).encode(ExternalEncoding), input_name='from_site_name'), namespace_, eol_))
        if self.to_site_name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sto_site_name>%s</%sto_site_name>%s' % (namespace_, self.gds_format_string(quote_xml(self.to_site_name).encode(ExternalEncoding), input_name='to_site_name'), namespace_, eol_))
        if self.originating_site_name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soriginating_site_name>%s</%soriginating_site_name>%s' % (namespace_, self.gds_format_string(quote_xml(self.originating_site_name).encode(ExternalEncoding), input_name='originating_site_name'), namespace_, eol_))
        if self.transaction_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stransaction_id>%s</%stransaction_id>%s' % (namespace_, self.gds_format_integer(self.transaction_id, input_name='transaction_id'), namespace_, eol_))
        if self.packet_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spacket_id>%s</%spacket_id>%s' % (namespace_, self.gds_format_integer(self.packet_id, input_name='packet_id'), namespace_, eol_))
        if self.expected_reply_list is not None:
            self.expected_reply_list.export(outfile, level, namespace_, name_='expected_reply_list', pretty_print=pretty_print)
        if self.date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdate>%s</%sdate>%s' % (namespace_, self.gds_format_string(quote_xml(self.date).encode(ExternalEncoding), input_name='date'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.from_site_name is not None or
            self.to_site_name is not None or
            self.originating_site_name is not None or
            self.transaction_id is not None or
            self.packet_id is not None or
            self.expected_reply_list is not None or
            self.date is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='header_type'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.from_site_name is not None:
            showIndent(outfile, level)
            outfile.write('from_site_name=%s,\n' % quote_python(self.from_site_name).encode(ExternalEncoding))
        if self.to_site_name is not None:
            showIndent(outfile, level)
            outfile.write('to_site_name=%s,\n' % quote_python(self.to_site_name).encode(ExternalEncoding))
        if self.originating_site_name is not None:
            showIndent(outfile, level)
            outfile.write('originating_site_name=%s,\n' % quote_python(self.originating_site_name).encode(ExternalEncoding))
        if self.transaction_id is not None:
            showIndent(outfile, level)
            outfile.write('transaction_id=%d,\n' % self.transaction_id)
        if self.packet_id is not None:
            showIndent(outfile, level)
            outfile.write('packet_id=%d,\n' % self.packet_id)
        if self.expected_reply_list is not None:
            showIndent(outfile, level)
            outfile.write('expected_reply_list=model_.expected_reply_list(\n')
            self.expected_reply_list.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.date is not None:
            showIndent(outfile, level)
            outfile.write('date=%s,\n' % quote_python(self.date).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'from_site_name':
            from_site_name_ = child_.text
            from_site_name_ = self.gds_validate_string(from_site_name_, node, 'from_site_name')
            self.from_site_name = from_site_name_
        elif nodeName_ == 'to_site_name':
            to_site_name_ = child_.text
            to_site_name_ = self.gds_validate_string(to_site_name_, node, 'to_site_name')
            self.to_site_name = to_site_name_
        elif nodeName_ == 'originating_site_name':
            originating_site_name_ = child_.text
            originating_site_name_ = self.gds_validate_string(originating_site_name_, node, 'originating_site_name')
            self.originating_site_name = originating_site_name_
        elif nodeName_ == 'transaction_id':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'transaction_id')
            self.transaction_id = ival_
        elif nodeName_ == 'packet_id':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'packet_id')
            self.packet_id = ival_
        elif nodeName_ == 'expected_reply_list':
            obj_ = expected_reply_list.factory()
            obj_.build(child_)
            self.set_expected_reply_list(obj_)
        elif nodeName_ == 'date':
            date_ = child_.text
            date_ = self.gds_validate_string(date_, node, 'date')
            self.date = date_
# end class header_type


class date(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if date.subclass:
            return date.subclass(*args_, **kwargs_)
        else:
            return date(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='date', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='date')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='date'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='date', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='date'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class date


class amie(GeneratedsSuper):
    """Account Management Information Exchange"""
    subclass = None
    superclass = None
    def __init__(self, version=None, request_project_create=None, notify_project_create=None, data_project_create=None, request_account_create=None, notify_account_create=None, data_account_create=None, request_project_resources=None, notify_project_resources=None, request_project_modify=None, notify_project_modify=None, request_user_modify=None, notify_user_modify=None, request_project_inactivate=None, notify_project_inactivate=None, request_project_reactivate=None, notify_project_reactivate=None, request_account_inactivate=None, notify_account_inactivate=None, request_account_reactivate=None, notify_account_reactivate=None, request_user_suspend=None, notify_user_suspend=None, request_user_reactivate=None, notify_user_reactivate=None, notify_project_usage=None, request_user_create=None, notify_user_create=None, inform_transaction_complete=None, response=None):
        self.version = _cast(None, version)
        self.request_project_create = request_project_create
        self.notify_project_create = notify_project_create
        self.data_project_create = data_project_create
        self.request_account_create = request_account_create
        self.notify_account_create = notify_account_create
        self.data_account_create = data_account_create
        self.request_project_resources = request_project_resources
        self.notify_project_resources = notify_project_resources
        self.request_project_modify = request_project_modify
        self.notify_project_modify = notify_project_modify
        self.request_user_modify = request_user_modify
        self.notify_user_modify = notify_user_modify
        self.request_project_inactivate = request_project_inactivate
        self.notify_project_inactivate = notify_project_inactivate
        self.request_project_reactivate = request_project_reactivate
        self.notify_project_reactivate = notify_project_reactivate
        self.request_account_inactivate = request_account_inactivate
        self.notify_account_inactivate = notify_account_inactivate
        self.request_account_reactivate = request_account_reactivate
        self.notify_account_reactivate = notify_account_reactivate
        self.request_user_suspend = request_user_suspend
        self.notify_user_suspend = notify_user_suspend
        self.request_user_reactivate = request_user_reactivate
        self.notify_user_reactivate = notify_user_reactivate
        self.notify_project_usage = notify_project_usage
        self.request_user_create = request_user_create
        self.notify_user_create = notify_user_create
        self.inform_transaction_complete = inform_transaction_complete
        self.response = response
    def factory(*args_, **kwargs_):
        if amie.subclass:
            return amie.subclass(*args_, **kwargs_)
        else:
            return amie(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_request_project_create(self): return self.request_project_create
    def set_request_project_create(self, request_project_create): self.request_project_create = request_project_create
    def get_notify_project_create(self): return self.notify_project_create
    def set_notify_project_create(self, notify_project_create): self.notify_project_create = notify_project_create
    def get_data_project_create(self): return self.data_project_create
    def set_data_project_create(self, data_project_create): self.data_project_create = data_project_create
    def get_request_account_create(self): return self.request_account_create
    def set_request_account_create(self, request_account_create): self.request_account_create = request_account_create
    def get_notify_account_create(self): return self.notify_account_create
    def set_notify_account_create(self, notify_account_create): self.notify_account_create = notify_account_create
    def get_data_account_create(self): return self.data_account_create
    def set_data_account_create(self, data_account_create): self.data_account_create = data_account_create
    def get_request_project_resources(self): return self.request_project_resources
    def set_request_project_resources(self, request_project_resources): self.request_project_resources = request_project_resources
    def get_notify_project_resources(self): return self.notify_project_resources
    def set_notify_project_resources(self, notify_project_resources): self.notify_project_resources = notify_project_resources
    def get_request_project_modify(self): return self.request_project_modify
    def set_request_project_modify(self, request_project_modify): self.request_project_modify = request_project_modify
    def get_notify_project_modify(self): return self.notify_project_modify
    def set_notify_project_modify(self, notify_project_modify): self.notify_project_modify = notify_project_modify
    def get_request_user_modify(self): return self.request_user_modify
    def set_request_user_modify(self, request_user_modify): self.request_user_modify = request_user_modify
    def get_notify_user_modify(self): return self.notify_user_modify
    def set_notify_user_modify(self, notify_user_modify): self.notify_user_modify = notify_user_modify
    def get_request_project_inactivate(self): return self.request_project_inactivate
    def set_request_project_inactivate(self, request_project_inactivate): self.request_project_inactivate = request_project_inactivate
    def get_notify_project_inactivate(self): return self.notify_project_inactivate
    def set_notify_project_inactivate(self, notify_project_inactivate): self.notify_project_inactivate = notify_project_inactivate
    def get_request_project_reactivate(self): return self.request_project_reactivate
    def set_request_project_reactivate(self, request_project_reactivate): self.request_project_reactivate = request_project_reactivate
    def get_notify_project_reactivate(self): return self.notify_project_reactivate
    def set_notify_project_reactivate(self, notify_project_reactivate): self.notify_project_reactivate = notify_project_reactivate
    def get_request_account_inactivate(self): return self.request_account_inactivate
    def set_request_account_inactivate(self, request_account_inactivate): self.request_account_inactivate = request_account_inactivate
    def get_notify_account_inactivate(self): return self.notify_account_inactivate
    def set_notify_account_inactivate(self, notify_account_inactivate): self.notify_account_inactivate = notify_account_inactivate
    def get_request_account_reactivate(self): return self.request_account_reactivate
    def set_request_account_reactivate(self, request_account_reactivate): self.request_account_reactivate = request_account_reactivate
    def get_notify_account_reactivate(self): return self.notify_account_reactivate
    def set_notify_account_reactivate(self, notify_account_reactivate): self.notify_account_reactivate = notify_account_reactivate
    def get_request_user_suspend(self): return self.request_user_suspend
    def set_request_user_suspend(self, request_user_suspend): self.request_user_suspend = request_user_suspend
    def get_notify_user_suspend(self): return self.notify_user_suspend
    def set_notify_user_suspend(self, notify_user_suspend): self.notify_user_suspend = notify_user_suspend
    def get_request_user_reactivate(self): return self.request_user_reactivate
    def set_request_user_reactivate(self, request_user_reactivate): self.request_user_reactivate = request_user_reactivate
    def get_notify_user_reactivate(self): return self.notify_user_reactivate
    def set_notify_user_reactivate(self, notify_user_reactivate): self.notify_user_reactivate = notify_user_reactivate
    def get_notify_project_usage(self): return self.notify_project_usage
    def set_notify_project_usage(self, notify_project_usage): self.notify_project_usage = notify_project_usage
    def get_request_user_create(self): return self.request_user_create
    def set_request_user_create(self, request_user_create): self.request_user_create = request_user_create
    def get_notify_user_create(self): return self.notify_user_create
    def set_notify_user_create(self, notify_user_create): self.notify_user_create = notify_user_create
    def get_inform_transaction_complete(self): return self.inform_transaction_complete
    def set_inform_transaction_complete(self, inform_transaction_complete): self.inform_transaction_complete = inform_transaction_complete
    def get_response(self): return self.response
    def set_response(self, response): self.response = response
    def get_version(self): return self.version
    def set_version(self, version): self.version = version
    def export(self, outfile, level, namespace_='', name_='amie', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='amie')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='amie'):
        if self.version is not None and 'version' not in already_processed:
            already_processed.append('version')
            outfile.write(' version=%s' % (self.gds_format_string(quote_attrib(self.version).encode(ExternalEncoding), input_name='version'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='amie', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.request_project_create is not None:
            self.request_project_create.export(outfile, level, namespace_, name_='request_project_create', pretty_print=pretty_print)
        if self.notify_project_create is not None:
            self.notify_project_create.export(outfile, level, namespace_, name_='notify_project_create', pretty_print=pretty_print)
        if self.data_project_create is not None:
            self.data_project_create.export(outfile, level, namespace_, name_='data_project_create', pretty_print=pretty_print)
        if self.request_account_create is not None:
            self.request_account_create.export(outfile, level, namespace_, name_='request_account_create', pretty_print=pretty_print)
        if self.notify_account_create is not None:
            self.notify_account_create.export(outfile, level, namespace_, name_='notify_account_create', pretty_print=pretty_print)
        if self.data_account_create is not None:
            self.data_account_create.export(outfile, level, namespace_, name_='data_account_create', pretty_print=pretty_print)
        if self.request_project_resources is not None:
            self.request_project_resources.export(outfile, level, namespace_, name_='request_project_resources', pretty_print=pretty_print)
        if self.notify_project_resources is not None:
            self.notify_project_resources.export(outfile, level, namespace_, name_='notify_project_resources', pretty_print=pretty_print)
        if self.request_project_modify is not None:
            self.request_project_modify.export(outfile, level, namespace_, name_='request_project_modify', pretty_print=pretty_print)
        if self.notify_project_modify is not None:
            self.notify_project_modify.export(outfile, level, namespace_, name_='notify_project_modify', pretty_print=pretty_print)
        if self.request_user_modify is not None:
            self.request_user_modify.export(outfile, level, namespace_, name_='request_user_modify', pretty_print=pretty_print)
        if self.notify_user_modify is not None:
            self.notify_user_modify.export(outfile, level, namespace_, name_='notify_user_modify', pretty_print=pretty_print)
        if self.request_project_inactivate is not None:
            self.request_project_inactivate.export(outfile, level, namespace_, name_='request_project_inactivate', pretty_print=pretty_print)
        if self.notify_project_inactivate is not None:
            self.notify_project_inactivate.export(outfile, level, namespace_, name_='notify_project_inactivate', pretty_print=pretty_print)
        if self.request_project_reactivate is not None:
            self.request_project_reactivate.export(outfile, level, namespace_, name_='request_project_reactivate', pretty_print=pretty_print)
        if self.notify_project_reactivate is not None:
            self.notify_project_reactivate.export(outfile, level, namespace_, name_='notify_project_reactivate', pretty_print=pretty_print)
        if self.request_account_inactivate is not None:
            self.request_account_inactivate.export(outfile, level, namespace_, name_='request_account_inactivate', pretty_print=pretty_print)
        if self.notify_account_inactivate is not None:
            self.notify_account_inactivate.export(outfile, level, namespace_, name_='notify_account_inactivate', pretty_print=pretty_print)
        if self.request_account_reactivate is not None:
            self.request_account_reactivate.export(outfile, level, namespace_, name_='request_account_reactivate', pretty_print=pretty_print)
        if self.notify_account_reactivate is not None:
            self.notify_account_reactivate.export(outfile, level, namespace_, name_='notify_account_reactivate', pretty_print=pretty_print)
        if self.request_user_suspend is not None:
            self.request_user_suspend.export(outfile, level, namespace_, name_='request_user_suspend', pretty_print=pretty_print)
        if self.notify_user_suspend is not None:
            self.notify_user_suspend.export(outfile, level, namespace_, name_='notify_user_suspend', pretty_print=pretty_print)
        if self.request_user_reactivate is not None:
            self.request_user_reactivate.export(outfile, level, namespace_, name_='request_user_reactivate', pretty_print=pretty_print)
        if self.notify_user_reactivate is not None:
            self.notify_user_reactivate.export(outfile, level, namespace_, name_='notify_user_reactivate', pretty_print=pretty_print)
        if self.notify_project_usage is not None:
            self.notify_project_usage.export(outfile, level, namespace_, name_='notify_project_usage', pretty_print=pretty_print)
        if self.request_user_create is not None:
            self.request_user_create.export(outfile, level, namespace_, name_='request_user_create', pretty_print=pretty_print)
        if self.notify_user_create is not None:
            self.notify_user_create.export(outfile, level, namespace_, name_='notify_user_create', pretty_print=pretty_print)
        if self.inform_transaction_complete is not None:
            self.inform_transaction_complete.export(outfile, level, namespace_, name_='inform_transaction_complete', pretty_print=pretty_print)
        if self.response is not None:
            self.response.export(outfile, level, namespace_, name_='response', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.request_project_create is not None or
            self.notify_project_create is not None or
            self.data_project_create is not None or
            self.request_account_create is not None or
            self.notify_account_create is not None or
            self.data_account_create is not None or
            self.request_project_resources is not None or
            self.notify_project_resources is not None or
            self.request_project_modify is not None or
            self.notify_project_modify is not None or
            self.request_user_modify is not None or
            self.notify_user_modify is not None or
            self.request_project_inactivate is not None or
            self.notify_project_inactivate is not None or
            self.request_project_reactivate is not None or
            self.notify_project_reactivate is not None or
            self.request_account_inactivate is not None or
            self.notify_account_inactivate is not None or
            self.request_account_reactivate is not None or
            self.notify_account_reactivate is not None or
            self.request_user_suspend is not None or
            self.notify_user_suspend is not None or
            self.request_user_reactivate is not None or
            self.notify_user_reactivate is not None or
            self.notify_project_usage is not None or
            self.request_user_create is not None or
            self.notify_user_create is not None or
            self.inform_transaction_complete is not None or
            self.response is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='amie'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.version is not None and 'version' not in already_processed:
            already_processed.append('version')
            showIndent(outfile, level)
            outfile.write('version = "%s",\n' % (self.version,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.request_project_create is not None:
            showIndent(outfile, level)
            outfile.write('request_project_create=model_.request_project_createType(\n')
            self.request_project_create.exportLiteral(outfile, level, name_='request_project_create')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.notify_project_create is not None:
            showIndent(outfile, level)
            outfile.write('notify_project_create=model_.notify_project_createType(\n')
            self.notify_project_create.exportLiteral(outfile, level, name_='notify_project_create')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.data_project_create is not None:
            showIndent(outfile, level)
            outfile.write('data_project_create=model_.data_project_createType(\n')
            self.data_project_create.exportLiteral(outfile, level, name_='data_project_create')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.request_account_create is not None:
            showIndent(outfile, level)
            outfile.write('request_account_create=model_.request_account_createType(\n')
            self.request_account_create.exportLiteral(outfile, level, name_='request_account_create')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.notify_account_create is not None:
            showIndent(outfile, level)
            outfile.write('notify_account_create=model_.notify_account_createType(\n')
            self.notify_account_create.exportLiteral(outfile, level, name_='notify_account_create')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.data_account_create is not None:
            showIndent(outfile, level)
            outfile.write('data_account_create=model_.data_account_createType(\n')
            self.data_account_create.exportLiteral(outfile, level, name_='data_account_create')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.request_project_resources is not None:
            showIndent(outfile, level)
            outfile.write('request_project_resources=model_.request_project_resourcesType(\n')
            self.request_project_resources.exportLiteral(outfile, level, name_='request_project_resources')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.notify_project_resources is not None:
            showIndent(outfile, level)
            outfile.write('notify_project_resources=model_.notify_project_resourcesType(\n')
            self.notify_project_resources.exportLiteral(outfile, level, name_='notify_project_resources')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.request_project_modify is not None:
            showIndent(outfile, level)
            outfile.write('request_project_modify=model_.request_project_modifyType(\n')
            self.request_project_modify.exportLiteral(outfile, level, name_='request_project_modify')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.notify_project_modify is not None:
            showIndent(outfile, level)
            outfile.write('notify_project_modify=model_.notify_project_modifyType(\n')
            self.notify_project_modify.exportLiteral(outfile, level, name_='notify_project_modify')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.request_user_modify is not None:
            showIndent(outfile, level)
            outfile.write('request_user_modify=model_.request_user_modifyType(\n')
            self.request_user_modify.exportLiteral(outfile, level, name_='request_user_modify')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.notify_user_modify is not None:
            showIndent(outfile, level)
            outfile.write('notify_user_modify=model_.notify_user_modifyType(\n')
            self.notify_user_modify.exportLiteral(outfile, level, name_='notify_user_modify')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.request_project_inactivate is not None:
            showIndent(outfile, level)
            outfile.write('request_project_inactivate=model_.request_project_inactivateType(\n')
            self.request_project_inactivate.exportLiteral(outfile, level, name_='request_project_inactivate')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.notify_project_inactivate is not None:
            showIndent(outfile, level)
            outfile.write('notify_project_inactivate=model_.notify_project_inactivateType(\n')
            self.notify_project_inactivate.exportLiteral(outfile, level, name_='notify_project_inactivate')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.request_project_reactivate is not None:
            showIndent(outfile, level)
            outfile.write('request_project_reactivate=model_.request_project_reactivateType(\n')
            self.request_project_reactivate.exportLiteral(outfile, level, name_='request_project_reactivate')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.notify_project_reactivate is not None:
            showIndent(outfile, level)
            outfile.write('notify_project_reactivate=model_.notify_project_reactivateType(\n')
            self.notify_project_reactivate.exportLiteral(outfile, level, name_='notify_project_reactivate')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.request_account_inactivate is not None:
            showIndent(outfile, level)
            outfile.write('request_account_inactivate=model_.request_account_inactivateType(\n')
            self.request_account_inactivate.exportLiteral(outfile, level, name_='request_account_inactivate')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.notify_account_inactivate is not None:
            showIndent(outfile, level)
            outfile.write('notify_account_inactivate=model_.notify_account_inactivateType(\n')
            self.notify_account_inactivate.exportLiteral(outfile, level, name_='notify_account_inactivate')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.request_account_reactivate is not None:
            showIndent(outfile, level)
            outfile.write('request_account_reactivate=model_.request_account_reactivateType(\n')
            self.request_account_reactivate.exportLiteral(outfile, level, name_='request_account_reactivate')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.notify_account_reactivate is not None:
            showIndent(outfile, level)
            outfile.write('notify_account_reactivate=model_.notify_account_reactivateType(\n')
            self.notify_account_reactivate.exportLiteral(outfile, level, name_='notify_account_reactivate')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.request_user_suspend is not None:
            showIndent(outfile, level)
            outfile.write('request_user_suspend=model_.request_user_suspendType(\n')
            self.request_user_suspend.exportLiteral(outfile, level, name_='request_user_suspend')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.notify_user_suspend is not None:
            showIndent(outfile, level)
            outfile.write('notify_user_suspend=model_.notify_user_suspendType(\n')
            self.notify_user_suspend.exportLiteral(outfile, level, name_='notify_user_suspend')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.request_user_reactivate is not None:
            showIndent(outfile, level)
            outfile.write('request_user_reactivate=model_.request_user_reactivateType(\n')
            self.request_user_reactivate.exportLiteral(outfile, level, name_='request_user_reactivate')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.notify_user_reactivate is not None:
            showIndent(outfile, level)
            outfile.write('notify_user_reactivate=model_.notify_user_reactivateType(\n')
            self.notify_user_reactivate.exportLiteral(outfile, level, name_='notify_user_reactivate')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.notify_project_usage is not None:
            showIndent(outfile, level)
            outfile.write('notify_project_usage=model_.notify_project_usageType(\n')
            self.notify_project_usage.exportLiteral(outfile, level, name_='notify_project_usage')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.request_user_create is not None:
            showIndent(outfile, level)
            outfile.write('request_user_create=model_.request_user_createType(\n')
            self.request_user_create.exportLiteral(outfile, level, name_='request_user_create')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.notify_user_create is not None:
            showIndent(outfile, level)
            outfile.write('notify_user_create=model_.notify_user_createType(\n')
            self.notify_user_create.exportLiteral(outfile, level, name_='notify_user_create')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.inform_transaction_complete is not None:
            showIndent(outfile, level)
            outfile.write('inform_transaction_complete=model_.inform_transaction_completeType(\n')
            self.inform_transaction_complete.exportLiteral(outfile, level, name_='inform_transaction_complete')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.response is not None:
            showIndent(outfile, level)
            outfile.write('response=model_.responseType(\n')
            self.response.exportLiteral(outfile, level, name_='response')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('version', node)
        if value is not None and 'version' not in already_processed:
            already_processed.append('version')
            self.version = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'request_project_create':
            obj_ = request_project_createType.factory()
            obj_.build(child_)
            self.set_request_project_create(obj_)
        elif nodeName_ == 'notify_project_create':
            obj_ = notify_project_createType.factory()
            obj_.build(child_)
            self.set_notify_project_create(obj_)
        elif nodeName_ == 'data_project_create':
            obj_ = data_project_createType.factory()
            obj_.build(child_)
            self.set_data_project_create(obj_)
        elif nodeName_ == 'request_account_create':
            obj_ = request_account_createType.factory()
            obj_.build(child_)
            self.set_request_account_create(obj_)
        elif nodeName_ == 'notify_account_create':
            obj_ = notify_account_createType.factory()
            obj_.build(child_)
            self.set_notify_account_create(obj_)
        elif nodeName_ == 'data_account_create':
            obj_ = data_account_createType.factory()
            obj_.build(child_)
            self.set_data_account_create(obj_)
        elif nodeName_ == 'request_project_resources':
            obj_ = request_project_resourcesType.factory()
            obj_.build(child_)
            self.set_request_project_resources(obj_)
        elif nodeName_ == 'notify_project_resources':
            obj_ = notify_project_resourcesType.factory()
            obj_.build(child_)
            self.set_notify_project_resources(obj_)
        elif nodeName_ == 'request_project_modify':
            obj_ = request_project_modifyType.factory()
            obj_.build(child_)
            self.set_request_project_modify(obj_)
        elif nodeName_ == 'notify_project_modify':
            obj_ = notify_project_modifyType.factory()
            obj_.build(child_)
            self.set_notify_project_modify(obj_)
        elif nodeName_ == 'request_user_modify':
            obj_ = request_user_modifyType.factory()
            obj_.build(child_)
            self.set_request_user_modify(obj_)
        elif nodeName_ == 'notify_user_modify':
            obj_ = notify_user_modifyType.factory()
            obj_.build(child_)
            self.set_notify_user_modify(obj_)
        elif nodeName_ == 'request_project_inactivate':
            obj_ = request_project_inactivateType.factory()
            obj_.build(child_)
            self.set_request_project_inactivate(obj_)
        elif nodeName_ == 'notify_project_inactivate':
            obj_ = notify_project_inactivateType.factory()
            obj_.build(child_)
            self.set_notify_project_inactivate(obj_)
        elif nodeName_ == 'request_project_reactivate':
            obj_ = request_project_reactivateType.factory()
            obj_.build(child_)
            self.set_request_project_reactivate(obj_)
        elif nodeName_ == 'notify_project_reactivate':
            obj_ = notify_project_reactivateType.factory()
            obj_.build(child_)
            self.set_notify_project_reactivate(obj_)
        elif nodeName_ == 'request_account_inactivate':
            obj_ = request_account_inactivateType.factory()
            obj_.build(child_)
            self.set_request_account_inactivate(obj_)
        elif nodeName_ == 'notify_account_inactivate':
            obj_ = notify_account_inactivateType.factory()
            obj_.build(child_)
            self.set_notify_account_inactivate(obj_)
        elif nodeName_ == 'request_account_reactivate':
            obj_ = request_account_reactivateType.factory()
            obj_.build(child_)
            self.set_request_account_reactivate(obj_)
        elif nodeName_ == 'notify_account_reactivate':
            obj_ = notify_account_reactivateType.factory()
            obj_.build(child_)
            self.set_notify_account_reactivate(obj_)
        elif nodeName_ == 'request_user_suspend':
            obj_ = request_user_suspendType.factory()
            obj_.build(child_)
            self.set_request_user_suspend(obj_)
        elif nodeName_ == 'notify_user_suspend':
            obj_ = notify_user_suspendType.factory()
            obj_.build(child_)
            self.set_notify_user_suspend(obj_)
        elif nodeName_ == 'request_user_reactivate':
            obj_ = request_user_reactivateType.factory()
            obj_.build(child_)
            self.set_request_user_reactivate(obj_)
        elif nodeName_ == 'notify_user_reactivate':
            obj_ = notify_user_reactivateType.factory()
            obj_.build(child_)
            self.set_notify_user_reactivate(obj_)
        elif nodeName_ == 'notify_project_usage':
            obj_ = notify_project_usageType.factory()
            obj_.build(child_)
            self.set_notify_project_usage(obj_)
        elif nodeName_ == 'request_user_create':
            obj_ = request_user_createType.factory()
            obj_.build(child_)
            self.set_request_user_create(obj_)
        elif nodeName_ == 'notify_user_create':
            obj_ = notify_user_createType.factory()
            obj_.build(child_)
            self.set_notify_user_create(obj_)
        elif nodeName_ == 'inform_transaction_complete':
            obj_ = inform_transaction_completeType.factory()
            obj_.build(child_)
            self.set_inform_transaction_complete(obj_)
        elif nodeName_ == 'response':
            obj_ = responseType.factory()
            obj_.build(child_)
            self.set_response(obj_)
# end class amie


class response_header_type(GeneratedsSuper):
    """Transaction response header"""
    subclass = None
    superclass = None
    def __init__(self, from_site_name=None, to_site_name=None, originating_site_name=None, transaction_id=None, packet_id=None, date=None, status_code=None, detail_code=None, message=None):
        self.from_site_name = from_site_name
        self.to_site_name = to_site_name
        self.originating_site_name = originating_site_name
        self.transaction_id = transaction_id
        self.packet_id = packet_id
        self.date = date
        self.status_code = status_code
        self.detail_code = detail_code
        self.message = message
    def factory(*args_, **kwargs_):
        if response_header_type.subclass:
            return response_header_type.subclass(*args_, **kwargs_)
        else:
            return response_header_type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_from_site_name(self): return self.from_site_name
    def set_from_site_name(self, from_site_name): self.from_site_name = from_site_name
    def get_to_site_name(self): return self.to_site_name
    def set_to_site_name(self, to_site_name): self.to_site_name = to_site_name
    def get_originating_site_name(self): return self.originating_site_name
    def set_originating_site_name(self, originating_site_name): self.originating_site_name = originating_site_name
    def get_transaction_id(self): return self.transaction_id
    def set_transaction_id(self, transaction_id): self.transaction_id = transaction_id
    def get_packet_id(self): return self.packet_id
    def set_packet_id(self, packet_id): self.packet_id = packet_id
    def get_date(self): return self.date
    def set_date(self, date): self.date = date
    def get_status_code(self): return self.status_code
    def set_status_code(self, status_code): self.status_code = status_code
    def validate_response_status_code_type(self, value):
        # Validate type response_status_code_type, a restriction on xs:normalizedString.
        pass
    def get_detail_code(self): return self.detail_code
    def set_detail_code(self, detail_code): self.detail_code = detail_code
    def get_message(self): return self.message
    def set_message(self, message): self.message = message
    def export(self, outfile, level, namespace_='', name_='response_header_type', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='response_header_type')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='response_header_type'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='response_header_type', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.from_site_name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfrom_site_name>%s</%sfrom_site_name>%s' % (namespace_, self.gds_format_string(quote_xml(self.from_site_name).encode(ExternalEncoding), input_name='from_site_name'), namespace_, eol_))
        if self.to_site_name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sto_site_name>%s</%sto_site_name>%s' % (namespace_, self.gds_format_string(quote_xml(self.to_site_name).encode(ExternalEncoding), input_name='to_site_name'), namespace_, eol_))
        if self.originating_site_name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soriginating_site_name>%s</%soriginating_site_name>%s' % (namespace_, self.gds_format_string(quote_xml(self.originating_site_name).encode(ExternalEncoding), input_name='originating_site_name'), namespace_, eol_))
        if self.transaction_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stransaction_id>%s</%stransaction_id>%s' % (namespace_, self.gds_format_integer(self.transaction_id, input_name='transaction_id'), namespace_, eol_))
        if self.packet_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spacket_id>%s</%spacket_id>%s' % (namespace_, self.gds_format_integer(self.packet_id, input_name='packet_id'), namespace_, eol_))
        if self.date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdate>%s</%sdate>%s' % (namespace_, self.gds_format_string(quote_xml(self.date).encode(ExternalEncoding), input_name='date'), namespace_, eol_))
        if self.status_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstatus_code>%s</%sstatus_code>%s' % (namespace_, self.gds_format_string(quote_xml(self.status_code).encode(ExternalEncoding), input_name='status_code'), namespace_, eol_))
        if self.detail_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdetail_code>%s</%sdetail_code>%s' % (namespace_, self.gds_format_integer(self.detail_code, input_name='detail_code'), namespace_, eol_))
        if self.message is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smessage>%s</%smessage>%s' % (namespace_, self.gds_format_string(quote_xml(self.message).encode(ExternalEncoding), input_name='message'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.from_site_name is not None or
            self.to_site_name is not None or
            self.originating_site_name is not None or
            self.transaction_id is not None or
            self.packet_id is not None or
            self.date is not None or
            self.status_code is not None or
            self.detail_code is not None or
            self.message is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='response_header_type'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.from_site_name is not None:
            showIndent(outfile, level)
            outfile.write('from_site_name=%s,\n' % quote_python(self.from_site_name).encode(ExternalEncoding))
        if self.to_site_name is not None:
            showIndent(outfile, level)
            outfile.write('to_site_name=%s,\n' % quote_python(self.to_site_name).encode(ExternalEncoding))
        if self.originating_site_name is not None:
            showIndent(outfile, level)
            outfile.write('originating_site_name=%s,\n' % quote_python(self.originating_site_name).encode(ExternalEncoding))
        if self.transaction_id is not None:
            showIndent(outfile, level)
            outfile.write('transaction_id=%d,\n' % self.transaction_id)
        if self.packet_id is not None:
            showIndent(outfile, level)
            outfile.write('packet_id=%d,\n' % self.packet_id)
        if self.date is not None:
            showIndent(outfile, level)
            outfile.write('date=%s,\n' % quote_python(self.date).encode(ExternalEncoding))
        if self.status_code is not None:
            showIndent(outfile, level)
            outfile.write('status_code=%s,\n' % quote_python(self.status_code).encode(ExternalEncoding))
        if self.detail_code is not None:
            showIndent(outfile, level)
            outfile.write('detail_code=%d,\n' % self.detail_code)
        if self.message is not None:
            showIndent(outfile, level)
            outfile.write('message=%s,\n' % quote_python(self.message).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'from_site_name':
            from_site_name_ = child_.text
            from_site_name_ = self.gds_validate_string(from_site_name_, node, 'from_site_name')
            self.from_site_name = from_site_name_
        elif nodeName_ == 'to_site_name':
            to_site_name_ = child_.text
            to_site_name_ = self.gds_validate_string(to_site_name_, node, 'to_site_name')
            self.to_site_name = to_site_name_
        elif nodeName_ == 'originating_site_name':
            originating_site_name_ = child_.text
            originating_site_name_ = self.gds_validate_string(originating_site_name_, node, 'originating_site_name')
            self.originating_site_name = originating_site_name_
        elif nodeName_ == 'transaction_id':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'transaction_id')
            self.transaction_id = ival_
        elif nodeName_ == 'packet_id':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'packet_id')
            self.packet_id = ival_
        elif nodeName_ == 'date':
            date_ = child_.text
            date_ = self.gds_validate_string(date_, node, 'date')
            self.date = date_
        elif nodeName_ == 'status_code':
            status_code_ = child_.text
            status_code_ = self.gds_validate_string(status_code_, node, 'status_code')
            self.status_code = status_code_
            self.validate_response_status_code_type(self.status_code)    # validate type response_status_code_type
        elif nodeName_ == 'detail_code':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'detail_code')
            self.detail_code = ival_
        elif nodeName_ == 'message':
            message_ = child_.text
            message_ = self.gds_validate_string(message_, node, 'message')
            self.message = message_
# end class response_header_type


class expected_reply_list(GeneratedsSuper):
    """List of packet types that can follow"""
    subclass = None
    superclass = None
    def __init__(self, expected_reply=None):
        if expected_reply is None:
            self.expected_reply = []
        else:
            self.expected_reply = expected_reply
    def factory(*args_, **kwargs_):
        if expected_reply_list.subclass:
            return expected_reply_list.subclass(*args_, **kwargs_)
        else:
            return expected_reply_list(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_expected_reply(self): return self.expected_reply
    def set_expected_reply(self, expected_reply): self.expected_reply = expected_reply
    def add_expected_reply(self, value): self.expected_reply.append(value)
    def insert_expected_reply(self, index, value): self.expected_reply[index] = value
    def export(self, outfile, level, namespace_='', name_='expected_reply_list', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='expected_reply_list')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='expected_reply_list'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='expected_reply_list', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for expected_reply_ in self.expected_reply:
            expected_reply_.export(outfile, level, namespace_, name_='expected_reply', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.expected_reply
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='expected_reply_list'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('expected_reply=[\n')
        level += 1
        for expected_reply_ in self.expected_reply:
            showIndent(outfile, level)
            outfile.write('model_.expected_reply_type(\n')
            expected_reply_.exportLiteral(outfile, level, name_='expected_reply_type')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'expected_reply':
            obj_ = expected_reply_type.factory()
            obj_.build(child_)
            self.expected_reply.append(obj_)
# end class expected_reply_list


class expected_reply_type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, type_=None, timeout=None):
        self.type_ = type_
        self.timeout = timeout
    def factory(*args_, **kwargs_):
        if expected_reply_type.subclass:
            return expected_reply_type.subclass(*args_, **kwargs_)
        else:
            return expected_reply_type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def validate_packet_type(self, value):
        # Validate type packet_type, a restriction on xs:normalizedString.
        pass
    def get_timeout(self): return self.timeout
    def set_timeout(self, timeout): self.timeout = timeout
    def export(self, outfile, level, namespace_='', name_='expected_reply_type', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='expected_reply_type')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='expected_reply_type'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='expected_reply_type', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.type_ is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stype>%s</%stype>%s' % (namespace_, self.gds_format_string(quote_xml(self.type_).encode(ExternalEncoding), input_name='type'), namespace_, eol_))
        if self.timeout is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stimeout>%s</%stimeout>%s' % (namespace_, self.gds_format_integer(self.timeout, input_name='timeout'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.type_ is not None or
            self.timeout is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='expected_reply_type'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.type_ is not None:
            showIndent(outfile, level)
            outfile.write('type_=%s,\n' % quote_python(self.type_).encode(ExternalEncoding))
        if self.timeout is not None:
            showIndent(outfile, level)
            outfile.write('timeout=%d,\n' % self.timeout)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'type':
            type_ = child_.text
            type_ = self.gds_validate_string(type_, node, 'type')
            self.type_ = type_
            self.validate_packet_type(self.type_)    # validate type packet_type
        elif nodeName_ == 'timeout':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'timeout')
            self.timeout = ival_
# end class expected_reply_type


class address(GeneratedsSuper):
    """Address"""
    subclass = None
    superclass = None
    def __init__(self, off_address=None, str_address=None, str_address2=None, city=None, state=None, zip=None, country=None):
        self.off_address = off_address
        self.str_address = str_address
        self.str_address2 = str_address2
        self.city = city
        self.state = state
        self.zip = zip
        self.country = country
    def factory(*args_, **kwargs_):
        if address.subclass:
            return address.subclass(*args_, **kwargs_)
        else:
            return address(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_off_address(self): return self.off_address
    def set_off_address(self, off_address): self.off_address = off_address
    def get_str_address(self): return self.str_address
    def set_str_address(self, str_address): self.str_address = str_address
    def get_str_address2(self): return self.str_address2
    def set_str_address2(self, str_address2): self.str_address2 = str_address2
    def get_city(self): return self.city
    def set_city(self, city): self.city = city
    def get_state(self): return self.state
    def set_state(self, state): self.state = state
    def get_zip(self): return self.zip
    def set_zip(self, zip): self.zip = zip
    def get_country(self): return self.country
    def set_country(self, country): self.country = country
    def export(self, outfile, level, namespace_='', name_='address', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='address')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='address'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='address', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.off_address is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soff_address>%s</%soff_address>%s' % (namespace_, self.gds_format_string(quote_xml(self.off_address).encode(ExternalEncoding), input_name='off_address'), namespace_, eol_))
        if self.str_address is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstr_address>%s</%sstr_address>%s' % (namespace_, self.gds_format_string(quote_xml(self.str_address).encode(ExternalEncoding), input_name='str_address'), namespace_, eol_))
        if self.str_address2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstr_address2>%s</%sstr_address2>%s' % (namespace_, self.gds_format_string(quote_xml(self.str_address2).encode(ExternalEncoding), input_name='str_address2'), namespace_, eol_))
        if self.city is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scity>%s</%scity>%s' % (namespace_, self.gds_format_string(quote_xml(self.city).encode(ExternalEncoding), input_name='city'), namespace_, eol_))
        if self.state is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstate>%s</%sstate>%s' % (namespace_, self.gds_format_string(quote_xml(self.state).encode(ExternalEncoding), input_name='state'), namespace_, eol_))
        if self.zip is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%szip>%s</%szip>%s' % (namespace_, self.gds_format_string(quote_xml(self.zip).encode(ExternalEncoding), input_name='zip'), namespace_, eol_))
        if self.country is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scountry>%s</%scountry>%s' % (namespace_, self.gds_format_string(quote_xml(self.country).encode(ExternalEncoding), input_name='country'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.off_address is not None or
            self.str_address is not None or
            self.str_address2 is not None or
            self.city is not None or
            self.state is not None or
            self.zip is not None or
            self.country is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='address'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.off_address is not None:
            showIndent(outfile, level)
            outfile.write('off_address=%s,\n' % quote_python(self.off_address).encode(ExternalEncoding))
        if self.str_address is not None:
            showIndent(outfile, level)
            outfile.write('str_address=%s,\n' % quote_python(self.str_address).encode(ExternalEncoding))
        if self.str_address2 is not None:
            showIndent(outfile, level)
            outfile.write('str_address2=%s,\n' % quote_python(self.str_address2).encode(ExternalEncoding))
        if self.city is not None:
            showIndent(outfile, level)
            outfile.write('city=%s,\n' % quote_python(self.city).encode(ExternalEncoding))
        if self.state is not None:
            showIndent(outfile, level)
            outfile.write('state=%s,\n' % quote_python(self.state).encode(ExternalEncoding))
        if self.zip is not None:
            showIndent(outfile, level)
            outfile.write('zip=%s,\n' % quote_python(self.zip).encode(ExternalEncoding))
        if self.country is not None:
            showIndent(outfile, level)
            outfile.write('country=%s,\n' % quote_python(self.country).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'off_address':
            off_address_ = child_.text
            off_address_ = self.gds_validate_string(off_address_, node, 'off_address')
            self.off_address = off_address_
        elif nodeName_ == 'str_address':
            str_address_ = child_.text
            str_address_ = self.gds_validate_string(str_address_, node, 'str_address')
            self.str_address = str_address_
        elif nodeName_ == 'str_address2':
            str_address2_ = child_.text
            str_address2_ = self.gds_validate_string(str_address2_, node, 'str_address2')
            self.str_address2 = str_address2_
        elif nodeName_ == 'city':
            city_ = child_.text
            city_ = self.gds_validate_string(city_, node, 'city')
            self.city = city_
        elif nodeName_ == 'state':
            state_ = child_.text
            state_ = self.gds_validate_string(state_, node, 'state')
            self.state = state_
        elif nodeName_ == 'zip':
            zip_ = child_.text
            zip_ = self.gds_validate_string(zip_, node, 'zip')
            self.zip = zip_
        elif nodeName_ == 'country':
            country_ = child_.text
            country_ = self.gds_validate_string(country_, node, 'country')
            self.country = country_
# end class address


class reason(GeneratedsSuper):
    """Reason to take relevant action"""
    subclass = None
    superclass = None
    def __init__(self, reason_code=None, description=None):
        self.reason_code = reason_code
        self.description = description
    def factory(*args_, **kwargs_):
        if reason.subclass:
            return reason.subclass(*args_, **kwargs_)
        else:
            return reason(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_reason_code(self): return self.reason_code
    def set_reason_code(self, reason_code): self.reason_code = reason_code
    def get_description(self): return self.description
    def set_description(self, description): self.description = description
    def export(self, outfile, level, namespace_='', name_='reason', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='reason')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='reason'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='reason', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.reason_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreason_code>%s</%sreason_code>%s' % (namespace_, self.gds_format_integer(self.reason_code, input_name='reason_code'), namespace_, eol_))
        if self.description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdescription>%s</%sdescription>%s' % (namespace_, self.gds_format_string(quote_xml(self.description).encode(ExternalEncoding), input_name='description'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.reason_code is not None or
            self.description is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='reason'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.reason_code is not None:
            showIndent(outfile, level)
            outfile.write('reason_code=%d,\n' % self.reason_code)
        if self.description is not None:
            showIndent(outfile, level)
            outfile.write('description=%s,\n' % quote_python(self.description).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'reason_code':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'reason_code')
            self.reason_code = ival_
        elif nodeName_ == 'description':
            description_ = child_.text
            description_ = self.gds_validate_string(description_, node, 'description')
            self.description = description_
# end class reason


class field_of_science_type(GeneratedsSuper):
    """Field of science type"""
    subclass = None
    superclass = None
    def __init__(self, number=None, abbr=None, description=None):
        self.number = number
        self.abbr = abbr
        self.description = description
    def factory(*args_, **kwargs_):
        if field_of_science_type.subclass:
            return field_of_science_type.subclass(*args_, **kwargs_)
        else:
            return field_of_science_type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_number(self): return self.number
    def set_number(self, number): self.number = number
    def get_abbr(self): return self.abbr
    def set_abbr(self, abbr): self.abbr = abbr
    def get_description(self): return self.description
    def set_description(self, description): self.description = description
    def export(self, outfile, level, namespace_='', name_='field_of_science_type', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='field_of_science_type')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='field_of_science_type'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='field_of_science_type', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.number is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumber>%s</%snumber>%s' % (namespace_, self.gds_format_string(quote_xml(self.number).encode(ExternalEncoding), input_name='number'), namespace_, eol_))
        if self.abbr is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sabbr>%s</%sabbr>%s' % (namespace_, self.gds_format_string(quote_xml(self.abbr).encode(ExternalEncoding), input_name='abbr'), namespace_, eol_))
        if self.description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdescription>%s</%sdescription>%s' % (namespace_, self.gds_format_string(quote_xml(self.description).encode(ExternalEncoding), input_name='description'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.number is not None or
            self.abbr is not None or
            self.description is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='field_of_science_type'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.number is not None:
            showIndent(outfile, level)
            outfile.write('number=%s,\n' % quote_python(self.number).encode(ExternalEncoding))
        if self.abbr is not None:
            showIndent(outfile, level)
            outfile.write('abbr=%s,\n' % quote_python(self.abbr).encode(ExternalEncoding))
        if self.description is not None:
            showIndent(outfile, level)
            outfile.write('description=%s,\n' % quote_python(self.description).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'number':
            number_ = child_.text
            number_ = self.gds_validate_string(number_, node, 'number')
            self.number = number_
        elif nodeName_ == 'abbr':
            abbr_ = child_.text
            abbr_ = self.gds_validate_string(abbr_, node, 'abbr')
            self.abbr = abbr_
        elif nodeName_ == 'description':
            description_ = child_.text
            description_ = self.gds_validate_string(description_, node, 'description')
            self.description = description_
# end class field_of_science_type


class person_type(GeneratedsSuper):
    """Person's common fields"""
    subclass = None
    superclass = None
    def __init__(self, last_name=None, first_name=None, middle_name=None, email=None, title=None, organization=None, citizenship=None, country_access=None, address=None, business_phone=None, home_phone=None, fax=None, org_code=None, emp_code=None, dept=None, position=None, person_id=None, uid=None, global_id=None):
        self.last_name = last_name
        self.first_name = first_name
        self.middle_name = middle_name
        self.email = email
        self.title = title
        self.organization = organization
        self.citizenship = citizenship
        self.country_access = country_access
        self.address = address
        self.business_phone = business_phone
        self.home_phone = home_phone
        self.fax = fax
        self.org_code = org_code
        self.emp_code = emp_code
        self.dept = dept
        self.position = position
        self.person_id = person_id
        self.uid = uid
        self.global_id = global_id
    def factory(*args_, **kwargs_):
        if person_type.subclass:
            return person_type.subclass(*args_, **kwargs_)
        else:
            return person_type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_last_name(self): return self.last_name
    def set_last_name(self, last_name): self.last_name = last_name
    def get_first_name(self): return self.first_name
    def set_first_name(self, first_name): self.first_name = first_name
    def get_middle_name(self): return self.middle_name
    def set_middle_name(self, middle_name): self.middle_name = middle_name
    def get_email(self): return self.email
    def set_email(self, email): self.email = email
    def get_title(self): return self.title
    def set_title(self, title): self.title = title
    def get_organization(self): return self.organization
    def set_organization(self, organization): self.organization = organization
    def get_citizenship(self): return self.citizenship
    def set_citizenship(self, citizenship): self.citizenship = citizenship
    def get_country_access(self): return self.country_access
    def set_country_access(self, country_access): self.country_access = country_access
    def get_address(self): return self.address
    def set_address(self, address): self.address = address
    def get_business_phone(self): return self.business_phone
    def set_business_phone(self, business_phone): self.business_phone = business_phone
    def get_home_phone(self): return self.home_phone
    def set_home_phone(self, home_phone): self.home_phone = home_phone
    def get_fax(self): return self.fax
    def set_fax(self, fax): self.fax = fax
    def get_org_code(self): return self.org_code
    def set_org_code(self, org_code): self.org_code = org_code
    def get_emp_code(self): return self.emp_code
    def set_emp_code(self, emp_code): self.emp_code = emp_code
    def get_dept(self): return self.dept
    def set_dept(self, dept): self.dept = dept
    def get_position(self): return self.position
    def set_position(self, position): self.position = position
    def get_person_id(self): return self.person_id
    def set_person_id(self, person_id): self.person_id = person_id
    def get_uid(self): return self.uid
    def set_uid(self, uid): self.uid = uid
    def get_global_id(self): return self.global_id
    def set_global_id(self, global_id): self.global_id = global_id
    def export(self, outfile, level, namespace_='', name_='person_type', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='person_type')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='person_type'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='person_type', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.last_name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slast_name>%s</%slast_name>%s' % (namespace_, self.gds_format_string(quote_xml(self.last_name).encode(ExternalEncoding), input_name='last_name'), namespace_, eol_))
        if self.first_name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfirst_name>%s</%sfirst_name>%s' % (namespace_, self.gds_format_string(quote_xml(self.first_name).encode(ExternalEncoding), input_name='first_name'), namespace_, eol_))
        if self.middle_name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smiddle_name>%s</%smiddle_name>%s' % (namespace_, self.gds_format_string(quote_xml(self.middle_name).encode(ExternalEncoding), input_name='middle_name'), namespace_, eol_))
        if self.email is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%semail>%s</%semail>%s' % (namespace_, self.gds_format_string(quote_xml(self.email).encode(ExternalEncoding), input_name='email'), namespace_, eol_))
        if self.title is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stitle>%s</%stitle>%s' % (namespace_, self.gds_format_string(quote_xml(self.title).encode(ExternalEncoding), input_name='title'), namespace_, eol_))
        if self.organization is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sorganization>%s</%sorganization>%s' % (namespace_, self.gds_format_string(quote_xml(self.organization).encode(ExternalEncoding), input_name='organization'), namespace_, eol_))
        if self.citizenship is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scitizenship>%s</%scitizenship>%s' % (namespace_, self.gds_format_string(quote_xml(self.citizenship).encode(ExternalEncoding), input_name='citizenship'), namespace_, eol_))
        if self.country_access is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scountry_access>%s</%scountry_access>%s' % (namespace_, self.gds_format_string(quote_xml(self.country_access).encode(ExternalEncoding), input_name='country_access'), namespace_, eol_))
        if self.address is not None:
            self.address.export(outfile, level, namespace_, name_='address', pretty_print=pretty_print)
        if self.business_phone is not None:
            self.business_phone.export(outfile, level, namespace_, name_='business_phone', pretty_print=pretty_print)
        if self.home_phone is not None:
            self.home_phone.export(outfile, level, namespace_, name_='home_phone', pretty_print=pretty_print)
        if self.fax is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfax>%s</%sfax>%s' % (namespace_, self.gds_format_string(quote_xml(self.fax).encode(ExternalEncoding), input_name='fax'), namespace_, eol_))
        if self.org_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sorg_code>%s</%sorg_code>%s' % (namespace_, self.gds_format_string(quote_xml(self.org_code).encode(ExternalEncoding), input_name='org_code'), namespace_, eol_))
        if self.emp_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%semp_code>%s</%semp_code>%s' % (namespace_, self.gds_format_string(quote_xml(self.emp_code).encode(ExternalEncoding), input_name='emp_code'), namespace_, eol_))
        if self.dept is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdept>%s</%sdept>%s' % (namespace_, self.gds_format_string(quote_xml(self.dept).encode(ExternalEncoding), input_name='dept'), namespace_, eol_))
        if self.position is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sposition>%s</%sposition>%s' % (namespace_, self.gds_format_string(quote_xml(self.position).encode(ExternalEncoding), input_name='position'), namespace_, eol_))
        if self.person_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sperson_id>%s</%sperson_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.person_id).encode(ExternalEncoding), input_name='person_id'), namespace_, eol_))
        if self.uid is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%suid>%s</%suid>%s' % (namespace_, self.gds_format_integer(self.uid, input_name='uid'), namespace_, eol_))
        if self.global_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sglobal_id>%s</%sglobal_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.global_id).encode(ExternalEncoding), input_name='global_id'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.last_name is not None or
            self.first_name is not None or
            self.middle_name is not None or
            self.email is not None or
            self.title is not None or
            self.organization is not None or
            self.citizenship is not None or
            self.country_access is not None or
            self.address is not None or
            self.business_phone is not None or
            self.home_phone is not None or
            self.fax is not None or
            self.org_code is not None or
            self.emp_code is not None or
            self.dept is not None or
            self.position is not None or
            self.person_id is not None or
            self.uid is not None or
            self.global_id is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='person_type'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.last_name is not None:
            showIndent(outfile, level)
            outfile.write('last_name=%s,\n' % quote_python(self.last_name).encode(ExternalEncoding))
        if self.first_name is not None:
            showIndent(outfile, level)
            outfile.write('first_name=%s,\n' % quote_python(self.first_name).encode(ExternalEncoding))
        if self.middle_name is not None:
            showIndent(outfile, level)
            outfile.write('middle_name=%s,\n' % quote_python(self.middle_name).encode(ExternalEncoding))
        if self.email is not None:
            showIndent(outfile, level)
            outfile.write('email=%s,\n' % quote_python(self.email).encode(ExternalEncoding))
        if self.title is not None:
            showIndent(outfile, level)
            outfile.write('title=%s,\n' % quote_python(self.title).encode(ExternalEncoding))
        if self.organization is not None:
            showIndent(outfile, level)
            outfile.write('organization=%s,\n' % quote_python(self.organization).encode(ExternalEncoding))
        if self.citizenship is not None:
            showIndent(outfile, level)
            outfile.write('citizenship=%s,\n' % quote_python(self.citizenship).encode(ExternalEncoding))
        if self.country_access is not None:
            showIndent(outfile, level)
            outfile.write('country_access=%s,\n' % quote_python(self.country_access).encode(ExternalEncoding))
        if self.address is not None:
            showIndent(outfile, level)
            outfile.write('address=model_.address(\n')
            self.address.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.business_phone is not None:
            showIndent(outfile, level)
            outfile.write('business_phone=model_.phone_type(\n')
            self.business_phone.exportLiteral(outfile, level, name_='business_phone')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.home_phone is not None:
            showIndent(outfile, level)
            outfile.write('home_phone=model_.phone_type(\n')
            self.home_phone.exportLiteral(outfile, level, name_='home_phone')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.fax is not None:
            showIndent(outfile, level)
            outfile.write('fax=%s,\n' % quote_python(self.fax).encode(ExternalEncoding))
        if self.org_code is not None:
            showIndent(outfile, level)
            outfile.write('org_code=%s,\n' % quote_python(self.org_code).encode(ExternalEncoding))
        if self.emp_code is not None:
            showIndent(outfile, level)
            outfile.write('emp_code=%s,\n' % quote_python(self.emp_code).encode(ExternalEncoding))
        if self.dept is not None:
            showIndent(outfile, level)
            outfile.write('dept=%s,\n' % quote_python(self.dept).encode(ExternalEncoding))
        if self.position is not None:
            showIndent(outfile, level)
            outfile.write('position=%s,\n' % quote_python(self.position).encode(ExternalEncoding))
        if self.person_id is not None:
            showIndent(outfile, level)
            outfile.write('person_id=%s,\n' % quote_python(self.person_id).encode(ExternalEncoding))
        if self.uid is not None:
            showIndent(outfile, level)
            outfile.write('uid=%d,\n' % self.uid)
        if self.global_id is not None:
            showIndent(outfile, level)
            outfile.write('global_id=%s,\n' % quote_python(self.global_id).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'last_name':
            last_name_ = child_.text
            last_name_ = self.gds_validate_string(last_name_, node, 'last_name')
            self.last_name = last_name_
        elif nodeName_ == 'first_name':
            first_name_ = child_.text
            first_name_ = self.gds_validate_string(first_name_, node, 'first_name')
            self.first_name = first_name_
        elif nodeName_ == 'middle_name':
            middle_name_ = child_.text
            middle_name_ = self.gds_validate_string(middle_name_, node, 'middle_name')
            self.middle_name = middle_name_
        elif nodeName_ == 'email':
            email_ = child_.text
            email_ = self.gds_validate_string(email_, node, 'email')
            self.email = email_
        elif nodeName_ == 'title':
            title_ = child_.text
            title_ = self.gds_validate_string(title_, node, 'title')
            self.title = title_
        elif nodeName_ == 'organization':
            organization_ = child_.text
            organization_ = self.gds_validate_string(organization_, node, 'organization')
            self.organization = organization_
        elif nodeName_ == 'citizenship':
            citizenship_ = child_.text
            citizenship_ = self.gds_validate_string(citizenship_, node, 'citizenship')
            self.citizenship = citizenship_
        elif nodeName_ == 'country_access':
            country_access_ = child_.text
            country_access_ = self.gds_validate_string(country_access_, node, 'country_access')
            self.country_access = country_access_
        elif nodeName_ == 'address':
            obj_ = address.factory()
            obj_.build(child_)
            self.set_address(obj_)
        elif nodeName_ == 'business_phone':
            obj_ = phone_type.factory()
            obj_.build(child_)
            self.set_business_phone(obj_)
        elif nodeName_ == 'home_phone':
            obj_ = phone_type.factory()
            obj_.build(child_)
            self.set_home_phone(obj_)
        elif nodeName_ == 'fax':
            fax_ = child_.text
            fax_ = self.gds_validate_string(fax_, node, 'fax')
            self.fax = fax_
        elif nodeName_ == 'org_code':
            org_code_ = child_.text
            org_code_ = self.gds_validate_string(org_code_, node, 'org_code')
            self.org_code = org_code_
        elif nodeName_ == 'emp_code':
            emp_code_ = child_.text
            emp_code_ = self.gds_validate_string(emp_code_, node, 'emp_code')
            self.emp_code = emp_code_
        elif nodeName_ == 'dept':
            dept_ = child_.text
            dept_ = self.gds_validate_string(dept_, node, 'dept')
            self.dept = dept_
        elif nodeName_ == 'position':
            position_ = child_.text
            position_ = self.gds_validate_string(position_, node, 'position')
            self.position = position_
        elif nodeName_ == 'person_id':
            person_id_ = child_.text
            person_id_ = self.gds_validate_string(person_id_, node, 'person_id')
            self.person_id = person_id_
        elif nodeName_ == 'uid':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'uid')
            self.uid = ival_
        elif nodeName_ == 'global_id':
            global_id_ = child_.text
            global_id_ = self.gds_validate_string(global_id_, node, 'global_id')
            self.global_id = global_id_
# end class person_type


class phone_type(GeneratedsSuper):
    """Phone type"""
    subclass = None
    superclass = None
    def __init__(self, number=None, extension=None, comment=None):
        self.number = number
        self.extension = extension
        self.comment = comment
    def factory(*args_, **kwargs_):
        if phone_type.subclass:
            return phone_type.subclass(*args_, **kwargs_)
        else:
            return phone_type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_number(self): return self.number
    def set_number(self, number): self.number = number
    def get_extension(self): return self.extension
    def set_extension(self, extension): self.extension = extension
    def get_comment(self): return self.comment
    def set_comment(self, comment): self.comment = comment
    def export(self, outfile, level, namespace_='', name_='phone_type', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='phone_type')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='phone_type'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='phone_type', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.number is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumber>%s</%snumber>%s' % (namespace_, self.gds_format_string(quote_xml(self.number).encode(ExternalEncoding), input_name='number'), namespace_, eol_))
        if self.extension is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sextension>%s</%sextension>%s' % (namespace_, self.gds_format_string(quote_xml(self.extension).encode(ExternalEncoding), input_name='extension'), namespace_, eol_))
        if self.comment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scomment>%s</%scomment>%s' % (namespace_, self.gds_format_string(quote_xml(self.comment).encode(ExternalEncoding), input_name='comment'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.number is not None or
            self.extension is not None or
            self.comment is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='phone_type'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.number is not None:
            showIndent(outfile, level)
            outfile.write('number=%s,\n' % quote_python(self.number).encode(ExternalEncoding))
        if self.extension is not None:
            showIndent(outfile, level)
            outfile.write('extension=%s,\n' % quote_python(self.extension).encode(ExternalEncoding))
        if self.comment is not None:
            showIndent(outfile, level)
            outfile.write('comment=%s,\n' % quote_python(self.comment).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'number':
            number_ = child_.text
            number_ = self.gds_validate_string(number_, node, 'number')
            self.number = number_
        elif nodeName_ == 'extension':
            extension_ = child_.text
            extension_ = self.gds_validate_string(extension_, node, 'extension')
            self.extension = extension_
        elif nodeName_ == 'comment':
            comment_ = child_.text
            comment_ = self.gds_validate_string(comment_, node, 'comment')
            self.comment = comment_
# end class phone_type


class site_person_id_list(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, site_person_id=None):
        if site_person_id is None:
            self.site_person_id = []
        else:
            self.site_person_id = site_person_id
    def factory(*args_, **kwargs_):
        if site_person_id_list.subclass:
            return site_person_id_list.subclass(*args_, **kwargs_)
        else:
            return site_person_id_list(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_site_person_id(self): return self.site_person_id
    def set_site_person_id(self, site_person_id): self.site_person_id = site_person_id
    def add_site_person_id(self, value): self.site_person_id.append(value)
    def insert_site_person_id(self, index, value): self.site_person_id[index] = value
    def export(self, outfile, level, namespace_='', name_='site_person_id_list', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='site_person_id_list')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='site_person_id_list'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='site_person_id_list', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for site_person_id_ in self.site_person_id:
            site_person_id_.export(outfile, level, namespace_, name_='site_person_id', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.site_person_id
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='site_person_id_list'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('site_person_id=[\n')
        level += 1
        for site_person_id_ in self.site_person_id:
            showIndent(outfile, level)
            outfile.write('model_.site_person_id_type(\n')
            site_person_id_.exportLiteral(outfile, level, name_='site_person_id_type')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'site_person_id':
            obj_ = site_person_id_type.factory()
            obj_.build(child_)
            self.site_person_id.append(obj_)
# end class site_person_id_list


class site_person_id_type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, site=None, person_id=None):
        self.site = site
        self.person_id = person_id
    def factory(*args_, **kwargs_):
        if site_person_id_type.subclass:
            return site_person_id_type.subclass(*args_, **kwargs_)
        else:
            return site_person_id_type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_site(self): return self.site
    def set_site(self, site): self.site = site
    def get_person_id(self): return self.person_id
    def set_person_id(self, person_id): self.person_id = person_id
    def export(self, outfile, level, namespace_='', name_='site_person_id_type', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='site_person_id_type')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='site_person_id_type'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='site_person_id_type', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.site is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssite>%s</%ssite>%s' % (namespace_, self.gds_format_string(quote_xml(self.site).encode(ExternalEncoding), input_name='site'), namespace_, eol_))
        if self.person_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sperson_id>%s</%sperson_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.person_id).encode(ExternalEncoding), input_name='person_id'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.site is not None or
            self.person_id is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='site_person_id_type'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.site is not None:
            showIndent(outfile, level)
            outfile.write('site=%s,\n' % quote_python(self.site).encode(ExternalEncoding))
        if self.person_id is not None:
            showIndent(outfile, level)
            outfile.write('person_id=%s,\n' % quote_python(self.person_id).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'site':
            site_ = child_.text
            site_ = self.gds_validate_string(site_, node, 'site')
            self.site = site_
        elif nodeName_ == 'person_id':
            person_id_ = child_.text
            person_id_ = self.gds_validate_string(person_id_, node, 'person_id')
            self.person_id = person_id_
# end class site_person_id_type


class host_info_type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, host=None, mb_reserved_memory=None, processors=None):
        self.host = host
        self.mb_reserved_memory = mb_reserved_memory
        self.processors = processors
    def factory(*args_, **kwargs_):
        if host_info_type.subclass:
            return host_info_type.subclass(*args_, **kwargs_)
        else:
            return host_info_type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_host(self): return self.host
    def set_host(self, host): self.host = host
    def get_mb_reserved_memory(self): return self.mb_reserved_memory
    def set_mb_reserved_memory(self, mb_reserved_memory): self.mb_reserved_memory = mb_reserved_memory
    def get_processors(self): return self.processors
    def set_processors(self, processors): self.processors = processors
    def export(self, outfile, level, namespace_='', name_='host_info_type', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='host_info_type')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='host_info_type'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='host_info_type', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.host is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%shost>%s</%shost>%s' % (namespace_, self.gds_format_string(quote_xml(self.host).encode(ExternalEncoding), input_name='host'), namespace_, eol_))
        if self.mb_reserved_memory is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smb_reserved_memory>%s</%smb_reserved_memory>%s' % (namespace_, self.gds_format_double(self.mb_reserved_memory, input_name='mb_reserved_memory'), namespace_, eol_))
        if self.processors is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sprocessors>%s</%sprocessors>%s' % (namespace_, self.gds_format_integer(self.processors, input_name='processors'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.host is not None or
            self.mb_reserved_memory is not None or
            self.processors is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='host_info_type'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.host is not None:
            showIndent(outfile, level)
            outfile.write('host=%s,\n' % quote_python(self.host).encode(ExternalEncoding))
        if self.mb_reserved_memory is not None:
            showIndent(outfile, level)
            outfile.write('mb_reserved_memory=%e,\n' % self.mb_reserved_memory)
        if self.processors is not None:
            showIndent(outfile, level)
            outfile.write('processors=%d,\n' % self.processors)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'host':
            host_ = child_.text
            host_ = self.gds_validate_string(host_, node, 'host')
            self.host = host_
        elif nodeName_ == 'mb_reserved_memory':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'mb_reserved_memory')
            self.mb_reserved_memory = fval_
        elif nodeName_ == 'processors':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'processors')
            self.processors = ival_
# end class host_info_type


class attribute_type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, value=None):
        self.name = name
        self.value = value
    def factory(*args_, **kwargs_):
        if attribute_type.subclass:
            return attribute_type.subclass(*args_, **kwargs_)
        else:
            return attribute_type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_value(self): return self.value
    def set_value(self, value): self.value = value
    def export(self, outfile, level, namespace_='', name_='attribute_type', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='attribute_type')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='attribute_type'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='attribute_type', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sname>%s</%sname>%s' % (namespace_, self.gds_format_string(quote_xml(self.name).encode(ExternalEncoding), input_name='name'), namespace_, eol_))
        if self.value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalue>%s</%svalue>%s' % (namespace_, self.gds_format_string(quote_xml(self.value).encode(ExternalEncoding), input_name='value'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.name is not None or
            self.value is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='attribute_type'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name=%s,\n' % quote_python(self.name).encode(ExternalEncoding))
        if self.value is not None:
            showIndent(outfile, level)
            outfile.write('value=%s,\n' % quote_python(self.value).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'name':
            name_ = child_.text
            name_ = self.gds_validate_string(name_, node, 'name')
            self.name = name_
        elif nodeName_ == 'value':
            value_ = child_.text
            value_ = self.gds_validate_string(value_, node, 'value')
            self.value = value_
# end class attribute_type


class resource_login_type(GeneratedsSuper):
    """Resource/Login type"""
    subclass = None
    superclass = None
    def __init__(self, resource=None, login=None):
        self.resource = resource
        self.login = login
    def factory(*args_, **kwargs_):
        if resource_login_type.subclass:
            return resource_login_type.subclass(*args_, **kwargs_)
        else:
            return resource_login_type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_resource(self): return self.resource
    def set_resource(self, resource): self.resource = resource
    def get_login(self): return self.login
    def set_login(self, login): self.login = login
    def export(self, outfile, level, namespace_='', name_='resource_login_type', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='resource_login_type')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='resource_login_type'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='resource_login_type', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.resource is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sresource>%s</%sresource>%s' % (namespace_, self.gds_format_string(quote_xml(self.resource).encode(ExternalEncoding), input_name='resource'), namespace_, eol_))
        if self.login is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slogin>%s</%slogin>%s' % (namespace_, self.gds_format_string(quote_xml(self.login).encode(ExternalEncoding), input_name='login'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.resource is not None or
            self.login is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='resource_login_type'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.resource is not None:
            showIndent(outfile, level)
            outfile.write('resource=%s,\n' % quote_python(self.resource).encode(ExternalEncoding))
        if self.login is not None:
            showIndent(outfile, level)
            outfile.write('login=%s,\n' % quote_python(self.login).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'resource':
            resource_ = child_.text
            resource_ = self.gds_validate_string(resource_, node, 'resource')
            self.resource = resource_
        elif nodeName_ == 'login':
            login_ = child_.text
            login_ = self.gds_validate_string(login_, node, 'login')
            self.login = login_
# end class resource_login_type


class request_project_createType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, header=None, body=None):
        self.header = header
        self.body = body
    def factory(*args_, **kwargs_):
        if request_project_createType.subclass:
            return request_project_createType.subclass(*args_, **kwargs_)
        else:
            return request_project_createType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_header(self): return self.header
    def set_header(self, header): self.header = header
    def get_body(self): return self.body
    def set_body(self, body): self.body = body
    def export(self, outfile, level, namespace_='', name_='request_project_createType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='request_project_createType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='request_project_createType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='request_project_createType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.header is not None:
            self.header.export(outfile, level, namespace_, name_='header', pretty_print=pretty_print)
        if self.body is not None:
            self.body.export(outfile, level, namespace_, name_='body', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.header is not None or
            self.body is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='request_project_createType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.header is not None:
            showIndent(outfile, level)
            outfile.write('header=model_.header_type(\n')
            self.header.exportLiteral(outfile, level, name_='header')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.body is not None:
            showIndent(outfile, level)
            outfile.write('body=model_.bodyType(\n')
            self.body.exportLiteral(outfile, level, name_='body')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'header':
            obj_ = header_type.factory()
            obj_.build(child_)
            self.set_header(obj_)
        elif nodeName_ == 'body':
            obj_ = bodyType.factory()
            obj_.build(child_)
            self.set_body(obj_)
# end class request_project_createType


class bodyType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, record_id=None, project_id=None, alloc_type=None, su_alloc=None, pi=None, site_person_id_list=None, start_date=None, end_date=None, project_title=None, pfos=None, sfos_list=None, resource_list=None, alloc_resource=None, grant_num=None, grant_type=None, proposal_num=None, abstract=None, sector=None, qualifications=None, methodologies=None, support=None, other_resources=None, statement_work=None, background=None, justification=None, deliverables=None, milestones=None, progress=None, facilities=None, languages=None, applications=None, diskspace=None, memory=None, processors=None, nsf_status_code=None, comment=None, role_list=None):
        self.record_id = record_id
        self.project_id = project_id
        self.alloc_type = alloc_type
        self.su_alloc = su_alloc
        self.pi = pi
        self.site_person_id_list = site_person_id_list
        self.start_date = start_date
        self.end_date = end_date
        self.project_title = project_title
        self.pfos = pfos
        self.sfos_list = sfos_list
        self.resource_list = resource_list
        self.alloc_resource = alloc_resource
        self.grant_num = grant_num
        self.grant_type = grant_type
        self.proposal_num = proposal_num
        self.abstract = abstract
        self.sector = sector
        self.qualifications = qualifications
        self.methodologies = methodologies
        self.support = support
        self.other_resources = other_resources
        self.statement_work = statement_work
        self.background = background
        self.justification = justification
        self.deliverables = deliverables
        self.milestones = milestones
        self.progress = progress
        self.facilities = facilities
        self.languages = languages
        self.applications = applications
        self.diskspace = diskspace
        self.memory = memory
        self.processors = processors
        self.nsf_status_code = nsf_status_code
        self.comment = comment
        self.role_list = role_list
    def factory(*args_, **kwargs_):
        if bodyType.subclass:
            return bodyType.subclass(*args_, **kwargs_)
        else:
            return bodyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_record_id(self): return self.record_id
    def set_record_id(self, record_id): self.record_id = record_id
    def get_project_id(self): return self.project_id
    def set_project_id(self, project_id): self.project_id = project_id
    def get_alloc_type(self): return self.alloc_type
    def set_alloc_type(self, alloc_type): self.alloc_type = alloc_type
    def get_su_alloc(self): return self.su_alloc
    def set_su_alloc(self, su_alloc): self.su_alloc = su_alloc
    def get_pi(self): return self.pi
    def set_pi(self, pi): self.pi = pi
    def get_site_person_id_list(self): return self.site_person_id_list
    def set_site_person_id_list(self, site_person_id_list): self.site_person_id_list = site_person_id_list
    def get_start_date(self): return self.start_date
    def set_start_date(self, start_date): self.start_date = start_date
    def get_end_date(self): return self.end_date
    def set_end_date(self, end_date): self.end_date = end_date
    def get_project_title(self): return self.project_title
    def set_project_title(self, project_title): self.project_title = project_title
    def get_pfos(self): return self.pfos
    def set_pfos(self, pfos): self.pfos = pfos
    def get_sfos_list(self): return self.sfos_list
    def set_sfos_list(self, sfos_list): self.sfos_list = sfos_list
    def get_resource_list(self): return self.resource_list
    def set_resource_list(self, resource_list): self.resource_list = resource_list
    def get_alloc_resource(self): return self.alloc_resource
    def set_alloc_resource(self, alloc_resource): self.alloc_resource = alloc_resource
    def get_grant_num(self): return self.grant_num
    def set_grant_num(self, grant_num): self.grant_num = grant_num
    def get_grant_type(self): return self.grant_type
    def set_grant_type(self, grant_type): self.grant_type = grant_type
    def get_proposal_num(self): return self.proposal_num
    def set_proposal_num(self, proposal_num): self.proposal_num = proposal_num
    def get_abstract(self): return self.abstract
    def set_abstract(self, abstract): self.abstract = abstract
    def get_sector(self): return self.sector
    def set_sector(self, sector): self.sector = sector
    def get_qualifications(self): return self.qualifications
    def set_qualifications(self, qualifications): self.qualifications = qualifications
    def get_methodologies(self): return self.methodologies
    def set_methodologies(self, methodologies): self.methodologies = methodologies
    def get_support(self): return self.support
    def set_support(self, support): self.support = support
    def get_other_resources(self): return self.other_resources
    def set_other_resources(self, other_resources): self.other_resources = other_resources
    def get_statement_work(self): return self.statement_work
    def set_statement_work(self, statement_work): self.statement_work = statement_work
    def get_background(self): return self.background
    def set_background(self, background): self.background = background
    def get_justification(self): return self.justification
    def set_justification(self, justification): self.justification = justification
    def get_deliverables(self): return self.deliverables
    def set_deliverables(self, deliverables): self.deliverables = deliverables
    def get_milestones(self): return self.milestones
    def set_milestones(self, milestones): self.milestones = milestones
    def get_progress(self): return self.progress
    def set_progress(self, progress): self.progress = progress
    def get_facilities(self): return self.facilities
    def set_facilities(self, facilities): self.facilities = facilities
    def get_languages(self): return self.languages
    def set_languages(self, languages): self.languages = languages
    def get_applications(self): return self.applications
    def set_applications(self, applications): self.applications = applications
    def get_diskspace(self): return self.diskspace
    def set_diskspace(self, diskspace): self.diskspace = diskspace
    def get_memory(self): return self.memory
    def set_memory(self, memory): self.memory = memory
    def get_processors(self): return self.processors
    def set_processors(self, processors): self.processors = processors
    def get_nsf_status_code(self): return self.nsf_status_code
    def set_nsf_status_code(self, nsf_status_code): self.nsf_status_code = nsf_status_code
    def get_comment(self): return self.comment
    def set_comment(self, comment): self.comment = comment
    def get_role_list(self): return self.role_list
    def set_role_list(self, role_list): self.role_list = role_list
    def export(self, outfile, level, namespace_='', name_='bodyType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='bodyType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='bodyType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='bodyType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.record_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srecord_id>%s</%srecord_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.record_id).encode(ExternalEncoding), input_name='record_id'), namespace_, eol_))
        if self.project_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sproject_id>%s</%sproject_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.project_id).encode(ExternalEncoding), input_name='project_id'), namespace_, eol_))
        if self.alloc_type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%salloc_type>%s</%salloc_type>%s' % (namespace_, self.gds_format_string(quote_xml(self.alloc_type).encode(ExternalEncoding), input_name='alloc_type'), namespace_, eol_))
        if self.su_alloc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssu_alloc>%s</%ssu_alloc>%s' % (namespace_, self.gds_format_float(self.su_alloc, input_name='su_alloc'), namespace_, eol_))
        if self.pi is not None:
            self.pi.export(outfile, level, namespace_, name_='pi', pretty_print=pretty_print)
        if self.site_person_id_list is not None:
            self.site_person_id_list.export(outfile, level, namespace_, name_='site_person_id_list', pretty_print=pretty_print)
        if self.start_date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstart_date>%s</%sstart_date>%s' % (namespace_, self.gds_format_string(quote_xml(self.start_date).encode(ExternalEncoding), input_name='start_date'), namespace_, eol_))
        if self.end_date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%send_date>%s</%send_date>%s' % (namespace_, self.gds_format_string(quote_xml(self.end_date).encode(ExternalEncoding), input_name='end_date'), namespace_, eol_))
        if self.project_title is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sproject_title>%s</%sproject_title>%s' % (namespace_, self.gds_format_string(quote_xml(self.project_title).encode(ExternalEncoding), input_name='project_title'), namespace_, eol_))
        if self.pfos is not None:
            self.pfos.export(outfile, level, namespace_, name_='pfos', pretty_print=pretty_print)
        if self.sfos_list is not None:
            self.sfos_list.export(outfile, level, namespace_, name_='sfos_list', pretty_print=pretty_print)
        if self.resource_list is not None:
            self.resource_list.export(outfile, level, namespace_, name_='resource_list', pretty_print=pretty_print)
        if self.alloc_resource is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%salloc_resource>%s</%salloc_resource>%s' % (namespace_, self.gds_format_string(quote_xml(self.alloc_resource).encode(ExternalEncoding), input_name='alloc_resource'), namespace_, eol_))
        if self.grant_num is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sgrant_num>%s</%sgrant_num>%s' % (namespace_, self.gds_format_string(quote_xml(self.grant_num).encode(ExternalEncoding), input_name='grant_num'), namespace_, eol_))
        if self.grant_type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sgrant_type>%s</%sgrant_type>%s' % (namespace_, self.gds_format_string(quote_xml(self.grant_type).encode(ExternalEncoding), input_name='grant_type'), namespace_, eol_))
        if self.proposal_num is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sproposal_num>%s</%sproposal_num>%s' % (namespace_, self.gds_format_string(quote_xml(self.proposal_num).encode(ExternalEncoding), input_name='proposal_num'), namespace_, eol_))
        if self.abstract is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sabstract>%s</%sabstract>%s' % (namespace_, self.gds_format_string(quote_xml(self.abstract).encode(ExternalEncoding), input_name='abstract'), namespace_, eol_))
        if self.sector is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssector>%s</%ssector>%s' % (namespace_, self.gds_format_string(quote_xml(self.sector).encode(ExternalEncoding), input_name='sector'), namespace_, eol_))
        if self.qualifications is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%squalifications>%s</%squalifications>%s' % (namespace_, self.gds_format_string(quote_xml(self.qualifications).encode(ExternalEncoding), input_name='qualifications'), namespace_, eol_))
        if self.methodologies is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smethodologies>%s</%smethodologies>%s' % (namespace_, self.gds_format_string(quote_xml(self.methodologies).encode(ExternalEncoding), input_name='methodologies'), namespace_, eol_))
        if self.support is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssupport>%s</%ssupport>%s' % (namespace_, self.gds_format_string(quote_xml(self.support).encode(ExternalEncoding), input_name='support'), namespace_, eol_))
        if self.other_resources is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sother_resources>%s</%sother_resources>%s' % (namespace_, self.gds_format_string(quote_xml(self.other_resources).encode(ExternalEncoding), input_name='other_resources'), namespace_, eol_))
        if self.statement_work is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstatement_work>%s</%sstatement_work>%s' % (namespace_, self.gds_format_string(quote_xml(self.statement_work).encode(ExternalEncoding), input_name='statement_work'), namespace_, eol_))
        if self.background is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sbackground>%s</%sbackground>%s' % (namespace_, self.gds_format_string(quote_xml(self.background).encode(ExternalEncoding), input_name='background'), namespace_, eol_))
        if self.justification is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sjustification>%s</%sjustification>%s' % (namespace_, self.gds_format_string(quote_xml(self.justification).encode(ExternalEncoding), input_name='justification'), namespace_, eol_))
        if self.deliverables is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdeliverables>%s</%sdeliverables>%s' % (namespace_, self.gds_format_string(quote_xml(self.deliverables).encode(ExternalEncoding), input_name='deliverables'), namespace_, eol_))
        if self.milestones is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smilestones>%s</%smilestones>%s' % (namespace_, self.gds_format_string(quote_xml(self.milestones).encode(ExternalEncoding), input_name='milestones'), namespace_, eol_))
        if self.progress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sprogress>%s</%sprogress>%s' % (namespace_, self.gds_format_string(quote_xml(self.progress).encode(ExternalEncoding), input_name='progress'), namespace_, eol_))
        if self.facilities is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfacilities>%s</%sfacilities>%s' % (namespace_, self.gds_format_string(quote_xml(self.facilities).encode(ExternalEncoding), input_name='facilities'), namespace_, eol_))
        if self.languages is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slanguages>%s</%slanguages>%s' % (namespace_, self.gds_format_string(quote_xml(self.languages).encode(ExternalEncoding), input_name='languages'), namespace_, eol_))
        if self.applications is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sapplications>%s</%sapplications>%s' % (namespace_, self.gds_format_string(quote_xml(self.applications).encode(ExternalEncoding), input_name='applications'), namespace_, eol_))
        if self.diskspace is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdiskspace>%s</%sdiskspace>%s' % (namespace_, self.gds_format_string(quote_xml(self.diskspace).encode(ExternalEncoding), input_name='diskspace'), namespace_, eol_))
        if self.memory is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smemory>%s</%smemory>%s' % (namespace_, self.gds_format_string(quote_xml(self.memory).encode(ExternalEncoding), input_name='memory'), namespace_, eol_))
        if self.processors is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sprocessors>%s</%sprocessors>%s' % (namespace_, self.gds_format_string(quote_xml(self.processors).encode(ExternalEncoding), input_name='processors'), namespace_, eol_))
        if self.nsf_status_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snsf_status_code>%s</%snsf_status_code>%s' % (namespace_, self.gds_format_string(quote_xml(self.nsf_status_code).encode(ExternalEncoding), input_name='nsf_status_code'), namespace_, eol_))
        if self.comment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scomment>%s</%scomment>%s' % (namespace_, self.gds_format_string(quote_xml(self.comment).encode(ExternalEncoding), input_name='comment'), namespace_, eol_))
        if self.role_list is not None:
            self.role_list.export(outfile, level, namespace_, name_='role_list', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.record_id is not None or
            self.project_id is not None or
            self.alloc_type is not None or
            self.su_alloc is not None or
            self.pi is not None or
            self.site_person_id_list is not None or
            self.start_date is not None or
            self.end_date is not None or
            self.project_title is not None or
            self.pfos is not None or
            self.sfos_list is not None or
            self.resource_list is not None or
            self.alloc_resource is not None or
            self.grant_num is not None or
            self.grant_type is not None or
            self.proposal_num is not None or
            self.abstract is not None or
            self.sector is not None or
            self.qualifications is not None or
            self.methodologies is not None or
            self.support is not None or
            self.other_resources is not None or
            self.statement_work is not None or
            self.background is not None or
            self.justification is not None or
            self.deliverables is not None or
            self.milestones is not None or
            self.progress is not None or
            self.facilities is not None or
            self.languages is not None or
            self.applications is not None or
            self.diskspace is not None or
            self.memory is not None or
            self.processors is not None or
            self.nsf_status_code is not None or
            self.comment is not None or
            self.role_list is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='bodyType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.record_id is not None:
            showIndent(outfile, level)
            outfile.write('record_id=%s,\n' % quote_python(self.record_id).encode(ExternalEncoding))
        if self.project_id is not None:
            showIndent(outfile, level)
            outfile.write('project_id=%s,\n' % quote_python(self.project_id).encode(ExternalEncoding))
        if self.alloc_type is not None:
            showIndent(outfile, level)
            outfile.write('alloc_type=%s,\n' % quote_python(self.alloc_type).encode(ExternalEncoding))
        if self.su_alloc is not None:
            showIndent(outfile, level)
            outfile.write('su_alloc=%f,\n' % self.su_alloc)
        if self.pi is not None:
            showIndent(outfile, level)
            outfile.write('pi=model_.piType(\n')
            self.pi.exportLiteral(outfile, level, name_='pi')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.site_person_id_list is not None:
            showIndent(outfile, level)
            outfile.write('site_person_id_list=model_.site_person_id_list(\n')
            self.site_person_id_list.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.start_date is not None:
            showIndent(outfile, level)
            outfile.write('start_date=%s,\n' % quote_python(self.start_date).encode(ExternalEncoding))
        if self.end_date is not None:
            showIndent(outfile, level)
            outfile.write('end_date=%s,\n' % quote_python(self.end_date).encode(ExternalEncoding))
        if self.project_title is not None:
            showIndent(outfile, level)
            outfile.write('project_title=%s,\n' % quote_python(self.project_title).encode(ExternalEncoding))
        if self.pfos is not None:
            showIndent(outfile, level)
            outfile.write('pfos=model_.field_of_science_type(\n')
            self.pfos.exportLiteral(outfile, level, name_='pfos')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.sfos_list is not None:
            showIndent(outfile, level)
            outfile.write('sfos_list=model_.sfos_listType(\n')
            self.sfos_list.exportLiteral(outfile, level, name_='sfos_list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.resource_list is not None:
            showIndent(outfile, level)
            outfile.write('resource_list=model_.resource_listType(\n')
            self.resource_list.exportLiteral(outfile, level, name_='resource_list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.alloc_resource is not None:
            showIndent(outfile, level)
            outfile.write('alloc_resource=%s,\n' % quote_python(self.alloc_resource).encode(ExternalEncoding))
        if self.grant_num is not None:
            showIndent(outfile, level)
            outfile.write('grant_num=%s,\n' % quote_python(self.grant_num).encode(ExternalEncoding))
        if self.grant_type is not None:
            showIndent(outfile, level)
            outfile.write('grant_type=%s,\n' % quote_python(self.grant_type).encode(ExternalEncoding))
        if self.proposal_num is not None:
            showIndent(outfile, level)
            outfile.write('proposal_num=%s,\n' % quote_python(self.proposal_num).encode(ExternalEncoding))
        if self.abstract is not None:
            showIndent(outfile, level)
            outfile.write('abstract=%s,\n' % quote_python(self.abstract).encode(ExternalEncoding))
        if self.sector is not None:
            showIndent(outfile, level)
            outfile.write('sector=%s,\n' % quote_python(self.sector).encode(ExternalEncoding))
        if self.qualifications is not None:
            showIndent(outfile, level)
            outfile.write('qualifications=%s,\n' % quote_python(self.qualifications).encode(ExternalEncoding))
        if self.methodologies is not None:
            showIndent(outfile, level)
            outfile.write('methodologies=%s,\n' % quote_python(self.methodologies).encode(ExternalEncoding))
        if self.support is not None:
            showIndent(outfile, level)
            outfile.write('support=%s,\n' % quote_python(self.support).encode(ExternalEncoding))
        if self.other_resources is not None:
            showIndent(outfile, level)
            outfile.write('other_resources=%s,\n' % quote_python(self.other_resources).encode(ExternalEncoding))
        if self.statement_work is not None:
            showIndent(outfile, level)
            outfile.write('statement_work=%s,\n' % quote_python(self.statement_work).encode(ExternalEncoding))
        if self.background is not None:
            showIndent(outfile, level)
            outfile.write('background=%s,\n' % quote_python(self.background).encode(ExternalEncoding))
        if self.justification is not None:
            showIndent(outfile, level)
            outfile.write('justification=%s,\n' % quote_python(self.justification).encode(ExternalEncoding))
        if self.deliverables is not None:
            showIndent(outfile, level)
            outfile.write('deliverables=%s,\n' % quote_python(self.deliverables).encode(ExternalEncoding))
        if self.milestones is not None:
            showIndent(outfile, level)
            outfile.write('milestones=%s,\n' % quote_python(self.milestones).encode(ExternalEncoding))
        if self.progress is not None:
            showIndent(outfile, level)
            outfile.write('progress=%s,\n' % quote_python(self.progress).encode(ExternalEncoding))
        if self.facilities is not None:
            showIndent(outfile, level)
            outfile.write('facilities=%s,\n' % quote_python(self.facilities).encode(ExternalEncoding))
        if self.languages is not None:
            showIndent(outfile, level)
            outfile.write('languages=%s,\n' % quote_python(self.languages).encode(ExternalEncoding))
        if self.applications is not None:
            showIndent(outfile, level)
            outfile.write('applications=%s,\n' % quote_python(self.applications).encode(ExternalEncoding))
        if self.diskspace is not None:
            showIndent(outfile, level)
            outfile.write('diskspace=%s,\n' % quote_python(self.diskspace).encode(ExternalEncoding))
        if self.memory is not None:
            showIndent(outfile, level)
            outfile.write('memory=%s,\n' % quote_python(self.memory).encode(ExternalEncoding))
        if self.processors is not None:
            showIndent(outfile, level)
            outfile.write('processors=%s,\n' % quote_python(self.processors).encode(ExternalEncoding))
        if self.nsf_status_code is not None:
            showIndent(outfile, level)
            outfile.write('nsf_status_code=%s,\n' % quote_python(self.nsf_status_code).encode(ExternalEncoding))
        if self.comment is not None:
            showIndent(outfile, level)
            outfile.write('comment=%s,\n' % quote_python(self.comment).encode(ExternalEncoding))
        if self.role_list is not None:
            showIndent(outfile, level)
            outfile.write('role_list=model_.role_listType(\n')
            self.role_list.exportLiteral(outfile, level, name_='role_list')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'record_id':
            record_id_ = child_.text
            record_id_ = self.gds_validate_string(record_id_, node, 'record_id')
            self.record_id = record_id_
        elif nodeName_ == 'project_id':
            project_id_ = child_.text
            project_id_ = self.gds_validate_string(project_id_, node, 'project_id')
            self.project_id = project_id_
        elif nodeName_ == 'alloc_type':
            alloc_type_ = child_.text
            alloc_type_ = self.gds_validate_string(alloc_type_, node, 'alloc_type')
            self.alloc_type = alloc_type_
        elif nodeName_ == 'su_alloc':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'su_alloc')
            self.su_alloc = fval_
        elif nodeName_ == 'pi':
            obj_ = piType.factory()
            obj_.build(child_)
            self.set_pi(obj_)
        elif nodeName_ == 'site_person_id_list':
            obj_ = site_person_id_list.factory()
            obj_.build(child_)
            self.set_site_person_id_list(obj_)
        elif nodeName_ == 'start_date':
            start_date_ = child_.text
            start_date_ = self.gds_validate_string(start_date_, node, 'start_date')
            self.start_date = start_date_
        elif nodeName_ == 'end_date':
            end_date_ = child_.text
            end_date_ = self.gds_validate_string(end_date_, node, 'end_date')
            self.end_date = end_date_
        elif nodeName_ == 'project_title':
            project_title_ = child_.text
            project_title_ = self.gds_validate_string(project_title_, node, 'project_title')
            self.project_title = project_title_
        elif nodeName_ == 'pfos':
            obj_ = field_of_science_type.factory()
            obj_.build(child_)
            self.set_pfos(obj_)
        elif nodeName_ == 'sfos_list':
            obj_ = sfos_listType.factory()
            obj_.build(child_)
            self.set_sfos_list(obj_)
        elif nodeName_ == 'resource_list':
            obj_ = resource_listType.factory()
            obj_.build(child_)
            self.set_resource_list(obj_)
        elif nodeName_ == 'alloc_resource':
            alloc_resource_ = child_.text
            alloc_resource_ = self.gds_validate_string(alloc_resource_, node, 'alloc_resource')
            self.alloc_resource = alloc_resource_
        elif nodeName_ == 'grant_num':
            grant_num_ = child_.text
            grant_num_ = self.gds_validate_string(grant_num_, node, 'grant_num')
            self.grant_num = grant_num_
        elif nodeName_ == 'grant_type':
            grant_type_ = child_.text
            grant_type_ = self.gds_validate_string(grant_type_, node, 'grant_type')
            self.grant_type = grant_type_
        elif nodeName_ == 'proposal_num':
            proposal_num_ = child_.text
            proposal_num_ = self.gds_validate_string(proposal_num_, node, 'proposal_num')
            self.proposal_num = proposal_num_
        elif nodeName_ == 'abstract':
            abstract_ = child_.text
            abstract_ = self.gds_validate_string(abstract_, node, 'abstract')
            self.abstract = abstract_
        elif nodeName_ == 'sector':
            sector_ = child_.text
            sector_ = self.gds_validate_string(sector_, node, 'sector')
            self.sector = sector_
        elif nodeName_ == 'qualifications':
            qualifications_ = child_.text
            qualifications_ = self.gds_validate_string(qualifications_, node, 'qualifications')
            self.qualifications = qualifications_
        elif nodeName_ == 'methodologies':
            methodologies_ = child_.text
            methodologies_ = self.gds_validate_string(methodologies_, node, 'methodologies')
            self.methodologies = methodologies_
        elif nodeName_ == 'support':
            support_ = child_.text
            support_ = self.gds_validate_string(support_, node, 'support')
            self.support = support_
        elif nodeName_ == 'other_resources':
            other_resources_ = child_.text
            other_resources_ = self.gds_validate_string(other_resources_, node, 'other_resources')
            self.other_resources = other_resources_
        elif nodeName_ == 'statement_work':
            statement_work_ = child_.text
            statement_work_ = self.gds_validate_string(statement_work_, node, 'statement_work')
            self.statement_work = statement_work_
        elif nodeName_ == 'background':
            background_ = child_.text
            background_ = self.gds_validate_string(background_, node, 'background')
            self.background = background_
        elif nodeName_ == 'justification':
            justification_ = child_.text
            justification_ = self.gds_validate_string(justification_, node, 'justification')
            self.justification = justification_
        elif nodeName_ == 'deliverables':
            deliverables_ = child_.text
            deliverables_ = self.gds_validate_string(deliverables_, node, 'deliverables')
            self.deliverables = deliverables_
        elif nodeName_ == 'milestones':
            milestones_ = child_.text
            milestones_ = self.gds_validate_string(milestones_, node, 'milestones')
            self.milestones = milestones_
        elif nodeName_ == 'progress':
            progress_ = child_.text
            progress_ = self.gds_validate_string(progress_, node, 'progress')
            self.progress = progress_
        elif nodeName_ == 'facilities':
            facilities_ = child_.text
            facilities_ = self.gds_validate_string(facilities_, node, 'facilities')
            self.facilities = facilities_
        elif nodeName_ == 'languages':
            languages_ = child_.text
            languages_ = self.gds_validate_string(languages_, node, 'languages')
            self.languages = languages_
        elif nodeName_ == 'applications':
            applications_ = child_.text
            applications_ = self.gds_validate_string(applications_, node, 'applications')
            self.applications = applications_
        elif nodeName_ == 'diskspace':
            diskspace_ = child_.text
            diskspace_ = self.gds_validate_string(diskspace_, node, 'diskspace')
            self.diskspace = diskspace_
        elif nodeName_ == 'memory':
            memory_ = child_.text
            memory_ = self.gds_validate_string(memory_, node, 'memory')
            self.memory = memory_
        elif nodeName_ == 'processors':
            processors_ = child_.text
            processors_ = self.gds_validate_string(processors_, node, 'processors')
            self.processors = processors_
        elif nodeName_ == 'nsf_status_code':
            nsf_status_code_ = child_.text
            nsf_status_code_ = self.gds_validate_string(nsf_status_code_, node, 'nsf_status_code')
            self.nsf_status_code = nsf_status_code_
        elif nodeName_ == 'comment':
            comment_ = child_.text
            comment_ = self.gds_validate_string(comment_, node, 'comment')
            self.comment = comment_
        elif nodeName_ == 'role_list':
            obj_ = role_listType.factory()
            obj_.build(child_)
            self.set_role_list(obj_)
# end class bodyType


class piType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, personal_info=None, dn_list=None, remote_site_id=None, remote_site_login=None, requester_login=None, req_login_list=None):
        self.personal_info = personal_info
        self.dn_list = dn_list
        self.remote_site_id = remote_site_id
        self.remote_site_login = remote_site_login
        self.requester_login = requester_login
        self.req_login_list = req_login_list
    def factory(*args_, **kwargs_):
        if piType.subclass:
            return piType.subclass(*args_, **kwargs_)
        else:
            return piType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_personal_info(self): return self.personal_info
    def set_personal_info(self, personal_info): self.personal_info = personal_info
    def get_dn_list(self): return self.dn_list
    def set_dn_list(self, dn_list): self.dn_list = dn_list
    def get_remote_site_id(self): return self.remote_site_id
    def set_remote_site_id(self, remote_site_id): self.remote_site_id = remote_site_id
    def get_remote_site_login(self): return self.remote_site_login
    def set_remote_site_login(self, remote_site_login): self.remote_site_login = remote_site_login
    def get_requester_login(self): return self.requester_login
    def set_requester_login(self, requester_login): self.requester_login = requester_login
    def get_req_login_list(self): return self.req_login_list
    def set_req_login_list(self, req_login_list): self.req_login_list = req_login_list
    def export(self, outfile, level, namespace_='', name_='piType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='piType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='piType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='piType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.personal_info is not None:
            self.personal_info.export(outfile, level, namespace_, name_='personal_info', pretty_print=pretty_print)
        if self.dn_list is not None:
            self.dn_list.export(outfile, level, namespace_, name_='dn_list', pretty_print=pretty_print)
        if self.remote_site_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sremote_site_id>%s</%sremote_site_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.remote_site_id).encode(ExternalEncoding), input_name='remote_site_id'), namespace_, eol_))
        if self.remote_site_login is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sremote_site_login>%s</%sremote_site_login>%s' % (namespace_, self.gds_format_string(quote_xml(self.remote_site_login).encode(ExternalEncoding), input_name='remote_site_login'), namespace_, eol_))
        if self.requester_login is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srequester_login>%s</%srequester_login>%s' % (namespace_, self.gds_format_string(quote_xml(self.requester_login).encode(ExternalEncoding), input_name='requester_login'), namespace_, eol_))
        if self.req_login_list is not None:
            self.req_login_list.export(outfile, level, namespace_, name_='req_login_list', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.personal_info is not None or
            self.dn_list is not None or
            self.remote_site_id is not None or
            self.remote_site_login is not None or
            self.requester_login is not None or
            self.req_login_list is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='piType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.personal_info is not None:
            showIndent(outfile, level)
            outfile.write('personal_info=model_.person_type(\n')
            self.personal_info.exportLiteral(outfile, level, name_='personal_info')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dn_list is not None:
            showIndent(outfile, level)
            outfile.write('dn_list=model_.dn_listType(\n')
            self.dn_list.exportLiteral(outfile, level, name_='dn_list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.remote_site_id is not None:
            showIndent(outfile, level)
            outfile.write('remote_site_id=%s,\n' % quote_python(self.remote_site_id).encode(ExternalEncoding))
        if self.remote_site_login is not None:
            showIndent(outfile, level)
            outfile.write('remote_site_login=%s,\n' % quote_python(self.remote_site_login).encode(ExternalEncoding))
        if self.requester_login is not None:
            showIndent(outfile, level)
            outfile.write('requester_login=%s,\n' % quote_python(self.requester_login).encode(ExternalEncoding))
        if self.req_login_list is not None:
            showIndent(outfile, level)
            outfile.write('req_login_list=model_.req_login_listType(\n')
            self.req_login_list.exportLiteral(outfile, level, name_='req_login_list')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'personal_info':
            obj_ = person_type.factory()
            obj_.build(child_)
            self.set_personal_info(obj_)
        elif nodeName_ == 'dn_list':
            obj_ = dn_listType.factory()
            obj_.build(child_)
            self.set_dn_list(obj_)
        elif nodeName_ == 'remote_site_id':
            remote_site_id_ = child_.text
            remote_site_id_ = self.gds_validate_string(remote_site_id_, node, 'remote_site_id')
            self.remote_site_id = remote_site_id_
        elif nodeName_ == 'remote_site_login':
            remote_site_login_ = child_.text
            remote_site_login_ = self.gds_validate_string(remote_site_login_, node, 'remote_site_login')
            self.remote_site_login = remote_site_login_
        elif nodeName_ == 'requester_login':
            requester_login_ = child_.text
            requester_login_ = self.gds_validate_string(requester_login_, node, 'requester_login')
            self.requester_login = requester_login_
        elif nodeName_ == 'req_login_list':
            obj_ = req_login_listType.factory()
            obj_.build(child_)
            self.set_req_login_list(obj_)
# end class piType


class dn_listType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dn=None):
        if dn is None:
            self.dn = []
        else:
            self.dn = dn
    def factory(*args_, **kwargs_):
        if dn_listType.subclass:
            return dn_listType.subclass(*args_, **kwargs_)
        else:
            return dn_listType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dn(self): return self.dn
    def set_dn(self, dn): self.dn = dn
    def add_dn(self, value): self.dn.append(value)
    def insert_dn(self, index, value): self.dn[index] = value
    def export(self, outfile, level, namespace_='', name_='dn_listType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dn_listType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='dn_listType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='dn_listType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for dn_ in self.dn:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdn>%s</%sdn>%s' % (namespace_, self.gds_format_string(quote_xml(dn_).encode(ExternalEncoding), input_name='dn'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.dn
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='dn_listType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('dn=[\n')
        level += 1
        for dn_ in self.dn:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(dn_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dn':
            dn_ = child_.text
            dn_ = self.gds_validate_string(dn_, node, 'dn')
            self.dn.append(dn_)
# end class dn_listType


class req_login_listType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, req_login=None):
        if req_login is None:
            self.req_login = []
        else:
            self.req_login = req_login
    def factory(*args_, **kwargs_):
        if req_login_listType.subclass:
            return req_login_listType.subclass(*args_, **kwargs_)
        else:
            return req_login_listType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_req_login(self): return self.req_login
    def set_req_login(self, req_login): self.req_login = req_login
    def add_req_login(self, value): self.req_login.append(value)
    def insert_req_login(self, index, value): self.req_login[index] = value
    def export(self, outfile, level, namespace_='', name_='req_login_listType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='req_login_listType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='req_login_listType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='req_login_listType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for req_login_ in self.req_login:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreq_login>%s</%sreq_login>%s' % (namespace_, self.gds_format_string(quote_xml(req_login_).encode(ExternalEncoding), input_name='req_login'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.req_login
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='req_login_listType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('req_login=[\n')
        level += 1
        for req_login_ in self.req_login:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(req_login_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'req_login':
            req_login_ = child_.text
            req_login_ = self.gds_validate_string(req_login_, node, 'req_login')
            self.req_login.append(req_login_)
# end class req_login_listType


class sfos_listType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, sfos=None):
        if sfos is None:
            self.sfos = []
        else:
            self.sfos = sfos
    def factory(*args_, **kwargs_):
        if sfos_listType.subclass:
            return sfos_listType.subclass(*args_, **kwargs_)
        else:
            return sfos_listType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_sfos(self): return self.sfos
    def set_sfos(self, sfos): self.sfos = sfos
    def add_sfos(self, value): self.sfos.append(value)
    def insert_sfos(self, index, value): self.sfos[index] = value
    def export(self, outfile, level, namespace_='', name_='sfos_listType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='sfos_listType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='sfos_listType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='sfos_listType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for sfos_ in self.sfos:
            sfos_.export(outfile, level, namespace_, name_='sfos', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.sfos
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='sfos_listType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('sfos=[\n')
        level += 1
        for sfos_ in self.sfos:
            showIndent(outfile, level)
            outfile.write('model_.field_of_science_type(\n')
            sfos_.exportLiteral(outfile, level, name_='field_of_science_type')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'sfos':
            obj_ = field_of_science_type.factory()
            obj_.build(child_)
            self.sfos.append(obj_)
# end class sfos_listType


class resource_listType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, resource=None):
        if resource is None:
            self.resource = []
        else:
            self.resource = resource
    def factory(*args_, **kwargs_):
        if resource_listType.subclass:
            return resource_listType.subclass(*args_, **kwargs_)
        else:
            return resource_listType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_resource(self): return self.resource
    def set_resource(self, resource): self.resource = resource
    def add_resource(self, value): self.resource.append(value)
    def insert_resource(self, index, value): self.resource[index] = value
    def export(self, outfile, level, namespace_='', name_='resource_listType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='resource_listType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='resource_listType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='resource_listType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for resource_ in self.resource:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sresource>%s</%sresource>%s' % (namespace_, self.gds_format_string(quote_xml(resource_).encode(ExternalEncoding), input_name='resource'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.resource
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='resource_listType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('resource=[\n')
        level += 1
        for resource_ in self.resource:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(resource_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'resource':
            resource_ = child_.text
            resource_ = self.gds_validate_string(resource_, node, 'resource')
            self.resource.append(resource_)
# end class resource_listType


class role_listType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, role=None):
        if role is None:
            self.role = []
        else:
            self.role = role
    def factory(*args_, **kwargs_):
        if role_listType.subclass:
            return role_listType.subclass(*args_, **kwargs_)
        else:
            return role_listType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_role(self): return self.role
    def set_role(self, role): self.role = role
    def add_role(self, value): self.role.append(value)
    def insert_role(self, index, value): self.role[index] = value
    def export(self, outfile, level, namespace_='', name_='role_listType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='role_listType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='role_listType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='role_listType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for role_ in self.role:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srole>%s</%srole>%s' % (namespace_, self.gds_format_string(quote_xml(role_).encode(ExternalEncoding), input_name='role'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.role
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='role_listType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('role=[\n')
        level += 1
        for role_ in self.role:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(role_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'role':
            role_ = child_.text
            role_ = self.gds_validate_string(role_, node, 'role')
            self.role.append(role_)
# end class role_listType


class notify_project_createType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, header=None, body=None):
        self.header = header
        self.body = body
    def factory(*args_, **kwargs_):
        if notify_project_createType.subclass:
            return notify_project_createType.subclass(*args_, **kwargs_)
        else:
            return notify_project_createType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_header(self): return self.header
    def set_header(self, header): self.header = header
    def get_body(self): return self.body
    def set_body(self, body): self.body = body
    def export(self, outfile, level, namespace_='', name_='notify_project_createType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='notify_project_createType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='notify_project_createType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='notify_project_createType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.header is not None:
            self.header.export(outfile, level, namespace_, name_='header', pretty_print=pretty_print)
        if self.body is not None:
            self.body.export(outfile, level, namespace_, name_='body', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.header is not None or
            self.body is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='notify_project_createType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.header is not None:
            showIndent(outfile, level)
            outfile.write('header=model_.header_type(\n')
            self.header.exportLiteral(outfile, level, name_='header')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.body is not None:
            showIndent(outfile, level)
            outfile.write('body=model_.bodyType1(\n')
            self.body.exportLiteral(outfile, level, name_='body')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'header':
            obj_ = header_type.factory()
            obj_.build(child_)
            self.set_header(obj_)
        elif nodeName_ == 'body':
            obj_ = bodyType1.factory()
            obj_.build(child_)
            self.set_body(obj_)
# end class notify_project_createType


class bodyType1(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, record_id=None, project_id=None, project_gid=None, alloc_type=None, su_alloc=None, pi=None, start_date=None, end_date=None, project_title=None, pfos=None, sfos_list=None, resource_list=None, resource_login_list=None, grant_num=None, grant_type=None, proposal_num=None, abstract=None, sector=None, qualifications=None, methodologies=None, support=None, other_resources=None, statement_work=None, background=None, justification=None, deliverables=None, milestones=None, progress=None, facilities=None, languages=None, applications=None, diskspace=None, memory=None, processors=None, nsf_status_code=None, comment=None, account_activity_time=None, board_type=None, role_list=None):
        self.record_id = record_id
        self.project_id = project_id
        self.project_gid = project_gid
        self.alloc_type = alloc_type
        self.su_alloc = su_alloc
        self.pi = pi
        self.start_date = start_date
        self.end_date = end_date
        self.project_title = project_title
        self.pfos = pfos
        self.sfos_list = sfos_list
        self.resource_list = resource_list
        self.resource_login_list = resource_login_list
        self.grant_num = grant_num
        self.grant_type = grant_type
        self.proposal_num = proposal_num
        self.abstract = abstract
        self.sector = sector
        self.qualifications = qualifications
        self.methodologies = methodologies
        self.support = support
        self.other_resources = other_resources
        self.statement_work = statement_work
        self.background = background
        self.justification = justification
        self.deliverables = deliverables
        self.milestones = milestones
        self.progress = progress
        self.facilities = facilities
        self.languages = languages
        self.applications = applications
        self.diskspace = diskspace
        self.memory = memory
        self.processors = processors
        self.nsf_status_code = nsf_status_code
        self.comment = comment
        self.account_activity_time = account_activity_time
        self.board_type = board_type
        self.role_list = role_list
    def factory(*args_, **kwargs_):
        if bodyType1.subclass:
            return bodyType1.subclass(*args_, **kwargs_)
        else:
            return bodyType1(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_record_id(self): return self.record_id
    def set_record_id(self, record_id): self.record_id = record_id
    def get_project_id(self): return self.project_id
    def set_project_id(self, project_id): self.project_id = project_id
    def get_project_gid(self): return self.project_gid
    def set_project_gid(self, project_gid): self.project_gid = project_gid
    def get_alloc_type(self): return self.alloc_type
    def set_alloc_type(self, alloc_type): self.alloc_type = alloc_type
    def get_su_alloc(self): return self.su_alloc
    def set_su_alloc(self, su_alloc): self.su_alloc = su_alloc
    def get_pi(self): return self.pi
    def set_pi(self, pi): self.pi = pi
    def get_start_date(self): return self.start_date
    def set_start_date(self, start_date): self.start_date = start_date
    def get_end_date(self): return self.end_date
    def set_end_date(self, end_date): self.end_date = end_date
    def get_project_title(self): return self.project_title
    def set_project_title(self, project_title): self.project_title = project_title
    def get_pfos(self): return self.pfos
    def set_pfos(self, pfos): self.pfos = pfos
    def get_sfos_list(self): return self.sfos_list
    def set_sfos_list(self, sfos_list): self.sfos_list = sfos_list
    def get_resource_list(self): return self.resource_list
    def set_resource_list(self, resource_list): self.resource_list = resource_list
    def get_resource_login_list(self): return self.resource_login_list
    def set_resource_login_list(self, resource_login_list): self.resource_login_list = resource_login_list
    def get_grant_num(self): return self.grant_num
    def set_grant_num(self, grant_num): self.grant_num = grant_num
    def get_grant_type(self): return self.grant_type
    def set_grant_type(self, grant_type): self.grant_type = grant_type
    def get_proposal_num(self): return self.proposal_num
    def set_proposal_num(self, proposal_num): self.proposal_num = proposal_num
    def get_abstract(self): return self.abstract
    def set_abstract(self, abstract): self.abstract = abstract
    def get_sector(self): return self.sector
    def set_sector(self, sector): self.sector = sector
    def get_qualifications(self): return self.qualifications
    def set_qualifications(self, qualifications): self.qualifications = qualifications
    def get_methodologies(self): return self.methodologies
    def set_methodologies(self, methodologies): self.methodologies = methodologies
    def get_support(self): return self.support
    def set_support(self, support): self.support = support
    def get_other_resources(self): return self.other_resources
    def set_other_resources(self, other_resources): self.other_resources = other_resources
    def get_statement_work(self): return self.statement_work
    def set_statement_work(self, statement_work): self.statement_work = statement_work
    def get_background(self): return self.background
    def set_background(self, background): self.background = background
    def get_justification(self): return self.justification
    def set_justification(self, justification): self.justification = justification
    def get_deliverables(self): return self.deliverables
    def set_deliverables(self, deliverables): self.deliverables = deliverables
    def get_milestones(self): return self.milestones
    def set_milestones(self, milestones): self.milestones = milestones
    def get_progress(self): return self.progress
    def set_progress(self, progress): self.progress = progress
    def get_facilities(self): return self.facilities
    def set_facilities(self, facilities): self.facilities = facilities
    def get_languages(self): return self.languages
    def set_languages(self, languages): self.languages = languages
    def get_applications(self): return self.applications
    def set_applications(self, applications): self.applications = applications
    def get_diskspace(self): return self.diskspace
    def set_diskspace(self, diskspace): self.diskspace = diskspace
    def get_memory(self): return self.memory
    def set_memory(self, memory): self.memory = memory
    def get_processors(self): return self.processors
    def set_processors(self, processors): self.processors = processors
    def get_nsf_status_code(self): return self.nsf_status_code
    def set_nsf_status_code(self, nsf_status_code): self.nsf_status_code = nsf_status_code
    def get_comment(self): return self.comment
    def set_comment(self, comment): self.comment = comment
    def get_account_activity_time(self): return self.account_activity_time
    def set_account_activity_time(self, account_activity_time): self.account_activity_time = account_activity_time
    def get_board_type(self): return self.board_type
    def set_board_type(self, board_type): self.board_type = board_type
    def get_role_list(self): return self.role_list
    def set_role_list(self, role_list): self.role_list = role_list
    def export(self, outfile, level, namespace_='', name_='bodyType1', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='bodyType1')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='bodyType1'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='bodyType1', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.record_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srecord_id>%s</%srecord_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.record_id).encode(ExternalEncoding), input_name='record_id'), namespace_, eol_))
        if self.project_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sproject_id>%s</%sproject_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.project_id).encode(ExternalEncoding), input_name='project_id'), namespace_, eol_))
        if self.project_gid is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sproject_gid>%s</%sproject_gid>%s' % (namespace_, self.gds_format_integer(self.project_gid, input_name='project_gid'), namespace_, eol_))
        if self.alloc_type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%salloc_type>%s</%salloc_type>%s' % (namespace_, self.gds_format_string(quote_xml(self.alloc_type).encode(ExternalEncoding), input_name='alloc_type'), namespace_, eol_))
        if self.su_alloc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssu_alloc>%s</%ssu_alloc>%s' % (namespace_, self.gds_format_float(self.su_alloc, input_name='su_alloc'), namespace_, eol_))
        if self.pi is not None:
            self.pi.export(outfile, level, namespace_, name_='pi', pretty_print=pretty_print)
        if self.start_date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstart_date>%s</%sstart_date>%s' % (namespace_, self.gds_format_string(quote_xml(self.start_date).encode(ExternalEncoding), input_name='start_date'), namespace_, eol_))
        if self.end_date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%send_date>%s</%send_date>%s' % (namespace_, self.gds_format_string(quote_xml(self.end_date).encode(ExternalEncoding), input_name='end_date'), namespace_, eol_))
        if self.project_title is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sproject_title>%s</%sproject_title>%s' % (namespace_, self.gds_format_string(quote_xml(self.project_title).encode(ExternalEncoding), input_name='project_title'), namespace_, eol_))
        if self.pfos is not None:
            self.pfos.export(outfile, level, namespace_, name_='pfos', pretty_print=pretty_print)
        if self.sfos_list is not None:
            self.sfos_list.export(outfile, level, namespace_, name_='sfos_list', pretty_print=pretty_print)
        if self.resource_list is not None:
            self.resource_list.export(outfile, level, namespace_, name_='resource_list', pretty_print=pretty_print)
        if self.resource_login_list is not None:
            self.resource_login_list.export(outfile, level, namespace_, name_='resource_login_list', pretty_print=pretty_print)
        if self.grant_num is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sgrant_num>%s</%sgrant_num>%s' % (namespace_, self.gds_format_string(quote_xml(self.grant_num).encode(ExternalEncoding), input_name='grant_num'), namespace_, eol_))
        if self.grant_type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sgrant_type>%s</%sgrant_type>%s' % (namespace_, self.gds_format_string(quote_xml(self.grant_type).encode(ExternalEncoding), input_name='grant_type'), namespace_, eol_))
        if self.proposal_num is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sproposal_num>%s</%sproposal_num>%s' % (namespace_, self.gds_format_string(quote_xml(self.proposal_num).encode(ExternalEncoding), input_name='proposal_num'), namespace_, eol_))
        if self.abstract is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sabstract>%s</%sabstract>%s' % (namespace_, self.gds_format_string(quote_xml(self.abstract).encode(ExternalEncoding), input_name='abstract'), namespace_, eol_))
        if self.sector is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssector>%s</%ssector>%s' % (namespace_, self.gds_format_string(quote_xml(self.sector).encode(ExternalEncoding), input_name='sector'), namespace_, eol_))
        if self.qualifications is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%squalifications>%s</%squalifications>%s' % (namespace_, self.gds_format_string(quote_xml(self.qualifications).encode(ExternalEncoding), input_name='qualifications'), namespace_, eol_))
        if self.methodologies is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smethodologies>%s</%smethodologies>%s' % (namespace_, self.gds_format_string(quote_xml(self.methodologies).encode(ExternalEncoding), input_name='methodologies'), namespace_, eol_))
        if self.support is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssupport>%s</%ssupport>%s' % (namespace_, self.gds_format_string(quote_xml(self.support).encode(ExternalEncoding), input_name='support'), namespace_, eol_))
        if self.other_resources is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sother_resources>%s</%sother_resources>%s' % (namespace_, self.gds_format_string(quote_xml(self.other_resources).encode(ExternalEncoding), input_name='other_resources'), namespace_, eol_))
        if self.statement_work is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstatement_work>%s</%sstatement_work>%s' % (namespace_, self.gds_format_string(quote_xml(self.statement_work).encode(ExternalEncoding), input_name='statement_work'), namespace_, eol_))
        if self.background is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sbackground>%s</%sbackground>%s' % (namespace_, self.gds_format_string(quote_xml(self.background).encode(ExternalEncoding), input_name='background'), namespace_, eol_))
        if self.justification is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sjustification>%s</%sjustification>%s' % (namespace_, self.gds_format_string(quote_xml(self.justification).encode(ExternalEncoding), input_name='justification'), namespace_, eol_))
        if self.deliverables is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdeliverables>%s</%sdeliverables>%s' % (namespace_, self.gds_format_string(quote_xml(self.deliverables).encode(ExternalEncoding), input_name='deliverables'), namespace_, eol_))
        if self.milestones is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smilestones>%s</%smilestones>%s' % (namespace_, self.gds_format_string(quote_xml(self.milestones).encode(ExternalEncoding), input_name='milestones'), namespace_, eol_))
        if self.progress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sprogress>%s</%sprogress>%s' % (namespace_, self.gds_format_string(quote_xml(self.progress).encode(ExternalEncoding), input_name='progress'), namespace_, eol_))
        if self.facilities is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfacilities>%s</%sfacilities>%s' % (namespace_, self.gds_format_string(quote_xml(self.facilities).encode(ExternalEncoding), input_name='facilities'), namespace_, eol_))
        if self.languages is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slanguages>%s</%slanguages>%s' % (namespace_, self.gds_format_string(quote_xml(self.languages).encode(ExternalEncoding), input_name='languages'), namespace_, eol_))
        if self.applications is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sapplications>%s</%sapplications>%s' % (namespace_, self.gds_format_string(quote_xml(self.applications).encode(ExternalEncoding), input_name='applications'), namespace_, eol_))
        if self.diskspace is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdiskspace>%s</%sdiskspace>%s' % (namespace_, self.gds_format_string(quote_xml(self.diskspace).encode(ExternalEncoding), input_name='diskspace'), namespace_, eol_))
        if self.memory is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smemory>%s</%smemory>%s' % (namespace_, self.gds_format_string(quote_xml(self.memory).encode(ExternalEncoding), input_name='memory'), namespace_, eol_))
        if self.processors is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sprocessors>%s</%sprocessors>%s' % (namespace_, self.gds_format_string(quote_xml(self.processors).encode(ExternalEncoding), input_name='processors'), namespace_, eol_))
        if self.nsf_status_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snsf_status_code>%s</%snsf_status_code>%s' % (namespace_, self.gds_format_string(quote_xml(self.nsf_status_code).encode(ExternalEncoding), input_name='nsf_status_code'), namespace_, eol_))
        if self.comment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scomment>%s</%scomment>%s' % (namespace_, self.gds_format_string(quote_xml(self.comment).encode(ExternalEncoding), input_name='comment'), namespace_, eol_))
        if self.account_activity_time is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%saccount_activity_time>%s</%saccount_activity_time>%s' % (namespace_, self.gds_format_string(quote_xml(self.account_activity_time).encode(ExternalEncoding), input_name='account_activity_time'), namespace_, eol_))
        if self.board_type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sboard_type>%s</%sboard_type>%s' % (namespace_, self.gds_format_string(quote_xml(self.board_type).encode(ExternalEncoding), input_name='board_type'), namespace_, eol_))
        if self.role_list is not None:
            self.role_list.export(outfile, level, namespace_, name_='role_list', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.record_id is not None or
            self.project_id is not None or
            self.project_gid is not None or
            self.alloc_type is not None or
            self.su_alloc is not None or
            self.pi is not None or
            self.start_date is not None or
            self.end_date is not None or
            self.project_title is not None or
            self.pfos is not None or
            self.sfos_list is not None or
            self.resource_list is not None or
            self.resource_login_list is not None or
            self.grant_num is not None or
            self.grant_type is not None or
            self.proposal_num is not None or
            self.abstract is not None or
            self.sector is not None or
            self.qualifications is not None or
            self.methodologies is not None or
            self.support is not None or
            self.other_resources is not None or
            self.statement_work is not None or
            self.background is not None or
            self.justification is not None or
            self.deliverables is not None or
            self.milestones is not None or
            self.progress is not None or
            self.facilities is not None or
            self.languages is not None or
            self.applications is not None or
            self.diskspace is not None or
            self.memory is not None or
            self.processors is not None or
            self.nsf_status_code is not None or
            self.comment is not None or
            self.account_activity_time is not None or
            self.board_type is not None or
            self.role_list is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='bodyType1'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.record_id is not None:
            showIndent(outfile, level)
            outfile.write('record_id=%s,\n' % quote_python(self.record_id).encode(ExternalEncoding))
        if self.project_id is not None:
            showIndent(outfile, level)
            outfile.write('project_id=%s,\n' % quote_python(self.project_id).encode(ExternalEncoding))
        if self.project_gid is not None:
            showIndent(outfile, level)
            outfile.write('project_gid=%d,\n' % self.project_gid)
        if self.alloc_type is not None:
            showIndent(outfile, level)
            outfile.write('alloc_type=%s,\n' % quote_python(self.alloc_type).encode(ExternalEncoding))
        if self.su_alloc is not None:
            showIndent(outfile, level)
            outfile.write('su_alloc=%f,\n' % self.su_alloc)
        if self.pi is not None:
            showIndent(outfile, level)
            outfile.write('pi=model_.piType1(\n')
            self.pi.exportLiteral(outfile, level, name_='pi')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.start_date is not None:
            showIndent(outfile, level)
            outfile.write('start_date=%s,\n' % quote_python(self.start_date).encode(ExternalEncoding))
        if self.end_date is not None:
            showIndent(outfile, level)
            outfile.write('end_date=%s,\n' % quote_python(self.end_date).encode(ExternalEncoding))
        if self.project_title is not None:
            showIndent(outfile, level)
            outfile.write('project_title=%s,\n' % quote_python(self.project_title).encode(ExternalEncoding))
        if self.pfos is not None:
            showIndent(outfile, level)
            outfile.write('pfos=model_.field_of_science_type(\n')
            self.pfos.exportLiteral(outfile, level, name_='pfos')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.sfos_list is not None:
            showIndent(outfile, level)
            outfile.write('sfos_list=model_.sfos_listType1(\n')
            self.sfos_list.exportLiteral(outfile, level, name_='sfos_list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.resource_list is not None:
            showIndent(outfile, level)
            outfile.write('resource_list=model_.resource_listType1(\n')
            self.resource_list.exportLiteral(outfile, level, name_='resource_list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.resource_login_list is not None:
            showIndent(outfile, level)
            outfile.write('resource_login_list=model_.resource_login_listType(\n')
            self.resource_login_list.exportLiteral(outfile, level, name_='resource_login_list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.grant_num is not None:
            showIndent(outfile, level)
            outfile.write('grant_num=%s,\n' % quote_python(self.grant_num).encode(ExternalEncoding))
        if self.grant_type is not None:
            showIndent(outfile, level)
            outfile.write('grant_type=%s,\n' % quote_python(self.grant_type).encode(ExternalEncoding))
        if self.proposal_num is not None:
            showIndent(outfile, level)
            outfile.write('proposal_num=%s,\n' % quote_python(self.proposal_num).encode(ExternalEncoding))
        if self.abstract is not None:
            showIndent(outfile, level)
            outfile.write('abstract=%s,\n' % quote_python(self.abstract).encode(ExternalEncoding))
        if self.sector is not None:
            showIndent(outfile, level)
            outfile.write('sector=%s,\n' % quote_python(self.sector).encode(ExternalEncoding))
        if self.qualifications is not None:
            showIndent(outfile, level)
            outfile.write('qualifications=%s,\n' % quote_python(self.qualifications).encode(ExternalEncoding))
        if self.methodologies is not None:
            showIndent(outfile, level)
            outfile.write('methodologies=%s,\n' % quote_python(self.methodologies).encode(ExternalEncoding))
        if self.support is not None:
            showIndent(outfile, level)
            outfile.write('support=%s,\n' % quote_python(self.support).encode(ExternalEncoding))
        if self.other_resources is not None:
            showIndent(outfile, level)
            outfile.write('other_resources=%s,\n' % quote_python(self.other_resources).encode(ExternalEncoding))
        if self.statement_work is not None:
            showIndent(outfile, level)
            outfile.write('statement_work=%s,\n' % quote_python(self.statement_work).encode(ExternalEncoding))
        if self.background is not None:
            showIndent(outfile, level)
            outfile.write('background=%s,\n' % quote_python(self.background).encode(ExternalEncoding))
        if self.justification is not None:
            showIndent(outfile, level)
            outfile.write('justification=%s,\n' % quote_python(self.justification).encode(ExternalEncoding))
        if self.deliverables is not None:
            showIndent(outfile, level)
            outfile.write('deliverables=%s,\n' % quote_python(self.deliverables).encode(ExternalEncoding))
        if self.milestones is not None:
            showIndent(outfile, level)
            outfile.write('milestones=%s,\n' % quote_python(self.milestones).encode(ExternalEncoding))
        if self.progress is not None:
            showIndent(outfile, level)
            outfile.write('progress=%s,\n' % quote_python(self.progress).encode(ExternalEncoding))
        if self.facilities is not None:
            showIndent(outfile, level)
            outfile.write('facilities=%s,\n' % quote_python(self.facilities).encode(ExternalEncoding))
        if self.languages is not None:
            showIndent(outfile, level)
            outfile.write('languages=%s,\n' % quote_python(self.languages).encode(ExternalEncoding))
        if self.applications is not None:
            showIndent(outfile, level)
            outfile.write('applications=%s,\n' % quote_python(self.applications).encode(ExternalEncoding))
        if self.diskspace is not None:
            showIndent(outfile, level)
            outfile.write('diskspace=%s,\n' % quote_python(self.diskspace).encode(ExternalEncoding))
        if self.memory is not None:
            showIndent(outfile, level)
            outfile.write('memory=%s,\n' % quote_python(self.memory).encode(ExternalEncoding))
        if self.processors is not None:
            showIndent(outfile, level)
            outfile.write('processors=%s,\n' % quote_python(self.processors).encode(ExternalEncoding))
        if self.nsf_status_code is not None:
            showIndent(outfile, level)
            outfile.write('nsf_status_code=%s,\n' % quote_python(self.nsf_status_code).encode(ExternalEncoding))
        if self.comment is not None:
            showIndent(outfile, level)
            outfile.write('comment=%s,\n' % quote_python(self.comment).encode(ExternalEncoding))
        if self.account_activity_time is not None:
            showIndent(outfile, level)
            outfile.write('account_activity_time=%s,\n' % quote_python(self.account_activity_time).encode(ExternalEncoding))
        if self.board_type is not None:
            showIndent(outfile, level)
            outfile.write('board_type=%s,\n' % quote_python(self.board_type).encode(ExternalEncoding))
        if self.role_list is not None:
            showIndent(outfile, level)
            outfile.write('role_list=model_.role_listType1(\n')
            self.role_list.exportLiteral(outfile, level, name_='role_list')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'record_id':
            record_id_ = child_.text
            record_id_ = self.gds_validate_string(record_id_, node, 'record_id')
            self.record_id = record_id_
        elif nodeName_ == 'project_id':
            project_id_ = child_.text
            project_id_ = self.gds_validate_string(project_id_, node, 'project_id')
            self.project_id = project_id_
        elif nodeName_ == 'project_gid':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'project_gid')
            self.project_gid = ival_
        elif nodeName_ == 'alloc_type':
            alloc_type_ = child_.text
            alloc_type_ = self.gds_validate_string(alloc_type_, node, 'alloc_type')
            self.alloc_type = alloc_type_
        elif nodeName_ == 'su_alloc':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'su_alloc')
            self.su_alloc = fval_
        elif nodeName_ == 'pi':
            obj_ = piType1.factory()
            obj_.build(child_)
            self.set_pi(obj_)
        elif nodeName_ == 'start_date':
            start_date_ = child_.text
            start_date_ = self.gds_validate_string(start_date_, node, 'start_date')
            self.start_date = start_date_
        elif nodeName_ == 'end_date':
            end_date_ = child_.text
            end_date_ = self.gds_validate_string(end_date_, node, 'end_date')
            self.end_date = end_date_
        elif nodeName_ == 'project_title':
            project_title_ = child_.text
            project_title_ = self.gds_validate_string(project_title_, node, 'project_title')
            self.project_title = project_title_
        elif nodeName_ == 'pfos':
            obj_ = field_of_science_type.factory()
            obj_.build(child_)
            self.set_pfos(obj_)
        elif nodeName_ == 'sfos_list':
            obj_ = sfos_listType1.factory()
            obj_.build(child_)
            self.set_sfos_list(obj_)
        elif nodeName_ == 'resource_list':
            obj_ = resource_listType1.factory()
            obj_.build(child_)
            self.set_resource_list(obj_)
        elif nodeName_ == 'resource_login_list':
            obj_ = resource_login_listType.factory()
            obj_.build(child_)
            self.set_resource_login_list(obj_)
        elif nodeName_ == 'grant_num':
            grant_num_ = child_.text
            grant_num_ = self.gds_validate_string(grant_num_, node, 'grant_num')
            self.grant_num = grant_num_
        elif nodeName_ == 'grant_type':
            grant_type_ = child_.text
            grant_type_ = self.gds_validate_string(grant_type_, node, 'grant_type')
            self.grant_type = grant_type_
        elif nodeName_ == 'proposal_num':
            proposal_num_ = child_.text
            proposal_num_ = self.gds_validate_string(proposal_num_, node, 'proposal_num')
            self.proposal_num = proposal_num_
        elif nodeName_ == 'abstract':
            abstract_ = child_.text
            abstract_ = self.gds_validate_string(abstract_, node, 'abstract')
            self.abstract = abstract_
        elif nodeName_ == 'sector':
            sector_ = child_.text
            sector_ = self.gds_validate_string(sector_, node, 'sector')
            self.sector = sector_
        elif nodeName_ == 'qualifications':
            qualifications_ = child_.text
            qualifications_ = self.gds_validate_string(qualifications_, node, 'qualifications')
            self.qualifications = qualifications_
        elif nodeName_ == 'methodologies':
            methodologies_ = child_.text
            methodologies_ = self.gds_validate_string(methodologies_, node, 'methodologies')
            self.methodologies = methodologies_
        elif nodeName_ == 'support':
            support_ = child_.text
            support_ = self.gds_validate_string(support_, node, 'support')
            self.support = support_
        elif nodeName_ == 'other_resources':
            other_resources_ = child_.text
            other_resources_ = self.gds_validate_string(other_resources_, node, 'other_resources')
            self.other_resources = other_resources_
        elif nodeName_ == 'statement_work':
            statement_work_ = child_.text
            statement_work_ = self.gds_validate_string(statement_work_, node, 'statement_work')
            self.statement_work = statement_work_
        elif nodeName_ == 'background':
            background_ = child_.text
            background_ = self.gds_validate_string(background_, node, 'background')
            self.background = background_
        elif nodeName_ == 'justification':
            justification_ = child_.text
            justification_ = self.gds_validate_string(justification_, node, 'justification')
            self.justification = justification_
        elif nodeName_ == 'deliverables':
            deliverables_ = child_.text
            deliverables_ = self.gds_validate_string(deliverables_, node, 'deliverables')
            self.deliverables = deliverables_
        elif nodeName_ == 'milestones':
            milestones_ = child_.text
            milestones_ = self.gds_validate_string(milestones_, node, 'milestones')
            self.milestones = milestones_
        elif nodeName_ == 'progress':
            progress_ = child_.text
            progress_ = self.gds_validate_string(progress_, node, 'progress')
            self.progress = progress_
        elif nodeName_ == 'facilities':
            facilities_ = child_.text
            facilities_ = self.gds_validate_string(facilities_, node, 'facilities')
            self.facilities = facilities_
        elif nodeName_ == 'languages':
            languages_ = child_.text
            languages_ = self.gds_validate_string(languages_, node, 'languages')
            self.languages = languages_
        elif nodeName_ == 'applications':
            applications_ = child_.text
            applications_ = self.gds_validate_string(applications_, node, 'applications')
            self.applications = applications_
        elif nodeName_ == 'diskspace':
            diskspace_ = child_.text
            diskspace_ = self.gds_validate_string(diskspace_, node, 'diskspace')
            self.diskspace = diskspace_
        elif nodeName_ == 'memory':
            memory_ = child_.text
            memory_ = self.gds_validate_string(memory_, node, 'memory')
            self.memory = memory_
        elif nodeName_ == 'processors':
            processors_ = child_.text
            processors_ = self.gds_validate_string(processors_, node, 'processors')
            self.processors = processors_
        elif nodeName_ == 'nsf_status_code':
            nsf_status_code_ = child_.text
            nsf_status_code_ = self.gds_validate_string(nsf_status_code_, node, 'nsf_status_code')
            self.nsf_status_code = nsf_status_code_
        elif nodeName_ == 'comment':
            comment_ = child_.text
            comment_ = self.gds_validate_string(comment_, node, 'comment')
            self.comment = comment_
        elif nodeName_ == 'account_activity_time':
            account_activity_time_ = child_.text
            account_activity_time_ = self.gds_validate_string(account_activity_time_, node, 'account_activity_time')
            self.account_activity_time = account_activity_time_
        elif nodeName_ == 'board_type':
            board_type_ = child_.text
            board_type_ = self.gds_validate_string(board_type_, node, 'board_type')
            self.board_type = board_type_
        elif nodeName_ == 'role_list':
            obj_ = role_listType1.factory()
            obj_.build(child_)
            self.set_role_list(obj_)
# end class bodyType1


class piType1(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, personal_info=None, dn_list=None, notifier_login=None, remote_site_login=None, req_login_list=None):
        self.personal_info = personal_info
        self.dn_list = dn_list
        self.notifier_login = notifier_login
        self.remote_site_login = remote_site_login
        self.req_login_list = req_login_list
    def factory(*args_, **kwargs_):
        if piType1.subclass:
            return piType1.subclass(*args_, **kwargs_)
        else:
            return piType1(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_personal_info(self): return self.personal_info
    def set_personal_info(self, personal_info): self.personal_info = personal_info
    def get_dn_list(self): return self.dn_list
    def set_dn_list(self, dn_list): self.dn_list = dn_list
    def get_notifier_login(self): return self.notifier_login
    def set_notifier_login(self, notifier_login): self.notifier_login = notifier_login
    def get_remote_site_login(self): return self.remote_site_login
    def set_remote_site_login(self, remote_site_login): self.remote_site_login = remote_site_login
    def get_req_login_list(self): return self.req_login_list
    def set_req_login_list(self, req_login_list): self.req_login_list = req_login_list
    def export(self, outfile, level, namespace_='', name_='piType1', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='piType1')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='piType1'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='piType1', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.personal_info is not None:
            self.personal_info.export(outfile, level, namespace_, name_='personal_info', pretty_print=pretty_print)
        if self.dn_list is not None:
            self.dn_list.export(outfile, level, namespace_, name_='dn_list', pretty_print=pretty_print)
        if self.notifier_login is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snotifier_login>%s</%snotifier_login>%s' % (namespace_, self.gds_format_string(quote_xml(self.notifier_login).encode(ExternalEncoding), input_name='notifier_login'), namespace_, eol_))
        if self.remote_site_login is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sremote_site_login>%s</%sremote_site_login>%s' % (namespace_, self.gds_format_string(quote_xml(self.remote_site_login).encode(ExternalEncoding), input_name='remote_site_login'), namespace_, eol_))
        if self.req_login_list is not None:
            self.req_login_list.export(outfile, level, namespace_, name_='req_login_list', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.personal_info is not None or
            self.dn_list is not None or
            self.notifier_login is not None or
            self.remote_site_login is not None or
            self.req_login_list is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='piType1'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.personal_info is not None:
            showIndent(outfile, level)
            outfile.write('personal_info=model_.person_type(\n')
            self.personal_info.exportLiteral(outfile, level, name_='personal_info')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dn_list is not None:
            showIndent(outfile, level)
            outfile.write('dn_list=model_.dn_listType1(\n')
            self.dn_list.exportLiteral(outfile, level, name_='dn_list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.notifier_login is not None:
            showIndent(outfile, level)
            outfile.write('notifier_login=%s,\n' % quote_python(self.notifier_login).encode(ExternalEncoding))
        if self.remote_site_login is not None:
            showIndent(outfile, level)
            outfile.write('remote_site_login=%s,\n' % quote_python(self.remote_site_login).encode(ExternalEncoding))
        if self.req_login_list is not None:
            showIndent(outfile, level)
            outfile.write('req_login_list=model_.req_login_listType1(\n')
            self.req_login_list.exportLiteral(outfile, level, name_='req_login_list')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'personal_info':
            obj_ = person_type.factory()
            obj_.build(child_)
            self.set_personal_info(obj_)
        elif nodeName_ == 'dn_list':
            obj_ = dn_listType1.factory()
            obj_.build(child_)
            self.set_dn_list(obj_)
        elif nodeName_ == 'notifier_login':
            notifier_login_ = child_.text
            notifier_login_ = self.gds_validate_string(notifier_login_, node, 'notifier_login')
            self.notifier_login = notifier_login_
        elif nodeName_ == 'remote_site_login':
            remote_site_login_ = child_.text
            remote_site_login_ = self.gds_validate_string(remote_site_login_, node, 'remote_site_login')
            self.remote_site_login = remote_site_login_
        elif nodeName_ == 'req_login_list':
            obj_ = req_login_listType1.factory()
            obj_.build(child_)
            self.set_req_login_list(obj_)
# end class piType1


class dn_listType1(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dn=None):
        if dn is None:
            self.dn = []
        else:
            self.dn = dn
    def factory(*args_, **kwargs_):
        if dn_listType1.subclass:
            return dn_listType1.subclass(*args_, **kwargs_)
        else:
            return dn_listType1(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dn(self): return self.dn
    def set_dn(self, dn): self.dn = dn
    def add_dn(self, value): self.dn.append(value)
    def insert_dn(self, index, value): self.dn[index] = value
    def export(self, outfile, level, namespace_='', name_='dn_listType1', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dn_listType1')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='dn_listType1'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='dn_listType1', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for dn_ in self.dn:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdn>%s</%sdn>%s' % (namespace_, self.gds_format_string(quote_xml(dn_).encode(ExternalEncoding), input_name='dn'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.dn
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='dn_listType1'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('dn=[\n')
        level += 1
        for dn_ in self.dn:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(dn_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dn':
            dn_ = child_.text
            dn_ = self.gds_validate_string(dn_, node, 'dn')
            self.dn.append(dn_)
# end class dn_listType1


class req_login_listType1(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, req_login=None):
        if req_login is None:
            self.req_login = []
        else:
            self.req_login = req_login
    def factory(*args_, **kwargs_):
        if req_login_listType1.subclass:
            return req_login_listType1.subclass(*args_, **kwargs_)
        else:
            return req_login_listType1(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_req_login(self): return self.req_login
    def set_req_login(self, req_login): self.req_login = req_login
    def add_req_login(self, value): self.req_login.append(value)
    def insert_req_login(self, index, value): self.req_login[index] = value
    def export(self, outfile, level, namespace_='', name_='req_login_listType1', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='req_login_listType1')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='req_login_listType1'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='req_login_listType1', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for req_login_ in self.req_login:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreq_login>%s</%sreq_login>%s' % (namespace_, self.gds_format_string(quote_xml(req_login_).encode(ExternalEncoding), input_name='req_login'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.req_login
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='req_login_listType1'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('req_login=[\n')
        level += 1
        for req_login_ in self.req_login:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(req_login_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'req_login':
            req_login_ = child_.text
            req_login_ = self.gds_validate_string(req_login_, node, 'req_login')
            self.req_login.append(req_login_)
# end class req_login_listType1


class sfos_listType1(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, sfos=None):
        if sfos is None:
            self.sfos = []
        else:
            self.sfos = sfos
    def factory(*args_, **kwargs_):
        if sfos_listType1.subclass:
            return sfos_listType1.subclass(*args_, **kwargs_)
        else:
            return sfos_listType1(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_sfos(self): return self.sfos
    def set_sfos(self, sfos): self.sfos = sfos
    def add_sfos(self, value): self.sfos.append(value)
    def insert_sfos(self, index, value): self.sfos[index] = value
    def export(self, outfile, level, namespace_='', name_='sfos_listType1', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='sfos_listType1')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='sfos_listType1'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='sfos_listType1', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for sfos_ in self.sfos:
            sfos_.export(outfile, level, namespace_, name_='sfos', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.sfos
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='sfos_listType1'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('sfos=[\n')
        level += 1
        for sfos_ in self.sfos:
            showIndent(outfile, level)
            outfile.write('model_.field_of_science_type(\n')
            sfos_.exportLiteral(outfile, level, name_='field_of_science_type')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'sfos':
            obj_ = field_of_science_type.factory()
            obj_.build(child_)
            self.sfos.append(obj_)
# end class sfos_listType1


class resource_listType1(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, resource=None):
        if resource is None:
            self.resource = []
        else:
            self.resource = resource
    def factory(*args_, **kwargs_):
        if resource_listType1.subclass:
            return resource_listType1.subclass(*args_, **kwargs_)
        else:
            return resource_listType1(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_resource(self): return self.resource
    def set_resource(self, resource): self.resource = resource
    def add_resource(self, value): self.resource.append(value)
    def insert_resource(self, index, value): self.resource[index] = value
    def export(self, outfile, level, namespace_='', name_='resource_listType1', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='resource_listType1')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='resource_listType1'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='resource_listType1', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for resource_ in self.resource:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sresource>%s</%sresource>%s' % (namespace_, self.gds_format_string(quote_xml(resource_).encode(ExternalEncoding), input_name='resource'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.resource
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='resource_listType1'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('resource=[\n')
        level += 1
        for resource_ in self.resource:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(resource_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'resource':
            resource_ = child_.text
            resource_ = self.gds_validate_string(resource_, node, 'resource')
            self.resource.append(resource_)
# end class resource_listType1


class resource_login_listType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, resource_login=None):
        if resource_login is None:
            self.resource_login = []
        else:
            self.resource_login = resource_login
    def factory(*args_, **kwargs_):
        if resource_login_listType.subclass:
            return resource_login_listType.subclass(*args_, **kwargs_)
        else:
            return resource_login_listType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_resource_login(self): return self.resource_login
    def set_resource_login(self, resource_login): self.resource_login = resource_login
    def add_resource_login(self, value): self.resource_login.append(value)
    def insert_resource_login(self, index, value): self.resource_login[index] = value
    def export(self, outfile, level, namespace_='', name_='resource_login_listType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='resource_login_listType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='resource_login_listType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='resource_login_listType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for resource_login_ in self.resource_login:
            resource_login_.export(outfile, level, namespace_, name_='resource_login', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.resource_login
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='resource_login_listType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('resource_login=[\n')
        level += 1
        for resource_login_ in self.resource_login:
            showIndent(outfile, level)
            outfile.write('model_.resource_login_type(\n')
            resource_login_.exportLiteral(outfile, level, name_='resource_login_type')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'resource_login':
            obj_ = resource_login_type.factory()
            obj_.build(child_)
            self.resource_login.append(obj_)
# end class resource_login_listType


class role_listType1(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, role=None):
        if role is None:
            self.role = []
        else:
            self.role = role
    def factory(*args_, **kwargs_):
        if role_listType1.subclass:
            return role_listType1.subclass(*args_, **kwargs_)
        else:
            return role_listType1(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_role(self): return self.role
    def set_role(self, role): self.role = role
    def add_role(self, value): self.role.append(value)
    def insert_role(self, index, value): self.role[index] = value
    def export(self, outfile, level, namespace_='', name_='role_listType1', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='role_listType1')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='role_listType1'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='role_listType1', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for role_ in self.role:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srole>%s</%srole>%s' % (namespace_, self.gds_format_string(quote_xml(role_).encode(ExternalEncoding), input_name='role'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.role
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='role_listType1'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('role=[\n')
        level += 1
        for role_ in self.role:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(role_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'role':
            role_ = child_.text
            role_ = self.gds_validate_string(role_, node, 'role')
            self.role.append(role_)
# end class role_listType1


class data_project_createType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, header=None, body=None):
        self.header = header
        self.body = body
    def factory(*args_, **kwargs_):
        if data_project_createType.subclass:
            return data_project_createType.subclass(*args_, **kwargs_)
        else:
            return data_project_createType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_header(self): return self.header
    def set_header(self, header): self.header = header
    def get_body(self): return self.body
    def set_body(self, body): self.body = body
    def export(self, outfile, level, namespace_='', name_='data_project_createType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='data_project_createType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='data_project_createType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='data_project_createType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.header is not None:
            self.header.export(outfile, level, namespace_, name_='header', pretty_print=pretty_print)
        if self.body is not None:
            self.body.export(outfile, level, namespace_, name_='body', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.header is not None or
            self.body is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='data_project_createType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.header is not None:
            showIndent(outfile, level)
            outfile.write('header=model_.header_type(\n')
            self.header.exportLiteral(outfile, level, name_='header')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.body is not None:
            showIndent(outfile, level)
            outfile.write('body=model_.bodyType2(\n')
            self.body.exportLiteral(outfile, level, name_='body')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'header':
            obj_ = header_type.factory()
            obj_.build(child_)
            self.set_header(obj_)
        elif nodeName_ == 'body':
            obj_ = bodyType2.factory()
            obj_.build(child_)
            self.set_body(obj_)
# end class data_project_createType


class bodyType2(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dn_list=None, project_id=None, person_id=None, comment=None):
        self.dn_list = dn_list
        self.project_id = project_id
        self.person_id = person_id
        self.comment = comment
    def factory(*args_, **kwargs_):
        if bodyType2.subclass:
            return bodyType2.subclass(*args_, **kwargs_)
        else:
            return bodyType2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dn_list(self): return self.dn_list
    def set_dn_list(self, dn_list): self.dn_list = dn_list
    def get_project_id(self): return self.project_id
    def set_project_id(self, project_id): self.project_id = project_id
    def get_person_id(self): return self.person_id
    def set_person_id(self, person_id): self.person_id = person_id
    def get_comment(self): return self.comment
    def set_comment(self, comment): self.comment = comment
    def export(self, outfile, level, namespace_='', name_='bodyType2', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='bodyType2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='bodyType2'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='bodyType2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.dn_list is not None:
            self.dn_list.export(outfile, level, namespace_, name_='dn_list', pretty_print=pretty_print)
        if self.project_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sproject_id>%s</%sproject_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.project_id).encode(ExternalEncoding), input_name='project_id'), namespace_, eol_))
        if self.person_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sperson_id>%s</%sperson_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.person_id).encode(ExternalEncoding), input_name='person_id'), namespace_, eol_))
        if self.comment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scomment>%s</%scomment>%s' % (namespace_, self.gds_format_string(quote_xml(self.comment).encode(ExternalEncoding), input_name='comment'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.dn_list is not None or
            self.project_id is not None or
            self.person_id is not None or
            self.comment is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='bodyType2'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.dn_list is not None:
            showIndent(outfile, level)
            outfile.write('dn_list=model_.dn_listType2(\n')
            self.dn_list.exportLiteral(outfile, level, name_='dn_list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.project_id is not None:
            showIndent(outfile, level)
            outfile.write('project_id=%s,\n' % quote_python(self.project_id).encode(ExternalEncoding))
        if self.person_id is not None:
            showIndent(outfile, level)
            outfile.write('person_id=%s,\n' % quote_python(self.person_id).encode(ExternalEncoding))
        if self.comment is not None:
            showIndent(outfile, level)
            outfile.write('comment=%s,\n' % quote_python(self.comment).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dn_list':
            obj_ = dn_listType2.factory()
            obj_.build(child_)
            self.set_dn_list(obj_)
        elif nodeName_ == 'project_id':
            project_id_ = child_.text
            project_id_ = self.gds_validate_string(project_id_, node, 'project_id')
            self.project_id = project_id_
        elif nodeName_ == 'person_id':
            person_id_ = child_.text
            person_id_ = self.gds_validate_string(person_id_, node, 'person_id')
            self.person_id = person_id_
        elif nodeName_ == 'comment':
            comment_ = child_.text
            comment_ = self.gds_validate_string(comment_, node, 'comment')
            self.comment = comment_
# end class bodyType2


class dn_listType2(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dn=None):
        if dn is None:
            self.dn = []
        else:
            self.dn = dn
    def factory(*args_, **kwargs_):
        if dn_listType2.subclass:
            return dn_listType2.subclass(*args_, **kwargs_)
        else:
            return dn_listType2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dn(self): return self.dn
    def set_dn(self, dn): self.dn = dn
    def add_dn(self, value): self.dn.append(value)
    def insert_dn(self, index, value): self.dn[index] = value
    def export(self, outfile, level, namespace_='', name_='dn_listType2', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dn_listType2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='dn_listType2'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='dn_listType2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for dn_ in self.dn:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdn>%s</%sdn>%s' % (namespace_, self.gds_format_string(quote_xml(dn_).encode(ExternalEncoding), input_name='dn'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.dn
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='dn_listType2'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('dn=[\n')
        level += 1
        for dn_ in self.dn:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(dn_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dn':
            dn_ = child_.text
            dn_ = self.gds_validate_string(dn_, node, 'dn')
            self.dn.append(dn_)
# end class dn_listType2


class request_account_createType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, header=None, body=None):
        self.header = header
        self.body = body
    def factory(*args_, **kwargs_):
        if request_account_createType.subclass:
            return request_account_createType.subclass(*args_, **kwargs_)
        else:
            return request_account_createType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_header(self): return self.header
    def set_header(self, header): self.header = header
    def get_body(self): return self.body
    def set_body(self, body): self.body = body
    def export(self, outfile, level, namespace_='', name_='request_account_createType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='request_account_createType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='request_account_createType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='request_account_createType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.header is not None:
            self.header.export(outfile, level, namespace_, name_='header', pretty_print=pretty_print)
        if self.body is not None:
            self.body.export(outfile, level, namespace_, name_='body', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.header is not None or
            self.body is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='request_account_createType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.header is not None:
            showIndent(outfile, level)
            outfile.write('header=model_.header_type(\n')
            self.header.exportLiteral(outfile, level, name_='header')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.body is not None:
            showIndent(outfile, level)
            outfile.write('body=model_.bodyType3(\n')
            self.body.exportLiteral(outfile, level, name_='body')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'header':
            obj_ = header_type.factory()
            obj_.build(child_)
            self.set_header(obj_)
        elif nodeName_ == 'body':
            obj_ = bodyType3.factory()
            obj_.build(child_)
            self.set_body(obj_)
# end class request_account_createType


class bodyType3(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, project_id=None, grant_num=None, alloc_resource=None, resource_list=None, user=None, site_person_id_list=None, nsf_status_code=None, comment=None, role_list=None):
        self.project_id = project_id
        self.grant_num = grant_num
        self.alloc_resource = alloc_resource
        self.resource_list = resource_list
        self.user = user
        self.site_person_id_list = site_person_id_list
        self.nsf_status_code = nsf_status_code
        self.comment = comment
        self.role_list = role_list
    def factory(*args_, **kwargs_):
        if bodyType3.subclass:
            return bodyType3.subclass(*args_, **kwargs_)
        else:
            return bodyType3(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_project_id(self): return self.project_id
    def set_project_id(self, project_id): self.project_id = project_id
    def get_grant_num(self): return self.grant_num
    def set_grant_num(self, grant_num): self.grant_num = grant_num
    def get_alloc_resource(self): return self.alloc_resource
    def set_alloc_resource(self, alloc_resource): self.alloc_resource = alloc_resource
    def get_resource_list(self): return self.resource_list
    def set_resource_list(self, resource_list): self.resource_list = resource_list
    def get_user(self): return self.user
    def set_user(self, user): self.user = user
    def get_site_person_id_list(self): return self.site_person_id_list
    def set_site_person_id_list(self, site_person_id_list): self.site_person_id_list = site_person_id_list
    def get_nsf_status_code(self): return self.nsf_status_code
    def set_nsf_status_code(self, nsf_status_code): self.nsf_status_code = nsf_status_code
    def get_comment(self): return self.comment
    def set_comment(self, comment): self.comment = comment
    def get_role_list(self): return self.role_list
    def set_role_list(self, role_list): self.role_list = role_list
    def export(self, outfile, level, namespace_='', name_='bodyType3', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='bodyType3')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='bodyType3'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='bodyType3', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.project_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sproject_id>%s</%sproject_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.project_id).encode(ExternalEncoding), input_name='project_id'), namespace_, eol_))
        if self.grant_num is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sgrant_num>%s</%sgrant_num>%s' % (namespace_, self.gds_format_string(quote_xml(self.grant_num).encode(ExternalEncoding), input_name='grant_num'), namespace_, eol_))
        if self.alloc_resource is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%salloc_resource>%s</%salloc_resource>%s' % (namespace_, self.gds_format_string(quote_xml(self.alloc_resource).encode(ExternalEncoding), input_name='alloc_resource'), namespace_, eol_))
        if self.resource_list is not None:
            self.resource_list.export(outfile, level, namespace_, name_='resource_list', pretty_print=pretty_print)
        if self.user is not None:
            self.user.export(outfile, level, namespace_, name_='user', pretty_print=pretty_print)
        if self.site_person_id_list is not None:
            self.site_person_id_list.export(outfile, level, namespace_, name_='site_person_id_list', pretty_print=pretty_print)
        if self.nsf_status_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snsf_status_code>%s</%snsf_status_code>%s' % (namespace_, self.gds_format_string(quote_xml(self.nsf_status_code).encode(ExternalEncoding), input_name='nsf_status_code'), namespace_, eol_))
        if self.comment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scomment>%s</%scomment>%s' % (namespace_, self.gds_format_string(quote_xml(self.comment).encode(ExternalEncoding), input_name='comment'), namespace_, eol_))
        if self.role_list is not None:
            self.role_list.export(outfile, level, namespace_, name_='role_list', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.project_id is not None or
            self.grant_num is not None or
            self.alloc_resource is not None or
            self.resource_list is not None or
            self.user is not None or
            self.site_person_id_list is not None or
            self.nsf_status_code is not None or
            self.comment is not None or
            self.role_list is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='bodyType3'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.project_id is not None:
            showIndent(outfile, level)
            outfile.write('project_id=%s,\n' % quote_python(self.project_id).encode(ExternalEncoding))
        if self.grant_num is not None:
            showIndent(outfile, level)
            outfile.write('grant_num=%s,\n' % quote_python(self.grant_num).encode(ExternalEncoding))
        if self.alloc_resource is not None:
            showIndent(outfile, level)
            outfile.write('alloc_resource=%s,\n' % quote_python(self.alloc_resource).encode(ExternalEncoding))
        if self.resource_list is not None:
            showIndent(outfile, level)
            outfile.write('resource_list=model_.resource_listType2(\n')
            self.resource_list.exportLiteral(outfile, level, name_='resource_list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.user is not None:
            showIndent(outfile, level)
            outfile.write('user=model_.userType(\n')
            self.user.exportLiteral(outfile, level, name_='user')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.site_person_id_list is not None:
            showIndent(outfile, level)
            outfile.write('site_person_id_list=model_.site_person_id_list(\n')
            self.site_person_id_list.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.nsf_status_code is not None:
            showIndent(outfile, level)
            outfile.write('nsf_status_code=%s,\n' % quote_python(self.nsf_status_code).encode(ExternalEncoding))
        if self.comment is not None:
            showIndent(outfile, level)
            outfile.write('comment=%s,\n' % quote_python(self.comment).encode(ExternalEncoding))
        if self.role_list is not None:
            showIndent(outfile, level)
            outfile.write('role_list=model_.role_listType2(\n')
            self.role_list.exportLiteral(outfile, level, name_='role_list')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'project_id':
            project_id_ = child_.text
            project_id_ = self.gds_validate_string(project_id_, node, 'project_id')
            self.project_id = project_id_
        elif nodeName_ == 'grant_num':
            grant_num_ = child_.text
            grant_num_ = self.gds_validate_string(grant_num_, node, 'grant_num')
            self.grant_num = grant_num_
        elif nodeName_ == 'alloc_resource':
            alloc_resource_ = child_.text
            alloc_resource_ = self.gds_validate_string(alloc_resource_, node, 'alloc_resource')
            self.alloc_resource = alloc_resource_
        elif nodeName_ == 'resource_list':
            obj_ = resource_listType2.factory()
            obj_.build(child_)
            self.set_resource_list(obj_)
        elif nodeName_ == 'user':
            obj_ = userType.factory()
            obj_.build(child_)
            self.set_user(obj_)
        elif nodeName_ == 'site_person_id_list':
            obj_ = site_person_id_list.factory()
            obj_.build(child_)
            self.set_site_person_id_list(obj_)
        elif nodeName_ == 'nsf_status_code':
            nsf_status_code_ = child_.text
            nsf_status_code_ = self.gds_validate_string(nsf_status_code_, node, 'nsf_status_code')
            self.nsf_status_code = nsf_status_code_
        elif nodeName_ == 'comment':
            comment_ = child_.text
            comment_ = self.gds_validate_string(comment_, node, 'comment')
            self.comment = comment_
        elif nodeName_ == 'role_list':
            obj_ = role_listType2.factory()
            obj_.build(child_)
            self.set_role_list(obj_)
# end class bodyType3


class resource_listType2(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, resource=None):
        if resource is None:
            self.resource = []
        else:
            self.resource = resource
    def factory(*args_, **kwargs_):
        if resource_listType2.subclass:
            return resource_listType2.subclass(*args_, **kwargs_)
        else:
            return resource_listType2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_resource(self): return self.resource
    def set_resource(self, resource): self.resource = resource
    def add_resource(self, value): self.resource.append(value)
    def insert_resource(self, index, value): self.resource[index] = value
    def export(self, outfile, level, namespace_='', name_='resource_listType2', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='resource_listType2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='resource_listType2'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='resource_listType2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for resource_ in self.resource:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sresource>%s</%sresource>%s' % (namespace_, self.gds_format_string(quote_xml(resource_).encode(ExternalEncoding), input_name='resource'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.resource
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='resource_listType2'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('resource=[\n')
        level += 1
        for resource_ in self.resource:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(resource_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'resource':
            resource_ = child_.text
            resource_ = self.gds_validate_string(resource_, node, 'resource')
            self.resource.append(resource_)
# end class resource_listType2


class userType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, personal_info=None, dn_list=None, password_access_enable=None, remote_site_id=None, remote_site_login=None, requester_login=None, req_login_list=None, role=None):
        self.personal_info = personal_info
        self.dn_list = dn_list
        self.password_access_enable = password_access_enable
        self.remote_site_id = remote_site_id
        self.remote_site_login = remote_site_login
        self.requester_login = requester_login
        self.req_login_list = req_login_list
        self.role = role
    def factory(*args_, **kwargs_):
        if userType.subclass:
            return userType.subclass(*args_, **kwargs_)
        else:
            return userType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_personal_info(self): return self.personal_info
    def set_personal_info(self, personal_info): self.personal_info = personal_info
    def get_dn_list(self): return self.dn_list
    def set_dn_list(self, dn_list): self.dn_list = dn_list
    def get_password_access_enable(self): return self.password_access_enable
    def set_password_access_enable(self, password_access_enable): self.password_access_enable = password_access_enable
    def get_remote_site_id(self): return self.remote_site_id
    def set_remote_site_id(self, remote_site_id): self.remote_site_id = remote_site_id
    def get_remote_site_login(self): return self.remote_site_login
    def set_remote_site_login(self, remote_site_login): self.remote_site_login = remote_site_login
    def get_requester_login(self): return self.requester_login
    def set_requester_login(self, requester_login): self.requester_login = requester_login
    def get_req_login_list(self): return self.req_login_list
    def set_req_login_list(self, req_login_list): self.req_login_list = req_login_list
    def get_role(self): return self.role
    def set_role(self, role): self.role = role
    def export(self, outfile, level, namespace_='', name_='userType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='userType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='userType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='userType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.personal_info is not None:
            self.personal_info.export(outfile, level, namespace_, name_='personal_info', pretty_print=pretty_print)
        if self.dn_list is not None:
            self.dn_list.export(outfile, level, namespace_, name_='dn_list', pretty_print=pretty_print)
        if self.password_access_enable is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spassword_access_enable>%s</%spassword_access_enable>%s' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.password_access_enable)), input_name='password_access_enable'), namespace_, eol_))
        if self.remote_site_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sremote_site_id>%s</%sremote_site_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.remote_site_id).encode(ExternalEncoding), input_name='remote_site_id'), namespace_, eol_))
        if self.remote_site_login is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sremote_site_login>%s</%sremote_site_login>%s' % (namespace_, self.gds_format_string(quote_xml(self.remote_site_login).encode(ExternalEncoding), input_name='remote_site_login'), namespace_, eol_))
        if self.requester_login is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srequester_login>%s</%srequester_login>%s' % (namespace_, self.gds_format_string(quote_xml(self.requester_login).encode(ExternalEncoding), input_name='requester_login'), namespace_, eol_))
        if self.req_login_list is not None:
            self.req_login_list.export(outfile, level, namespace_, name_='req_login_list', pretty_print=pretty_print)
        if self.role is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srole>%s</%srole>%s' % (namespace_, self.gds_format_string(quote_xml(self.role).encode(ExternalEncoding), input_name='role'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.personal_info is not None or
            self.dn_list is not None or
            self.password_access_enable is not None or
            self.remote_site_id is not None or
            self.remote_site_login is not None or
            self.requester_login is not None or
            self.req_login_list is not None or
            self.role is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='userType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.personal_info is not None:
            showIndent(outfile, level)
            outfile.write('personal_info=model_.person_type(\n')
            self.personal_info.exportLiteral(outfile, level, name_='personal_info')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dn_list is not None:
            showIndent(outfile, level)
            outfile.write('dn_list=model_.dn_listType3(\n')
            self.dn_list.exportLiteral(outfile, level, name_='dn_list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.password_access_enable is not None:
            showIndent(outfile, level)
            outfile.write('password_access_enable=%s,\n' % self.password_access_enable)
        if self.remote_site_id is not None:
            showIndent(outfile, level)
            outfile.write('remote_site_id=%s,\n' % quote_python(self.remote_site_id).encode(ExternalEncoding))
        if self.remote_site_login is not None:
            showIndent(outfile, level)
            outfile.write('remote_site_login=%s,\n' % quote_python(self.remote_site_login).encode(ExternalEncoding))
        if self.requester_login is not None:
            showIndent(outfile, level)
            outfile.write('requester_login=%s,\n' % quote_python(self.requester_login).encode(ExternalEncoding))
        if self.req_login_list is not None:
            showIndent(outfile, level)
            outfile.write('req_login_list=model_.req_login_listType2(\n')
            self.req_login_list.exportLiteral(outfile, level, name_='req_login_list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.role is not None:
            showIndent(outfile, level)
            outfile.write('role=%s,\n' % quote_python(self.role).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'personal_info':
            obj_ = person_type.factory()
            obj_.build(child_)
            self.set_personal_info(obj_)
        elif nodeName_ == 'dn_list':
            obj_ = dn_listType3.factory()
            obj_.build(child_)
            self.set_dn_list(obj_)
        elif nodeName_ == 'password_access_enable':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'password_access_enable')
            self.password_access_enable = ival_
        elif nodeName_ == 'remote_site_id':
            remote_site_id_ = child_.text
            remote_site_id_ = self.gds_validate_string(remote_site_id_, node, 'remote_site_id')
            self.remote_site_id = remote_site_id_
        elif nodeName_ == 'remote_site_login':
            remote_site_login_ = child_.text
            remote_site_login_ = self.gds_validate_string(remote_site_login_, node, 'remote_site_login')
            self.remote_site_login = remote_site_login_
        elif nodeName_ == 'requester_login':
            requester_login_ = child_.text
            requester_login_ = self.gds_validate_string(requester_login_, node, 'requester_login')
            self.requester_login = requester_login_
        elif nodeName_ == 'req_login_list':
            obj_ = req_login_listType2.factory()
            obj_.build(child_)
            self.set_req_login_list(obj_)
        elif nodeName_ == 'role':
            role_ = child_.text
            role_ = self.gds_validate_string(role_, node, 'role')
            self.role = role_
# end class userType


class dn_listType3(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dn=None):
        if dn is None:
            self.dn = []
        else:
            self.dn = dn
    def factory(*args_, **kwargs_):
        if dn_listType3.subclass:
            return dn_listType3.subclass(*args_, **kwargs_)
        else:
            return dn_listType3(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dn(self): return self.dn
    def set_dn(self, dn): self.dn = dn
    def add_dn(self, value): self.dn.append(value)
    def insert_dn(self, index, value): self.dn[index] = value
    def export(self, outfile, level, namespace_='', name_='dn_listType3', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dn_listType3')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='dn_listType3'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='dn_listType3', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for dn_ in self.dn:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdn>%s</%sdn>%s' % (namespace_, self.gds_format_string(quote_xml(dn_).encode(ExternalEncoding), input_name='dn'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.dn
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='dn_listType3'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('dn=[\n')
        level += 1
        for dn_ in self.dn:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(dn_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dn':
            dn_ = child_.text
            dn_ = self.gds_validate_string(dn_, node, 'dn')
            self.dn.append(dn_)
# end class dn_listType3


class req_login_listType2(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, req_login=None):
        if req_login is None:
            self.req_login = []
        else:
            self.req_login = req_login
    def factory(*args_, **kwargs_):
        if req_login_listType2.subclass:
            return req_login_listType2.subclass(*args_, **kwargs_)
        else:
            return req_login_listType2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_req_login(self): return self.req_login
    def set_req_login(self, req_login): self.req_login = req_login
    def add_req_login(self, value): self.req_login.append(value)
    def insert_req_login(self, index, value): self.req_login[index] = value
    def export(self, outfile, level, namespace_='', name_='req_login_listType2', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='req_login_listType2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='req_login_listType2'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='req_login_listType2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for req_login_ in self.req_login:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreq_login>%s</%sreq_login>%s' % (namespace_, self.gds_format_string(quote_xml(req_login_).encode(ExternalEncoding), input_name='req_login'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.req_login
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='req_login_listType2'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('req_login=[\n')
        level += 1
        for req_login_ in self.req_login:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(req_login_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'req_login':
            req_login_ = child_.text
            req_login_ = self.gds_validate_string(req_login_, node, 'req_login')
            self.req_login.append(req_login_)
# end class req_login_listType2


class role_listType2(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, role=None):
        if role is None:
            self.role = []
        else:
            self.role = role
    def factory(*args_, **kwargs_):
        if role_listType2.subclass:
            return role_listType2.subclass(*args_, **kwargs_)
        else:
            return role_listType2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_role(self): return self.role
    def set_role(self, role): self.role = role
    def add_role(self, value): self.role.append(value)
    def insert_role(self, index, value): self.role[index] = value
    def export(self, outfile, level, namespace_='', name_='role_listType2', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='role_listType2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='role_listType2'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='role_listType2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for role_ in self.role:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srole>%s</%srole>%s' % (namespace_, self.gds_format_string(quote_xml(role_).encode(ExternalEncoding), input_name='role'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.role
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='role_listType2'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('role=[\n')
        level += 1
        for role_ in self.role:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(role_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'role':
            role_ = child_.text
            role_ = self.gds_validate_string(role_, node, 'role')
            self.role.append(role_)
# end class role_listType2


class notify_account_createType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, header=None, body=None):
        self.header = header
        self.body = body
    def factory(*args_, **kwargs_):
        if notify_account_createType.subclass:
            return notify_account_createType.subclass(*args_, **kwargs_)
        else:
            return notify_account_createType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_header(self): return self.header
    def set_header(self, header): self.header = header
    def get_body(self): return self.body
    def set_body(self, body): self.body = body
    def export(self, outfile, level, namespace_='', name_='notify_account_createType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='notify_account_createType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='notify_account_createType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='notify_account_createType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.header is not None:
            self.header.export(outfile, level, namespace_, name_='header', pretty_print=pretty_print)
        if self.body is not None:
            self.body.export(outfile, level, namespace_, name_='body', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.header is not None or
            self.body is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='notify_account_createType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.header is not None:
            showIndent(outfile, level)
            outfile.write('header=model_.header_type(\n')
            self.header.exportLiteral(outfile, level, name_='header')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.body is not None:
            showIndent(outfile, level)
            outfile.write('body=model_.bodyType4(\n')
            self.body.exportLiteral(outfile, level, name_='body')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'header':
            obj_ = header_type.factory()
            obj_.build(child_)
            self.set_header(obj_)
        elif nodeName_ == 'body':
            obj_ = bodyType4.factory()
            obj_.build(child_)
            self.set_body(obj_)
# end class notify_account_createType


class bodyType4(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, project_id=None, resource_list=None, resource_login_list=None, user=None, nsf_status_code=None, comment=None, start_date=None, account_activity_time=None, role_list=None):
        self.project_id = project_id
        self.resource_list = resource_list
        self.resource_login_list = resource_login_list
        self.user = user
        self.nsf_status_code = nsf_status_code
        self.comment = comment
        self.start_date = start_date
        self.account_activity_time = account_activity_time
        self.role_list = role_list
    def factory(*args_, **kwargs_):
        if bodyType4.subclass:
            return bodyType4.subclass(*args_, **kwargs_)
        else:
            return bodyType4(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_project_id(self): return self.project_id
    def set_project_id(self, project_id): self.project_id = project_id
    def get_resource_list(self): return self.resource_list
    def set_resource_list(self, resource_list): self.resource_list = resource_list
    def get_resource_login_list(self): return self.resource_login_list
    def set_resource_login_list(self, resource_login_list): self.resource_login_list = resource_login_list
    def get_user(self): return self.user
    def set_user(self, user): self.user = user
    def get_nsf_status_code(self): return self.nsf_status_code
    def set_nsf_status_code(self, nsf_status_code): self.nsf_status_code = nsf_status_code
    def get_comment(self): return self.comment
    def set_comment(self, comment): self.comment = comment
    def get_start_date(self): return self.start_date
    def set_start_date(self, start_date): self.start_date = start_date
    def get_account_activity_time(self): return self.account_activity_time
    def set_account_activity_time(self, account_activity_time): self.account_activity_time = account_activity_time
    def get_role_list(self): return self.role_list
    def set_role_list(self, role_list): self.role_list = role_list
    def export(self, outfile, level, namespace_='', name_='bodyType4', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='bodyType4')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='bodyType4'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='bodyType4', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.project_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sproject_id>%s</%sproject_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.project_id).encode(ExternalEncoding), input_name='project_id'), namespace_, eol_))
        if self.resource_list is not None:
            self.resource_list.export(outfile, level, namespace_, name_='resource_list', pretty_print=pretty_print)
        if self.resource_login_list is not None:
            self.resource_login_list.export(outfile, level, namespace_, name_='resource_login_list', pretty_print=pretty_print)
        if self.user is not None:
            self.user.export(outfile, level, namespace_, name_='user', pretty_print=pretty_print)
        if self.nsf_status_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snsf_status_code>%s</%snsf_status_code>%s' % (namespace_, self.gds_format_string(quote_xml(self.nsf_status_code).encode(ExternalEncoding), input_name='nsf_status_code'), namespace_, eol_))
        if self.comment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scomment>%s</%scomment>%s' % (namespace_, self.gds_format_string(quote_xml(self.comment).encode(ExternalEncoding), input_name='comment'), namespace_, eol_))
        if self.start_date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstart_date>%s</%sstart_date>%s' % (namespace_, self.gds_format_string(quote_xml(self.start_date).encode(ExternalEncoding), input_name='start_date'), namespace_, eol_))
        if self.account_activity_time is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%saccount_activity_time>%s</%saccount_activity_time>%s' % (namespace_, self.gds_format_string(quote_xml(self.account_activity_time).encode(ExternalEncoding), input_name='account_activity_time'), namespace_, eol_))
        if self.role_list is not None:
            self.role_list.export(outfile, level, namespace_, name_='role_list', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.project_id is not None or
            self.resource_list is not None or
            self.resource_login_list is not None or
            self.user is not None or
            self.nsf_status_code is not None or
            self.comment is not None or
            self.start_date is not None or
            self.account_activity_time is not None or
            self.role_list is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='bodyType4'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.project_id is not None:
            showIndent(outfile, level)
            outfile.write('project_id=%s,\n' % quote_python(self.project_id).encode(ExternalEncoding))
        if self.resource_list is not None:
            showIndent(outfile, level)
            outfile.write('resource_list=model_.resource_listType3(\n')
            self.resource_list.exportLiteral(outfile, level, name_='resource_list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.resource_login_list is not None:
            showIndent(outfile, level)
            outfile.write('resource_login_list=model_.resource_login_listType1(\n')
            self.resource_login_list.exportLiteral(outfile, level, name_='resource_login_list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.user is not None:
            showIndent(outfile, level)
            outfile.write('user=model_.userType1(\n')
            self.user.exportLiteral(outfile, level, name_='user')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.nsf_status_code is not None:
            showIndent(outfile, level)
            outfile.write('nsf_status_code=%s,\n' % quote_python(self.nsf_status_code).encode(ExternalEncoding))
        if self.comment is not None:
            showIndent(outfile, level)
            outfile.write('comment=%s,\n' % quote_python(self.comment).encode(ExternalEncoding))
        if self.start_date is not None:
            showIndent(outfile, level)
            outfile.write('start_date=%s,\n' % quote_python(self.start_date).encode(ExternalEncoding))
        if self.account_activity_time is not None:
            showIndent(outfile, level)
            outfile.write('account_activity_time=%s,\n' % quote_python(self.account_activity_time).encode(ExternalEncoding))
        if self.role_list is not None:
            showIndent(outfile, level)
            outfile.write('role_list=model_.role_listType3(\n')
            self.role_list.exportLiteral(outfile, level, name_='role_list')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'project_id':
            project_id_ = child_.text
            project_id_ = self.gds_validate_string(project_id_, node, 'project_id')
            self.project_id = project_id_
        elif nodeName_ == 'resource_list':
            obj_ = resource_listType3.factory()
            obj_.build(child_)
            self.set_resource_list(obj_)
        elif nodeName_ == 'resource_login_list':
            obj_ = resource_login_listType1.factory()
            obj_.build(child_)
            self.set_resource_login_list(obj_)
        elif nodeName_ == 'user':
            obj_ = userType1.factory()
            obj_.build(child_)
            self.set_user(obj_)
        elif nodeName_ == 'nsf_status_code':
            nsf_status_code_ = child_.text
            nsf_status_code_ = self.gds_validate_string(nsf_status_code_, node, 'nsf_status_code')
            self.nsf_status_code = nsf_status_code_
        elif nodeName_ == 'comment':
            comment_ = child_.text
            comment_ = self.gds_validate_string(comment_, node, 'comment')
            self.comment = comment_
        elif nodeName_ == 'start_date':
            start_date_ = child_.text
            start_date_ = self.gds_validate_string(start_date_, node, 'start_date')
            self.start_date = start_date_
        elif nodeName_ == 'account_activity_time':
            account_activity_time_ = child_.text
            account_activity_time_ = self.gds_validate_string(account_activity_time_, node, 'account_activity_time')
            self.account_activity_time = account_activity_time_
        elif nodeName_ == 'role_list':
            obj_ = role_listType3.factory()
            obj_.build(child_)
            self.set_role_list(obj_)
# end class bodyType4


class resource_listType3(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, resource=None):
        if resource is None:
            self.resource = []
        else:
            self.resource = resource
    def factory(*args_, **kwargs_):
        if resource_listType3.subclass:
            return resource_listType3.subclass(*args_, **kwargs_)
        else:
            return resource_listType3(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_resource(self): return self.resource
    def set_resource(self, resource): self.resource = resource
    def add_resource(self, value): self.resource.append(value)
    def insert_resource(self, index, value): self.resource[index] = value
    def export(self, outfile, level, namespace_='', name_='resource_listType3', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='resource_listType3')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='resource_listType3'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='resource_listType3', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for resource_ in self.resource:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sresource>%s</%sresource>%s' % (namespace_, self.gds_format_string(quote_xml(resource_).encode(ExternalEncoding), input_name='resource'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.resource
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='resource_listType3'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('resource=[\n')
        level += 1
        for resource_ in self.resource:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(resource_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'resource':
            resource_ = child_.text
            resource_ = self.gds_validate_string(resource_, node, 'resource')
            self.resource.append(resource_)
# end class resource_listType3


class resource_login_listType1(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, resource_login=None):
        if resource_login is None:
            self.resource_login = []
        else:
            self.resource_login = resource_login
    def factory(*args_, **kwargs_):
        if resource_login_listType1.subclass:
            return resource_login_listType1.subclass(*args_, **kwargs_)
        else:
            return resource_login_listType1(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_resource_login(self): return self.resource_login
    def set_resource_login(self, resource_login): self.resource_login = resource_login
    def add_resource_login(self, value): self.resource_login.append(value)
    def insert_resource_login(self, index, value): self.resource_login[index] = value
    def export(self, outfile, level, namespace_='', name_='resource_login_listType1', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='resource_login_listType1')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='resource_login_listType1'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='resource_login_listType1', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for resource_login_ in self.resource_login:
            resource_login_.export(outfile, level, namespace_, name_='resource_login', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.resource_login
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='resource_login_listType1'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('resource_login=[\n')
        level += 1
        for resource_login_ in self.resource_login:
            showIndent(outfile, level)
            outfile.write('model_.resource_login_type(\n')
            resource_login_.exportLiteral(outfile, level, name_='resource_login_type')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'resource_login':
            obj_ = resource_login_type.factory()
            obj_.build(child_)
            self.resource_login.append(obj_)
# end class resource_login_listType1


class userType1(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, personal_info=None, password_access_enable=None, dn_list=None, notifier_login=None, remote_site_login=None, req_login_list=None, role=None):
        self.personal_info = personal_info
        self.password_access_enable = password_access_enable
        self.dn_list = dn_list
        self.notifier_login = notifier_login
        self.remote_site_login = remote_site_login
        self.req_login_list = req_login_list
        self.role = role
    def factory(*args_, **kwargs_):
        if userType1.subclass:
            return userType1.subclass(*args_, **kwargs_)
        else:
            return userType1(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_personal_info(self): return self.personal_info
    def set_personal_info(self, personal_info): self.personal_info = personal_info
    def get_password_access_enable(self): return self.password_access_enable
    def set_password_access_enable(self, password_access_enable): self.password_access_enable = password_access_enable
    def get_dn_list(self): return self.dn_list
    def set_dn_list(self, dn_list): self.dn_list = dn_list
    def get_notifier_login(self): return self.notifier_login
    def set_notifier_login(self, notifier_login): self.notifier_login = notifier_login
    def get_remote_site_login(self): return self.remote_site_login
    def set_remote_site_login(self, remote_site_login): self.remote_site_login = remote_site_login
    def get_req_login_list(self): return self.req_login_list
    def set_req_login_list(self, req_login_list): self.req_login_list = req_login_list
    def get_role(self): return self.role
    def set_role(self, role): self.role = role
    def export(self, outfile, level, namespace_='', name_='userType1', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='userType1')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='userType1'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='userType1', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.personal_info is not None:
            self.personal_info.export(outfile, level, namespace_, name_='personal_info', pretty_print=pretty_print)
        if self.password_access_enable is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spassword_access_enable>%s</%spassword_access_enable>%s' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.password_access_enable)), input_name='password_access_enable'), namespace_, eol_))
        if self.dn_list is not None:
            self.dn_list.export(outfile, level, namespace_, name_='dn_list', pretty_print=pretty_print)
        if self.notifier_login is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snotifier_login>%s</%snotifier_login>%s' % (namespace_, self.gds_format_string(quote_xml(self.notifier_login).encode(ExternalEncoding), input_name='notifier_login'), namespace_, eol_))
        if self.remote_site_login is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sremote_site_login>%s</%sremote_site_login>%s' % (namespace_, self.gds_format_string(quote_xml(self.remote_site_login).encode(ExternalEncoding), input_name='remote_site_login'), namespace_, eol_))
        if self.req_login_list is not None:
            self.req_login_list.export(outfile, level, namespace_, name_='req_login_list', pretty_print=pretty_print)
        if self.role is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srole>%s</%srole>%s' % (namespace_, self.gds_format_string(quote_xml(self.role).encode(ExternalEncoding), input_name='role'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.personal_info is not None or
            self.password_access_enable is not None or
            self.dn_list is not None or
            self.notifier_login is not None or
            self.remote_site_login is not None or
            self.req_login_list is not None or
            self.role is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='userType1'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.personal_info is not None:
            showIndent(outfile, level)
            outfile.write('personal_info=model_.person_type(\n')
            self.personal_info.exportLiteral(outfile, level, name_='personal_info')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.password_access_enable is not None:
            showIndent(outfile, level)
            outfile.write('password_access_enable=%s,\n' % self.password_access_enable)
        if self.dn_list is not None:
            showIndent(outfile, level)
            outfile.write('dn_list=model_.dn_listType4(\n')
            self.dn_list.exportLiteral(outfile, level, name_='dn_list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.notifier_login is not None:
            showIndent(outfile, level)
            outfile.write('notifier_login=%s,\n' % quote_python(self.notifier_login).encode(ExternalEncoding))
        if self.remote_site_login is not None:
            showIndent(outfile, level)
            outfile.write('remote_site_login=%s,\n' % quote_python(self.remote_site_login).encode(ExternalEncoding))
        if self.req_login_list is not None:
            showIndent(outfile, level)
            outfile.write('req_login_list=model_.req_login_listType3(\n')
            self.req_login_list.exportLiteral(outfile, level, name_='req_login_list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.role is not None:
            showIndent(outfile, level)
            outfile.write('role=%s,\n' % quote_python(self.role).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'personal_info':
            obj_ = person_type.factory()
            obj_.build(child_)
            self.set_personal_info(obj_)
        elif nodeName_ == 'password_access_enable':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'password_access_enable')
            self.password_access_enable = ival_
        elif nodeName_ == 'dn_list':
            obj_ = dn_listType4.factory()
            obj_.build(child_)
            self.set_dn_list(obj_)
        elif nodeName_ == 'notifier_login':
            notifier_login_ = child_.text
            notifier_login_ = self.gds_validate_string(notifier_login_, node, 'notifier_login')
            self.notifier_login = notifier_login_
        elif nodeName_ == 'remote_site_login':
            remote_site_login_ = child_.text
            remote_site_login_ = self.gds_validate_string(remote_site_login_, node, 'remote_site_login')
            self.remote_site_login = remote_site_login_
        elif nodeName_ == 'req_login_list':
            obj_ = req_login_listType3.factory()
            obj_.build(child_)
            self.set_req_login_list(obj_)
        elif nodeName_ == 'role':
            role_ = child_.text
            role_ = self.gds_validate_string(role_, node, 'role')
            self.role = role_
# end class userType1


class dn_listType4(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dn=None):
        if dn is None:
            self.dn = []
        else:
            self.dn = dn
    def factory(*args_, **kwargs_):
        if dn_listType4.subclass:
            return dn_listType4.subclass(*args_, **kwargs_)
        else:
            return dn_listType4(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dn(self): return self.dn
    def set_dn(self, dn): self.dn = dn
    def add_dn(self, value): self.dn.append(value)
    def insert_dn(self, index, value): self.dn[index] = value
    def export(self, outfile, level, namespace_='', name_='dn_listType4', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dn_listType4')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='dn_listType4'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='dn_listType4', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for dn_ in self.dn:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdn>%s</%sdn>%s' % (namespace_, self.gds_format_string(quote_xml(dn_).encode(ExternalEncoding), input_name='dn'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.dn
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='dn_listType4'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('dn=[\n')
        level += 1
        for dn_ in self.dn:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(dn_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dn':
            dn_ = child_.text
            dn_ = self.gds_validate_string(dn_, node, 'dn')
            self.dn.append(dn_)
# end class dn_listType4


class req_login_listType3(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, req_login=None):
        if req_login is None:
            self.req_login = []
        else:
            self.req_login = req_login
    def factory(*args_, **kwargs_):
        if req_login_listType3.subclass:
            return req_login_listType3.subclass(*args_, **kwargs_)
        else:
            return req_login_listType3(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_req_login(self): return self.req_login
    def set_req_login(self, req_login): self.req_login = req_login
    def add_req_login(self, value): self.req_login.append(value)
    def insert_req_login(self, index, value): self.req_login[index] = value
    def export(self, outfile, level, namespace_='', name_='req_login_listType3', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='req_login_listType3')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='req_login_listType3'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='req_login_listType3', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for req_login_ in self.req_login:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreq_login>%s</%sreq_login>%s' % (namespace_, self.gds_format_string(quote_xml(req_login_).encode(ExternalEncoding), input_name='req_login'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.req_login
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='req_login_listType3'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('req_login=[\n')
        level += 1
        for req_login_ in self.req_login:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(req_login_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'req_login':
            req_login_ = child_.text
            req_login_ = self.gds_validate_string(req_login_, node, 'req_login')
            self.req_login.append(req_login_)
# end class req_login_listType3


class role_listType3(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, role=None):
        if role is None:
            self.role = []
        else:
            self.role = role
    def factory(*args_, **kwargs_):
        if role_listType3.subclass:
            return role_listType3.subclass(*args_, **kwargs_)
        else:
            return role_listType3(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_role(self): return self.role
    def set_role(self, role): self.role = role
    def add_role(self, value): self.role.append(value)
    def insert_role(self, index, value): self.role[index] = value
    def export(self, outfile, level, namespace_='', name_='role_listType3', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='role_listType3')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='role_listType3'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='role_listType3', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for role_ in self.role:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srole>%s</%srole>%s' % (namespace_, self.gds_format_string(quote_xml(role_).encode(ExternalEncoding), input_name='role'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.role
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='role_listType3'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('role=[\n')
        level += 1
        for role_ in self.role:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(role_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'role':
            role_ = child_.text
            role_ = self.gds_validate_string(role_, node, 'role')
            self.role.append(role_)
# end class role_listType3


class data_account_createType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, header=None, body=None):
        self.header = header
        self.body = body
    def factory(*args_, **kwargs_):
        if data_account_createType.subclass:
            return data_account_createType.subclass(*args_, **kwargs_)
        else:
            return data_account_createType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_header(self): return self.header
    def set_header(self, header): self.header = header
    def get_body(self): return self.body
    def set_body(self, body): self.body = body
    def export(self, outfile, level, namespace_='', name_='data_account_createType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='data_account_createType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='data_account_createType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='data_account_createType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.header is not None:
            self.header.export(outfile, level, namespace_, name_='header', pretty_print=pretty_print)
        if self.body is not None:
            self.body.export(outfile, level, namespace_, name_='body', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.header is not None or
            self.body is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='data_account_createType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.header is not None:
            showIndent(outfile, level)
            outfile.write('header=model_.header_type(\n')
            self.header.exportLiteral(outfile, level, name_='header')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.body is not None:
            showIndent(outfile, level)
            outfile.write('body=model_.bodyType5(\n')
            self.body.exportLiteral(outfile, level, name_='body')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'header':
            obj_ = header_type.factory()
            obj_.build(child_)
            self.set_header(obj_)
        elif nodeName_ == 'body':
            obj_ = bodyType5.factory()
            obj_.build(child_)
            self.set_body(obj_)
# end class data_account_createType


class bodyType5(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dn_list=None, project_id=None, person_id=None, comment=None):
        self.dn_list = dn_list
        self.project_id = project_id
        self.person_id = person_id
        self.comment = comment
    def factory(*args_, **kwargs_):
        if bodyType5.subclass:
            return bodyType5.subclass(*args_, **kwargs_)
        else:
            return bodyType5(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dn_list(self): return self.dn_list
    def set_dn_list(self, dn_list): self.dn_list = dn_list
    def get_project_id(self): return self.project_id
    def set_project_id(self, project_id): self.project_id = project_id
    def get_person_id(self): return self.person_id
    def set_person_id(self, person_id): self.person_id = person_id
    def get_comment(self): return self.comment
    def set_comment(self, comment): self.comment = comment
    def export(self, outfile, level, namespace_='', name_='bodyType5', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='bodyType5')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='bodyType5'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='bodyType5', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.dn_list is not None:
            self.dn_list.export(outfile, level, namespace_, name_='dn_list', pretty_print=pretty_print)
        if self.project_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sproject_id>%s</%sproject_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.project_id).encode(ExternalEncoding), input_name='project_id'), namespace_, eol_))
        if self.person_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sperson_id>%s</%sperson_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.person_id).encode(ExternalEncoding), input_name='person_id'), namespace_, eol_))
        if self.comment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scomment>%s</%scomment>%s' % (namespace_, self.gds_format_string(quote_xml(self.comment).encode(ExternalEncoding), input_name='comment'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.dn_list is not None or
            self.project_id is not None or
            self.person_id is not None or
            self.comment is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='bodyType5'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.dn_list is not None:
            showIndent(outfile, level)
            outfile.write('dn_list=model_.dn_listType5(\n')
            self.dn_list.exportLiteral(outfile, level, name_='dn_list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.project_id is not None:
            showIndent(outfile, level)
            outfile.write('project_id=%s,\n' % quote_python(self.project_id).encode(ExternalEncoding))
        if self.person_id is not None:
            showIndent(outfile, level)
            outfile.write('person_id=%s,\n' % quote_python(self.person_id).encode(ExternalEncoding))
        if self.comment is not None:
            showIndent(outfile, level)
            outfile.write('comment=%s,\n' % quote_python(self.comment).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dn_list':
            obj_ = dn_listType5.factory()
            obj_.build(child_)
            self.set_dn_list(obj_)
        elif nodeName_ == 'project_id':
            project_id_ = child_.text
            project_id_ = self.gds_validate_string(project_id_, node, 'project_id')
            self.project_id = project_id_
        elif nodeName_ == 'person_id':
            person_id_ = child_.text
            person_id_ = self.gds_validate_string(person_id_, node, 'person_id')
            self.person_id = person_id_
        elif nodeName_ == 'comment':
            comment_ = child_.text
            comment_ = self.gds_validate_string(comment_, node, 'comment')
            self.comment = comment_
# end class bodyType5


class dn_listType5(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dn=None):
        if dn is None:
            self.dn = []
        else:
            self.dn = dn
    def factory(*args_, **kwargs_):
        if dn_listType5.subclass:
            return dn_listType5.subclass(*args_, **kwargs_)
        else:
            return dn_listType5(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dn(self): return self.dn
    def set_dn(self, dn): self.dn = dn
    def add_dn(self, value): self.dn.append(value)
    def insert_dn(self, index, value): self.dn[index] = value
    def export(self, outfile, level, namespace_='', name_='dn_listType5', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dn_listType5')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='dn_listType5'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='dn_listType5', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for dn_ in self.dn:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdn>%s</%sdn>%s' % (namespace_, self.gds_format_string(quote_xml(dn_).encode(ExternalEncoding), input_name='dn'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.dn
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='dn_listType5'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('dn=[\n')
        level += 1
        for dn_ in self.dn:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(dn_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dn':
            dn_ = child_.text
            dn_ = self.gds_validate_string(dn_, node, 'dn')
            self.dn.append(dn_)
# end class dn_listType5


class request_project_resourcesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, header=None, body=None):
        self.header = header
        self.body = body
    def factory(*args_, **kwargs_):
        if request_project_resourcesType.subclass:
            return request_project_resourcesType.subclass(*args_, **kwargs_)
        else:
            return request_project_resourcesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_header(self): return self.header
    def set_header(self, header): self.header = header
    def get_body(self): return self.body
    def set_body(self, body): self.body = body
    def export(self, outfile, level, namespace_='', name_='request_project_resourcesType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='request_project_resourcesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='request_project_resourcesType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='request_project_resourcesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.header is not None:
            self.header.export(outfile, level, namespace_, name_='header', pretty_print=pretty_print)
        if self.body is not None:
            self.body.export(outfile, level, namespace_, name_='body', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.header is not None or
            self.body is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='request_project_resourcesType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.header is not None:
            showIndent(outfile, level)
            outfile.write('header=model_.header_type(\n')
            self.header.exportLiteral(outfile, level, name_='header')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.body is not None:
            showIndent(outfile, level)
            outfile.write('body=model_.bodyType6(\n')
            self.body.exportLiteral(outfile, level, name_='body')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'header':
            obj_ = header_type.factory()
            obj_.build(child_)
            self.set_header(obj_)
        elif nodeName_ == 'body':
            obj_ = bodyType6.factory()
            obj_.build(child_)
            self.set_body(obj_)
# end class request_project_resourcesType


class bodyType6(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, project_id=None, resource_list=None, changed_field_option=None, comment=None):
        self.project_id = project_id
        self.resource_list = resource_list
        self.changed_field_option = changed_field_option
        self.comment = comment
    def factory(*args_, **kwargs_):
        if bodyType6.subclass:
            return bodyType6.subclass(*args_, **kwargs_)
        else:
            return bodyType6(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_project_id(self): return self.project_id
    def set_project_id(self, project_id): self.project_id = project_id
    def get_resource_list(self): return self.resource_list
    def set_resource_list(self, resource_list): self.resource_list = resource_list
    def get_changed_field_option(self): return self.changed_field_option
    def set_changed_field_option(self, changed_field_option): self.changed_field_option = changed_field_option
    def get_comment(self): return self.comment
    def set_comment(self, comment): self.comment = comment
    def export(self, outfile, level, namespace_='', name_='bodyType6', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='bodyType6')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='bodyType6'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='bodyType6', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.project_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sproject_id>%s</%sproject_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.project_id).encode(ExternalEncoding), input_name='project_id'), namespace_, eol_))
        if self.resource_list is not None:
            self.resource_list.export(outfile, level, namespace_, name_='resource_list', pretty_print=pretty_print)
        if self.changed_field_option is not None:
            self.changed_field_option.export(outfile, level, namespace_, name_='changed_field_option', pretty_print=pretty_print)
        if self.comment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scomment>%s</%scomment>%s' % (namespace_, self.gds_format_string(quote_xml(self.comment).encode(ExternalEncoding), input_name='comment'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.project_id is not None or
            self.resource_list is not None or
            self.changed_field_option is not None or
            self.comment is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='bodyType6'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.project_id is not None:
            showIndent(outfile, level)
            outfile.write('project_id=%s,\n' % quote_python(self.project_id).encode(ExternalEncoding))
        if self.resource_list is not None:
            showIndent(outfile, level)
            outfile.write('resource_list=model_.resource_listType4(\n')
            self.resource_list.exportLiteral(outfile, level, name_='resource_list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.changed_field_option is not None:
            showIndent(outfile, level)
            outfile.write('changed_field_option=model_.changed_field_optionType(\n')
            self.changed_field_option.exportLiteral(outfile, level, name_='changed_field_option')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.comment is not None:
            showIndent(outfile, level)
            outfile.write('comment=%s,\n' % quote_python(self.comment).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'project_id':
            project_id_ = child_.text
            project_id_ = self.gds_validate_string(project_id_, node, 'project_id')
            self.project_id = project_id_
        elif nodeName_ == 'resource_list':
            obj_ = resource_listType4.factory()
            obj_.build(child_)
            self.set_resource_list(obj_)
        elif nodeName_ == 'changed_field_option':
            obj_ = changed_field_optionType.factory()
            obj_.build(child_)
            self.set_changed_field_option(obj_)
        elif nodeName_ == 'comment':
            comment_ = child_.text
            comment_ = self.gds_validate_string(comment_, node, 'comment')
            self.comment = comment_
# end class bodyType6


class resource_listType4(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, resource=None):
        if resource is None:
            self.resource = []
        else:
            self.resource = resource
    def factory(*args_, **kwargs_):
        if resource_listType4.subclass:
            return resource_listType4.subclass(*args_, **kwargs_)
        else:
            return resource_listType4(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_resource(self): return self.resource
    def set_resource(self, resource): self.resource = resource
    def add_resource(self, value): self.resource.append(value)
    def insert_resource(self, index, value): self.resource[index] = value
    def export(self, outfile, level, namespace_='', name_='resource_listType4', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='resource_listType4')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='resource_listType4'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='resource_listType4', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for resource_ in self.resource:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sresource>%s</%sresource>%s' % (namespace_, self.gds_format_string(quote_xml(resource_).encode(ExternalEncoding), input_name='resource'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.resource
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='resource_listType4'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('resource=[\n')
        level += 1
        for resource_ in self.resource:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(resource_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'resource':
            resource_ = child_.text
            resource_ = self.gds_validate_string(resource_, node, 'resource')
            self.resource.append(resource_)
# end class resource_listType4


class changed_field_optionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, su_alloc_info=None, end_date=None):
        self.su_alloc_info = su_alloc_info
        self.end_date = end_date
    def factory(*args_, **kwargs_):
        if changed_field_optionType.subclass:
            return changed_field_optionType.subclass(*args_, **kwargs_)
        else:
            return changed_field_optionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_su_alloc_info(self): return self.su_alloc_info
    def set_su_alloc_info(self, su_alloc_info): self.su_alloc_info = su_alloc_info
    def get_end_date(self): return self.end_date
    def set_end_date(self, end_date): self.end_date = end_date
    def export(self, outfile, level, namespace_='', name_='changed_field_optionType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='changed_field_optionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='changed_field_optionType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='changed_field_optionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.su_alloc_info is not None:
            self.su_alloc_info.export(outfile, level, namespace_, name_='su_alloc_info', pretty_print=pretty_print)
        if self.end_date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%send_date>%s</%send_date>%s' % (namespace_, self.gds_format_string(quote_xml(self.end_date).encode(ExternalEncoding), input_name='end_date'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.su_alloc_info is not None or
            self.end_date is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='changed_field_optionType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.su_alloc_info is not None:
            showIndent(outfile, level)
            outfile.write('su_alloc_info=model_.su_alloc_infoType(\n')
            self.su_alloc_info.exportLiteral(outfile, level, name_='su_alloc_info')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.end_date is not None:
            showIndent(outfile, level)
            outfile.write('end_date=%s,\n' % quote_python(self.end_date).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'su_alloc_info':
            obj_ = su_alloc_infoType.factory()
            obj_.build(child_)
            self.set_su_alloc_info(obj_)
        elif nodeName_ == 'end_date':
            end_date_ = child_.text
            end_date_ = self.gds_validate_string(end_date_, node, 'end_date')
            self.end_date = end_date_
# end class changed_field_optionType


class su_alloc_infoType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, su_alloc=None, alloc_change=None, effective_date=None):
        self.su_alloc = su_alloc
        self.alloc_change = alloc_change
        self.effective_date = effective_date
    def factory(*args_, **kwargs_):
        if su_alloc_infoType.subclass:
            return su_alloc_infoType.subclass(*args_, **kwargs_)
        else:
            return su_alloc_infoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_su_alloc(self): return self.su_alloc
    def set_su_alloc(self, su_alloc): self.su_alloc = su_alloc
    def get_alloc_change(self): return self.alloc_change
    def set_alloc_change(self, alloc_change): self.alloc_change = alloc_change
    def validate_allocation_change_type(self, value):
        # Validate type allocation_change_type, a restriction on xs:string.
        pass
    def get_effective_date(self): return self.effective_date
    def set_effective_date(self, effective_date): self.effective_date = effective_date
    def export(self, outfile, level, namespace_='', name_='su_alloc_infoType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='su_alloc_infoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='su_alloc_infoType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='su_alloc_infoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.su_alloc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssu_alloc>%s</%ssu_alloc>%s' % (namespace_, self.gds_format_float(self.su_alloc, input_name='su_alloc'), namespace_, eol_))
        if self.alloc_change is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%salloc_change>%s</%salloc_change>%s' % (namespace_, self.gds_format_string(quote_xml(self.alloc_change).encode(ExternalEncoding), input_name='alloc_change'), namespace_, eol_))
        if self.effective_date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%seffective_date>%s</%seffective_date>%s' % (namespace_, self.gds_format_string(quote_xml(self.effective_date).encode(ExternalEncoding), input_name='effective_date'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.su_alloc is not None or
            self.alloc_change is not None or
            self.effective_date is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='su_alloc_infoType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.su_alloc is not None:
            showIndent(outfile, level)
            outfile.write('su_alloc=%f,\n' % self.su_alloc)
        if self.alloc_change is not None:
            showIndent(outfile, level)
            outfile.write('alloc_change=%s,\n' % quote_python(self.alloc_change).encode(ExternalEncoding))
        if self.effective_date is not None:
            showIndent(outfile, level)
            outfile.write('effective_date=%s,\n' % quote_python(self.effective_date).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'su_alloc':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'su_alloc')
            self.su_alloc = fval_
        elif nodeName_ == 'alloc_change':
            alloc_change_ = child_.text
            alloc_change_ = self.gds_validate_string(alloc_change_, node, 'alloc_change')
            self.alloc_change = alloc_change_
            self.validate_allocation_change_type(self.alloc_change)    # validate type allocation_change_type
        elif nodeName_ == 'effective_date':
            effective_date_ = child_.text
            effective_date_ = self.gds_validate_string(effective_date_, node, 'effective_date')
            self.effective_date = effective_date_
# end class su_alloc_infoType


class notify_project_resourcesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, header=None, body=None):
        self.header = header
        self.body = body
    def factory(*args_, **kwargs_):
        if notify_project_resourcesType.subclass:
            return notify_project_resourcesType.subclass(*args_, **kwargs_)
        else:
            return notify_project_resourcesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_header(self): return self.header
    def set_header(self, header): self.header = header
    def get_body(self): return self.body
    def set_body(self, body): self.body = body
    def export(self, outfile, level, namespace_='', name_='notify_project_resourcesType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='notify_project_resourcesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='notify_project_resourcesType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='notify_project_resourcesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.header is not None:
            self.header.export(outfile, level, namespace_, name_='header', pretty_print=pretty_print)
        if self.body is not None:
            self.body.export(outfile, level, namespace_, name_='body', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.header is not None or
            self.body is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='notify_project_resourcesType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.header is not None:
            showIndent(outfile, level)
            outfile.write('header=model_.header_type(\n')
            self.header.exportLiteral(outfile, level, name_='header')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.body is not None:
            showIndent(outfile, level)
            outfile.write('body=model_.bodyType7(\n')
            self.body.exportLiteral(outfile, level, name_='body')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'header':
            obj_ = header_type.factory()
            obj_.build(child_)
            self.set_header(obj_)
        elif nodeName_ == 'body':
            obj_ = bodyType7.factory()
            obj_.build(child_)
            self.set_body(obj_)
# end class notify_project_resourcesType


class bodyType7(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, project_id=None, resource_list=None, changed_field_option=None, comment=None):
        self.project_id = project_id
        self.resource_list = resource_list
        self.changed_field_option = changed_field_option
        self.comment = comment
    def factory(*args_, **kwargs_):
        if bodyType7.subclass:
            return bodyType7.subclass(*args_, **kwargs_)
        else:
            return bodyType7(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_project_id(self): return self.project_id
    def set_project_id(self, project_id): self.project_id = project_id
    def get_resource_list(self): return self.resource_list
    def set_resource_list(self, resource_list): self.resource_list = resource_list
    def get_changed_field_option(self): return self.changed_field_option
    def set_changed_field_option(self, changed_field_option): self.changed_field_option = changed_field_option
    def get_comment(self): return self.comment
    def set_comment(self, comment): self.comment = comment
    def export(self, outfile, level, namespace_='', name_='bodyType7', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='bodyType7')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='bodyType7'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='bodyType7', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.project_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sproject_id>%s</%sproject_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.project_id).encode(ExternalEncoding), input_name='project_id'), namespace_, eol_))
        if self.resource_list is not None:
            self.resource_list.export(outfile, level, namespace_, name_='resource_list', pretty_print=pretty_print)
        if self.changed_field_option is not None:
            self.changed_field_option.export(outfile, level, namespace_, name_='changed_field_option', pretty_print=pretty_print)
        if self.comment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scomment>%s</%scomment>%s' % (namespace_, self.gds_format_string(quote_xml(self.comment).encode(ExternalEncoding), input_name='comment'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.project_id is not None or
            self.resource_list is not None or
            self.changed_field_option is not None or
            self.comment is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='bodyType7'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.project_id is not None:
            showIndent(outfile, level)
            outfile.write('project_id=%s,\n' % quote_python(self.project_id).encode(ExternalEncoding))
        if self.resource_list is not None:
            showIndent(outfile, level)
            outfile.write('resource_list=model_.resource_listType5(\n')
            self.resource_list.exportLiteral(outfile, level, name_='resource_list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.changed_field_option is not None:
            showIndent(outfile, level)
            outfile.write('changed_field_option=model_.changed_field_optionType1(\n')
            self.changed_field_option.exportLiteral(outfile, level, name_='changed_field_option')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.comment is not None:
            showIndent(outfile, level)
            outfile.write('comment=%s,\n' % quote_python(self.comment).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'project_id':
            project_id_ = child_.text
            project_id_ = self.gds_validate_string(project_id_, node, 'project_id')
            self.project_id = project_id_
        elif nodeName_ == 'resource_list':
            obj_ = resource_listType5.factory()
            obj_.build(child_)
            self.set_resource_list(obj_)
        elif nodeName_ == 'changed_field_option':
            obj_ = changed_field_optionType1.factory()
            obj_.build(child_)
            self.set_changed_field_option(obj_)
        elif nodeName_ == 'comment':
            comment_ = child_.text
            comment_ = self.gds_validate_string(comment_, node, 'comment')
            self.comment = comment_
# end class bodyType7


class resource_listType5(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, resource=None):
        if resource is None:
            self.resource = []
        else:
            self.resource = resource
    def factory(*args_, **kwargs_):
        if resource_listType5.subclass:
            return resource_listType5.subclass(*args_, **kwargs_)
        else:
            return resource_listType5(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_resource(self): return self.resource
    def set_resource(self, resource): self.resource = resource
    def add_resource(self, value): self.resource.append(value)
    def insert_resource(self, index, value): self.resource[index] = value
    def export(self, outfile, level, namespace_='', name_='resource_listType5', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='resource_listType5')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='resource_listType5'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='resource_listType5', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for resource_ in self.resource:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sresource>%s</%sresource>%s' % (namespace_, self.gds_format_string(quote_xml(resource_).encode(ExternalEncoding), input_name='resource'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.resource
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='resource_listType5'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('resource=[\n')
        level += 1
        for resource_ in self.resource:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(resource_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'resource':
            resource_ = child_.text
            resource_ = self.gds_validate_string(resource_, node, 'resource')
            self.resource.append(resource_)
# end class resource_listType5


class changed_field_optionType1(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, su_alloc_info=None, end_date=None):
        self.su_alloc_info = su_alloc_info
        self.end_date = end_date
    def factory(*args_, **kwargs_):
        if changed_field_optionType1.subclass:
            return changed_field_optionType1.subclass(*args_, **kwargs_)
        else:
            return changed_field_optionType1(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_su_alloc_info(self): return self.su_alloc_info
    def set_su_alloc_info(self, su_alloc_info): self.su_alloc_info = su_alloc_info
    def get_end_date(self): return self.end_date
    def set_end_date(self, end_date): self.end_date = end_date
    def export(self, outfile, level, namespace_='', name_='changed_field_optionType1', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='changed_field_optionType1')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='changed_field_optionType1'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='changed_field_optionType1', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.su_alloc_info is not None:
            self.su_alloc_info.export(outfile, level, namespace_, name_='su_alloc_info', pretty_print=pretty_print)
        if self.end_date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%send_date>%s</%send_date>%s' % (namespace_, self.gds_format_string(quote_xml(self.end_date).encode(ExternalEncoding), input_name='end_date'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.su_alloc_info is not None or
            self.end_date is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='changed_field_optionType1'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.su_alloc_info is not None:
            showIndent(outfile, level)
            outfile.write('su_alloc_info=model_.su_alloc_infoType1(\n')
            self.su_alloc_info.exportLiteral(outfile, level, name_='su_alloc_info')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.end_date is not None:
            showIndent(outfile, level)
            outfile.write('end_date=%s,\n' % quote_python(self.end_date).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'su_alloc_info':
            obj_ = su_alloc_infoType1.factory()
            obj_.build(child_)
            self.set_su_alloc_info(obj_)
        elif nodeName_ == 'end_date':
            end_date_ = child_.text
            end_date_ = self.gds_validate_string(end_date_, node, 'end_date')
            self.end_date = end_date_
# end class changed_field_optionType1


class su_alloc_infoType1(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, su_alloc=None, alloc_change=None, effective_date=None):
        self.su_alloc = su_alloc
        self.alloc_change = alloc_change
        self.effective_date = effective_date
    def factory(*args_, **kwargs_):
        if su_alloc_infoType1.subclass:
            return su_alloc_infoType1.subclass(*args_, **kwargs_)
        else:
            return su_alloc_infoType1(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_su_alloc(self): return self.su_alloc
    def set_su_alloc(self, su_alloc): self.su_alloc = su_alloc
    def get_alloc_change(self): return self.alloc_change
    def set_alloc_change(self, alloc_change): self.alloc_change = alloc_change
    def validate_allocation_change_type(self, value):
        # Validate type allocation_change_type, a restriction on xs:string.
        pass
    def get_effective_date(self): return self.effective_date
    def set_effective_date(self, effective_date): self.effective_date = effective_date
    def export(self, outfile, level, namespace_='', name_='su_alloc_infoType1', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='su_alloc_infoType1')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='su_alloc_infoType1'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='su_alloc_infoType1', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.su_alloc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssu_alloc>%s</%ssu_alloc>%s' % (namespace_, self.gds_format_float(self.su_alloc, input_name='su_alloc'), namespace_, eol_))
        if self.alloc_change is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%salloc_change>%s</%salloc_change>%s' % (namespace_, self.gds_format_string(quote_xml(self.alloc_change).encode(ExternalEncoding), input_name='alloc_change'), namespace_, eol_))
        if self.effective_date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%seffective_date>%s</%seffective_date>%s' % (namespace_, self.gds_format_string(quote_xml(self.effective_date).encode(ExternalEncoding), input_name='effective_date'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.su_alloc is not None or
            self.alloc_change is not None or
            self.effective_date is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='su_alloc_infoType1'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.su_alloc is not None:
            showIndent(outfile, level)
            outfile.write('su_alloc=%f,\n' % self.su_alloc)
        if self.alloc_change is not None:
            showIndent(outfile, level)
            outfile.write('alloc_change=%s,\n' % quote_python(self.alloc_change).encode(ExternalEncoding))
        if self.effective_date is not None:
            showIndent(outfile, level)
            outfile.write('effective_date=%s,\n' % quote_python(self.effective_date).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'su_alloc':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'su_alloc')
            self.su_alloc = fval_
        elif nodeName_ == 'alloc_change':
            alloc_change_ = child_.text
            alloc_change_ = self.gds_validate_string(alloc_change_, node, 'alloc_change')
            self.alloc_change = alloc_change_
            self.validate_allocation_change_type(self.alloc_change)    # validate type allocation_change_type
        elif nodeName_ == 'effective_date':
            effective_date_ = child_.text
            effective_date_ = self.gds_validate_string(effective_date_, node, 'effective_date')
            self.effective_date = effective_date_
# end class su_alloc_infoType1


class request_project_modifyType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, header=None, body=None):
        self.header = header
        self.body = body
    def factory(*args_, **kwargs_):
        if request_project_modifyType.subclass:
            return request_project_modifyType.subclass(*args_, **kwargs_)
        else:
            return request_project_modifyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_header(self): return self.header
    def set_header(self, header): self.header = header
    def get_body(self): return self.body
    def set_body(self, body): self.body = body
    def export(self, outfile, level, namespace_='', name_='request_project_modifyType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='request_project_modifyType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='request_project_modifyType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='request_project_modifyType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.header is not None:
            self.header.export(outfile, level, namespace_, name_='header', pretty_print=pretty_print)
        if self.body is not None:
            self.body.export(outfile, level, namespace_, name_='body', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.header is not None or
            self.body is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='request_project_modifyType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.header is not None:
            showIndent(outfile, level)
            outfile.write('header=model_.header_type(\n')
            self.header.exportLiteral(outfile, level, name_='header')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.body is not None:
            showIndent(outfile, level)
            outfile.write('body=model_.bodyType8(\n')
            self.body.exportLiteral(outfile, level, name_='body')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'header':
            obj_ = header_type.factory()
            obj_.build(child_)
            self.set_header(obj_)
        elif nodeName_ == 'body':
            obj_ = bodyType8.factory()
            obj_.build(child_)
            self.set_body(obj_)
# end class request_project_modifyType


class bodyType8(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, action_type=None, project_id=None, resource_list=None, project_title=None, pfos=None, sfos_list=None, abstract=None, sector=None, qualifications=None, methodologies=None, support=None, other_resources=None, statement_work=None, background=None, justification=None, deliverables=None, milestones=None, progress=None, facilities=None, languages=None, applications=None, diskspace=None, memory=None, processors=None, comment=None, pi_person_id=None):
        self.action_type = action_type
        self.project_id = project_id
        self.resource_list = resource_list
        self.project_title = project_title
        self.pfos = pfos
        self.sfos_list = sfos_list
        self.abstract = abstract
        self.sector = sector
        self.qualifications = qualifications
        self.methodologies = methodologies
        self.support = support
        self.other_resources = other_resources
        self.statement_work = statement_work
        self.background = background
        self.justification = justification
        self.deliverables = deliverables
        self.milestones = milestones
        self.progress = progress
        self.facilities = facilities
        self.languages = languages
        self.applications = applications
        self.diskspace = diskspace
        self.memory = memory
        self.processors = processors
        self.comment = comment
        self.pi_person_id = pi_person_id
    def factory(*args_, **kwargs_):
        if bodyType8.subclass:
            return bodyType8.subclass(*args_, **kwargs_)
        else:
            return bodyType8(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_action_type(self): return self.action_type
    def set_action_type(self, action_type): self.action_type = action_type
    def validate_modify_action_type(self, value):
        # Validate type modify_action_type, a restriction on xs:normalizedString.
        pass
    def get_project_id(self): return self.project_id
    def set_project_id(self, project_id): self.project_id = project_id
    def get_resource_list(self): return self.resource_list
    def set_resource_list(self, resource_list): self.resource_list = resource_list
    def get_project_title(self): return self.project_title
    def set_project_title(self, project_title): self.project_title = project_title
    def get_pfos(self): return self.pfos
    def set_pfos(self, pfos): self.pfos = pfos
    def get_sfos_list(self): return self.sfos_list
    def set_sfos_list(self, sfos_list): self.sfos_list = sfos_list
    def get_abstract(self): return self.abstract
    def set_abstract(self, abstract): self.abstract = abstract
    def get_sector(self): return self.sector
    def set_sector(self, sector): self.sector = sector
    def get_qualifications(self): return self.qualifications
    def set_qualifications(self, qualifications): self.qualifications = qualifications
    def get_methodologies(self): return self.methodologies
    def set_methodologies(self, methodologies): self.methodologies = methodologies
    def get_support(self): return self.support
    def set_support(self, support): self.support = support
    def get_other_resources(self): return self.other_resources
    def set_other_resources(self, other_resources): self.other_resources = other_resources
    def get_statement_work(self): return self.statement_work
    def set_statement_work(self, statement_work): self.statement_work = statement_work
    def get_background(self): return self.background
    def set_background(self, background): self.background = background
    def get_justification(self): return self.justification
    def set_justification(self, justification): self.justification = justification
    def get_deliverables(self): return self.deliverables
    def set_deliverables(self, deliverables): self.deliverables = deliverables
    def get_milestones(self): return self.milestones
    def set_milestones(self, milestones): self.milestones = milestones
    def get_progress(self): return self.progress
    def set_progress(self, progress): self.progress = progress
    def get_facilities(self): return self.facilities
    def set_facilities(self, facilities): self.facilities = facilities
    def get_languages(self): return self.languages
    def set_languages(self, languages): self.languages = languages
    def get_applications(self): return self.applications
    def set_applications(self, applications): self.applications = applications
    def get_diskspace(self): return self.diskspace
    def set_diskspace(self, diskspace): self.diskspace = diskspace
    def get_memory(self): return self.memory
    def set_memory(self, memory): self.memory = memory
    def get_processors(self): return self.processors
    def set_processors(self, processors): self.processors = processors
    def get_comment(self): return self.comment
    def set_comment(self, comment): self.comment = comment
    def get_pi_person_id(self): return self.pi_person_id
    def set_pi_person_id(self, pi_person_id): self.pi_person_id = pi_person_id
    def export(self, outfile, level, namespace_='', name_='bodyType8', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='bodyType8')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='bodyType8'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='bodyType8', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.action_type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%saction_type>%s</%saction_type>%s' % (namespace_, self.gds_format_string(quote_xml(self.action_type).encode(ExternalEncoding), input_name='action_type'), namespace_, eol_))
        if self.project_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sproject_id>%s</%sproject_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.project_id).encode(ExternalEncoding), input_name='project_id'), namespace_, eol_))
        if self.resource_list is not None:
            self.resource_list.export(outfile, level, namespace_, name_='resource_list', pretty_print=pretty_print)
        if self.project_title is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sproject_title>%s</%sproject_title>%s' % (namespace_, self.gds_format_string(quote_xml(self.project_title).encode(ExternalEncoding), input_name='project_title'), namespace_, eol_))
        if self.pfos is not None:
            self.pfos.export(outfile, level, namespace_, name_='pfos', pretty_print=pretty_print)
        if self.sfos_list is not None:
            self.sfos_list.export(outfile, level, namespace_, name_='sfos_list', pretty_print=pretty_print)
        if self.abstract is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sabstract>%s</%sabstract>%s' % (namespace_, self.gds_format_string(quote_xml(self.abstract).encode(ExternalEncoding), input_name='abstract'), namespace_, eol_))
        if self.sector is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssector>%s</%ssector>%s' % (namespace_, self.gds_format_string(quote_xml(self.sector).encode(ExternalEncoding), input_name='sector'), namespace_, eol_))
        if self.qualifications is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%squalifications>%s</%squalifications>%s' % (namespace_, self.gds_format_string(quote_xml(self.qualifications).encode(ExternalEncoding), input_name='qualifications'), namespace_, eol_))
        if self.methodologies is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smethodologies>%s</%smethodologies>%s' % (namespace_, self.gds_format_string(quote_xml(self.methodologies).encode(ExternalEncoding), input_name='methodologies'), namespace_, eol_))
        if self.support is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssupport>%s</%ssupport>%s' % (namespace_, self.gds_format_string(quote_xml(self.support).encode(ExternalEncoding), input_name='support'), namespace_, eol_))
        if self.other_resources is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sother_resources>%s</%sother_resources>%s' % (namespace_, self.gds_format_string(quote_xml(self.other_resources).encode(ExternalEncoding), input_name='other_resources'), namespace_, eol_))
        if self.statement_work is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstatement_work>%s</%sstatement_work>%s' % (namespace_, self.gds_format_string(quote_xml(self.statement_work).encode(ExternalEncoding), input_name='statement_work'), namespace_, eol_))
        if self.background is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sbackground>%s</%sbackground>%s' % (namespace_, self.gds_format_string(quote_xml(self.background).encode(ExternalEncoding), input_name='background'), namespace_, eol_))
        if self.justification is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sjustification>%s</%sjustification>%s' % (namespace_, self.gds_format_string(quote_xml(self.justification).encode(ExternalEncoding), input_name='justification'), namespace_, eol_))
        if self.deliverables is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdeliverables>%s</%sdeliverables>%s' % (namespace_, self.gds_format_string(quote_xml(self.deliverables).encode(ExternalEncoding), input_name='deliverables'), namespace_, eol_))
        if self.milestones is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smilestones>%s</%smilestones>%s' % (namespace_, self.gds_format_string(quote_xml(self.milestones).encode(ExternalEncoding), input_name='milestones'), namespace_, eol_))
        if self.progress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sprogress>%s</%sprogress>%s' % (namespace_, self.gds_format_string(quote_xml(self.progress).encode(ExternalEncoding), input_name='progress'), namespace_, eol_))
        if self.facilities is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfacilities>%s</%sfacilities>%s' % (namespace_, self.gds_format_string(quote_xml(self.facilities).encode(ExternalEncoding), input_name='facilities'), namespace_, eol_))
        if self.languages is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slanguages>%s</%slanguages>%s' % (namespace_, self.gds_format_string(quote_xml(self.languages).encode(ExternalEncoding), input_name='languages'), namespace_, eol_))
        if self.applications is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sapplications>%s</%sapplications>%s' % (namespace_, self.gds_format_string(quote_xml(self.applications).encode(ExternalEncoding), input_name='applications'), namespace_, eol_))
        if self.diskspace is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdiskspace>%s</%sdiskspace>%s' % (namespace_, self.gds_format_string(quote_xml(self.diskspace).encode(ExternalEncoding), input_name='diskspace'), namespace_, eol_))
        if self.memory is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smemory>%s</%smemory>%s' % (namespace_, self.gds_format_string(quote_xml(self.memory).encode(ExternalEncoding), input_name='memory'), namespace_, eol_))
        if self.processors is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sprocessors>%s</%sprocessors>%s' % (namespace_, self.gds_format_string(quote_xml(self.processors).encode(ExternalEncoding), input_name='processors'), namespace_, eol_))
        if self.comment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scomment>%s</%scomment>%s' % (namespace_, self.gds_format_string(quote_xml(self.comment).encode(ExternalEncoding), input_name='comment'), namespace_, eol_))
        if self.pi_person_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spi_person_id>%s</%spi_person_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.pi_person_id).encode(ExternalEncoding), input_name='pi_person_id'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.action_type is not None or
            self.project_id is not None or
            self.resource_list is not None or
            self.project_title is not None or
            self.pfos is not None or
            self.sfos_list is not None or
            self.abstract is not None or
            self.sector is not None or
            self.qualifications is not None or
            self.methodologies is not None or
            self.support is not None or
            self.other_resources is not None or
            self.statement_work is not None or
            self.background is not None or
            self.justification is not None or
            self.deliverables is not None or
            self.milestones is not None or
            self.progress is not None or
            self.facilities is not None or
            self.languages is not None or
            self.applications is not None or
            self.diskspace is not None or
            self.memory is not None or
            self.processors is not None or
            self.comment is not None or
            self.pi_person_id is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='bodyType8'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.action_type is not None:
            showIndent(outfile, level)
            outfile.write('action_type=%s,\n' % quote_python(self.action_type).encode(ExternalEncoding))
        if self.project_id is not None:
            showIndent(outfile, level)
            outfile.write('project_id=%s,\n' % quote_python(self.project_id).encode(ExternalEncoding))
        if self.resource_list is not None:
            showIndent(outfile, level)
            outfile.write('resource_list=model_.resource_listType6(\n')
            self.resource_list.exportLiteral(outfile, level, name_='resource_list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.project_title is not None:
            showIndent(outfile, level)
            outfile.write('project_title=%s,\n' % quote_python(self.project_title).encode(ExternalEncoding))
        if self.pfos is not None:
            showIndent(outfile, level)
            outfile.write('pfos=model_.field_of_science_type(\n')
            self.pfos.exportLiteral(outfile, level, name_='pfos')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.sfos_list is not None:
            showIndent(outfile, level)
            outfile.write('sfos_list=model_.sfos_listType2(\n')
            self.sfos_list.exportLiteral(outfile, level, name_='sfos_list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.abstract is not None:
            showIndent(outfile, level)
            outfile.write('abstract=%s,\n' % quote_python(self.abstract).encode(ExternalEncoding))
        if self.sector is not None:
            showIndent(outfile, level)
            outfile.write('sector=%s,\n' % quote_python(self.sector).encode(ExternalEncoding))
        if self.qualifications is not None:
            showIndent(outfile, level)
            outfile.write('qualifications=%s,\n' % quote_python(self.qualifications).encode(ExternalEncoding))
        if self.methodologies is not None:
            showIndent(outfile, level)
            outfile.write('methodologies=%s,\n' % quote_python(self.methodologies).encode(ExternalEncoding))
        if self.support is not None:
            showIndent(outfile, level)
            outfile.write('support=%s,\n' % quote_python(self.support).encode(ExternalEncoding))
        if self.other_resources is not None:
            showIndent(outfile, level)
            outfile.write('other_resources=%s,\n' % quote_python(self.other_resources).encode(ExternalEncoding))
        if self.statement_work is not None:
            showIndent(outfile, level)
            outfile.write('statement_work=%s,\n' % quote_python(self.statement_work).encode(ExternalEncoding))
        if self.background is not None:
            showIndent(outfile, level)
            outfile.write('background=%s,\n' % quote_python(self.background).encode(ExternalEncoding))
        if self.justification is not None:
            showIndent(outfile, level)
            outfile.write('justification=%s,\n' % quote_python(self.justification).encode(ExternalEncoding))
        if self.deliverables is not None:
            showIndent(outfile, level)
            outfile.write('deliverables=%s,\n' % quote_python(self.deliverables).encode(ExternalEncoding))
        if self.milestones is not None:
            showIndent(outfile, level)
            outfile.write('milestones=%s,\n' % quote_python(self.milestones).encode(ExternalEncoding))
        if self.progress is not None:
            showIndent(outfile, level)
            outfile.write('progress=%s,\n' % quote_python(self.progress).encode(ExternalEncoding))
        if self.facilities is not None:
            showIndent(outfile, level)
            outfile.write('facilities=%s,\n' % quote_python(self.facilities).encode(ExternalEncoding))
        if self.languages is not None:
            showIndent(outfile, level)
            outfile.write('languages=%s,\n' % quote_python(self.languages).encode(ExternalEncoding))
        if self.applications is not None:
            showIndent(outfile, level)
            outfile.write('applications=%s,\n' % quote_python(self.applications).encode(ExternalEncoding))
        if self.diskspace is not None:
            showIndent(outfile, level)
            outfile.write('diskspace=%s,\n' % quote_python(self.diskspace).encode(ExternalEncoding))
        if self.memory is not None:
            showIndent(outfile, level)
            outfile.write('memory=%s,\n' % quote_python(self.memory).encode(ExternalEncoding))
        if self.processors is not None:
            showIndent(outfile, level)
            outfile.write('processors=%s,\n' % quote_python(self.processors).encode(ExternalEncoding))
        if self.comment is not None:
            showIndent(outfile, level)
            outfile.write('comment=%s,\n' % quote_python(self.comment).encode(ExternalEncoding))
        if self.pi_person_id is not None:
            showIndent(outfile, level)
            outfile.write('pi_person_id=%s,\n' % quote_python(self.pi_person_id).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'action_type':
            action_type_ = child_.text
            action_type_ = self.gds_validate_string(action_type_, node, 'action_type')
            self.action_type = action_type_
            self.validate_modify_action_type(self.action_type)    # validate type modify_action_type
        elif nodeName_ == 'project_id':
            project_id_ = child_.text
            project_id_ = self.gds_validate_string(project_id_, node, 'project_id')
            self.project_id = project_id_
        elif nodeName_ == 'resource_list':
            obj_ = resource_listType6.factory()
            obj_.build(child_)
            self.set_resource_list(obj_)
        elif nodeName_ == 'project_title':
            project_title_ = child_.text
            project_title_ = self.gds_validate_string(project_title_, node, 'project_title')
            self.project_title = project_title_
        elif nodeName_ == 'pfos':
            obj_ = field_of_science_type.factory()
            obj_.build(child_)
            self.set_pfos(obj_)
        elif nodeName_ == 'sfos_list':
            obj_ = sfos_listType2.factory()
            obj_.build(child_)
            self.set_sfos_list(obj_)
        elif nodeName_ == 'abstract':
            abstract_ = child_.text
            abstract_ = self.gds_validate_string(abstract_, node, 'abstract')
            self.abstract = abstract_
        elif nodeName_ == 'sector':
            sector_ = child_.text
            sector_ = self.gds_validate_string(sector_, node, 'sector')
            self.sector = sector_
        elif nodeName_ == 'qualifications':
            qualifications_ = child_.text
            qualifications_ = self.gds_validate_string(qualifications_, node, 'qualifications')
            self.qualifications = qualifications_
        elif nodeName_ == 'methodologies':
            methodologies_ = child_.text
            methodologies_ = self.gds_validate_string(methodologies_, node, 'methodologies')
            self.methodologies = methodologies_
        elif nodeName_ == 'support':
            support_ = child_.text
            support_ = self.gds_validate_string(support_, node, 'support')
            self.support = support_
        elif nodeName_ == 'other_resources':
            other_resources_ = child_.text
            other_resources_ = self.gds_validate_string(other_resources_, node, 'other_resources')
            self.other_resources = other_resources_
        elif nodeName_ == 'statement_work':
            statement_work_ = child_.text
            statement_work_ = self.gds_validate_string(statement_work_, node, 'statement_work')
            self.statement_work = statement_work_
        elif nodeName_ == 'background':
            background_ = child_.text
            background_ = self.gds_validate_string(background_, node, 'background')
            self.background = background_
        elif nodeName_ == 'justification':
            justification_ = child_.text
            justification_ = self.gds_validate_string(justification_, node, 'justification')
            self.justification = justification_
        elif nodeName_ == 'deliverables':
            deliverables_ = child_.text
            deliverables_ = self.gds_validate_string(deliverables_, node, 'deliverables')
            self.deliverables = deliverables_
        elif nodeName_ == 'milestones':
            milestones_ = child_.text
            milestones_ = self.gds_validate_string(milestones_, node, 'milestones')
            self.milestones = milestones_
        elif nodeName_ == 'progress':
            progress_ = child_.text
            progress_ = self.gds_validate_string(progress_, node, 'progress')
            self.progress = progress_
        elif nodeName_ == 'facilities':
            facilities_ = child_.text
            facilities_ = self.gds_validate_string(facilities_, node, 'facilities')
            self.facilities = facilities_
        elif nodeName_ == 'languages':
            languages_ = child_.text
            languages_ = self.gds_validate_string(languages_, node, 'languages')
            self.languages = languages_
        elif nodeName_ == 'applications':
            applications_ = child_.text
            applications_ = self.gds_validate_string(applications_, node, 'applications')
            self.applications = applications_
        elif nodeName_ == 'diskspace':
            diskspace_ = child_.text
            diskspace_ = self.gds_validate_string(diskspace_, node, 'diskspace')
            self.diskspace = diskspace_
        elif nodeName_ == 'memory':
            memory_ = child_.text
            memory_ = self.gds_validate_string(memory_, node, 'memory')
            self.memory = memory_
        elif nodeName_ == 'processors':
            processors_ = child_.text
            processors_ = self.gds_validate_string(processors_, node, 'processors')
            self.processors = processors_
        elif nodeName_ == 'comment':
            comment_ = child_.text
            comment_ = self.gds_validate_string(comment_, node, 'comment')
            self.comment = comment_
        elif nodeName_ == 'pi_person_id':
            pi_person_id_ = child_.text
            pi_person_id_ = self.gds_validate_string(pi_person_id_, node, 'pi_person_id')
            self.pi_person_id = pi_person_id_
# end class bodyType8


class resource_listType6(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, resource=None):
        if resource is None:
            self.resource = []
        else:
            self.resource = resource
    def factory(*args_, **kwargs_):
        if resource_listType6.subclass:
            return resource_listType6.subclass(*args_, **kwargs_)
        else:
            return resource_listType6(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_resource(self): return self.resource
    def set_resource(self, resource): self.resource = resource
    def add_resource(self, value): self.resource.append(value)
    def insert_resource(self, index, value): self.resource[index] = value
    def export(self, outfile, level, namespace_='', name_='resource_listType6', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='resource_listType6')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='resource_listType6'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='resource_listType6', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for resource_ in self.resource:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sresource>%s</%sresource>%s' % (namespace_, self.gds_format_string(quote_xml(resource_).encode(ExternalEncoding), input_name='resource'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.resource
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='resource_listType6'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('resource=[\n')
        level += 1
        for resource_ in self.resource:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(resource_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'resource':
            resource_ = child_.text
            resource_ = self.gds_validate_string(resource_, node, 'resource')
            self.resource.append(resource_)
# end class resource_listType6


class sfos_listType2(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, sfos=None):
        if sfos is None:
            self.sfos = []
        else:
            self.sfos = sfos
    def factory(*args_, **kwargs_):
        if sfos_listType2.subclass:
            return sfos_listType2.subclass(*args_, **kwargs_)
        else:
            return sfos_listType2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_sfos(self): return self.sfos
    def set_sfos(self, sfos): self.sfos = sfos
    def add_sfos(self, value): self.sfos.append(value)
    def insert_sfos(self, index, value): self.sfos[index] = value
    def export(self, outfile, level, namespace_='', name_='sfos_listType2', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='sfos_listType2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='sfos_listType2'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='sfos_listType2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for sfos_ in self.sfos:
            sfos_.export(outfile, level, namespace_, name_='sfos', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.sfos
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='sfos_listType2'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('sfos=[\n')
        level += 1
        for sfos_ in self.sfos:
            showIndent(outfile, level)
            outfile.write('model_.field_of_science_type(\n')
            sfos_.exportLiteral(outfile, level, name_='field_of_science_type')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'sfos':
            obj_ = field_of_science_type.factory()
            obj_.build(child_)
            self.sfos.append(obj_)
# end class sfos_listType2


class notify_project_modifyType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, header=None, body=None):
        self.header = header
        self.body = body
    def factory(*args_, **kwargs_):
        if notify_project_modifyType.subclass:
            return notify_project_modifyType.subclass(*args_, **kwargs_)
        else:
            return notify_project_modifyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_header(self): return self.header
    def set_header(self, header): self.header = header
    def get_body(self): return self.body
    def set_body(self, body): self.body = body
    def export(self, outfile, level, namespace_='', name_='notify_project_modifyType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='notify_project_modifyType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='notify_project_modifyType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='notify_project_modifyType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.header is not None:
            self.header.export(outfile, level, namespace_, name_='header', pretty_print=pretty_print)
        if self.body is not None:
            self.body.export(outfile, level, namespace_, name_='body', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.header is not None or
            self.body is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='notify_project_modifyType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.header is not None:
            showIndent(outfile, level)
            outfile.write('header=model_.header_type(\n')
            self.header.exportLiteral(outfile, level, name_='header')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.body is not None:
            showIndent(outfile, level)
            outfile.write('body=model_.bodyType9(\n')
            self.body.exportLiteral(outfile, level, name_='body')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'header':
            obj_ = header_type.factory()
            obj_.build(child_)
            self.set_header(obj_)
        elif nodeName_ == 'body':
            obj_ = bodyType9.factory()
            obj_.build(child_)
            self.set_body(obj_)
# end class notify_project_modifyType


class bodyType9(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, action_type=None, project_id=None, resource_list=None, project_title=None, pfos=None, sfos_list=None, abstract=None, sector=None, qualifications=None, methodologies=None, support=None, other_resources=None, statement_work=None, background=None, justification=None, deliverables=None, milestones=None, progress=None, facilities=None, languages=None, applications=None, diskspace=None, memory=None, processors=None, comment=None, pi_person_id=None):
        self.action_type = action_type
        self.project_id = project_id
        self.resource_list = resource_list
        self.project_title = project_title
        self.pfos = pfos
        self.sfos_list = sfos_list
        self.abstract = abstract
        self.sector = sector
        self.qualifications = qualifications
        self.methodologies = methodologies
        self.support = support
        self.other_resources = other_resources
        self.statement_work = statement_work
        self.background = background
        self.justification = justification
        self.deliverables = deliverables
        self.milestones = milestones
        self.progress = progress
        self.facilities = facilities
        self.languages = languages
        self.applications = applications
        self.diskspace = diskspace
        self.memory = memory
        self.processors = processors
        self.comment = comment
        self.pi_person_id = pi_person_id
    def factory(*args_, **kwargs_):
        if bodyType9.subclass:
            return bodyType9.subclass(*args_, **kwargs_)
        else:
            return bodyType9(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_action_type(self): return self.action_type
    def set_action_type(self, action_type): self.action_type = action_type
    def validate_modify_action_type(self, value):
        # Validate type modify_action_type, a restriction on xs:normalizedString.
        pass
    def get_project_id(self): return self.project_id
    def set_project_id(self, project_id): self.project_id = project_id
    def get_resource_list(self): return self.resource_list
    def set_resource_list(self, resource_list): self.resource_list = resource_list
    def get_project_title(self): return self.project_title
    def set_project_title(self, project_title): self.project_title = project_title
    def get_pfos(self): return self.pfos
    def set_pfos(self, pfos): self.pfos = pfos
    def get_sfos_list(self): return self.sfos_list
    def set_sfos_list(self, sfos_list): self.sfos_list = sfos_list
    def get_abstract(self): return self.abstract
    def set_abstract(self, abstract): self.abstract = abstract
    def get_sector(self): return self.sector
    def set_sector(self, sector): self.sector = sector
    def get_qualifications(self): return self.qualifications
    def set_qualifications(self, qualifications): self.qualifications = qualifications
    def get_methodologies(self): return self.methodologies
    def set_methodologies(self, methodologies): self.methodologies = methodologies
    def get_support(self): return self.support
    def set_support(self, support): self.support = support
    def get_other_resources(self): return self.other_resources
    def set_other_resources(self, other_resources): self.other_resources = other_resources
    def get_statement_work(self): return self.statement_work
    def set_statement_work(self, statement_work): self.statement_work = statement_work
    def get_background(self): return self.background
    def set_background(self, background): self.background = background
    def get_justification(self): return self.justification
    def set_justification(self, justification): self.justification = justification
    def get_deliverables(self): return self.deliverables
    def set_deliverables(self, deliverables): self.deliverables = deliverables
    def get_milestones(self): return self.milestones
    def set_milestones(self, milestones): self.milestones = milestones
    def get_progress(self): return self.progress
    def set_progress(self, progress): self.progress = progress
    def get_facilities(self): return self.facilities
    def set_facilities(self, facilities): self.facilities = facilities
    def get_languages(self): return self.languages
    def set_languages(self, languages): self.languages = languages
    def get_applications(self): return self.applications
    def set_applications(self, applications): self.applications = applications
    def get_diskspace(self): return self.diskspace
    def set_diskspace(self, diskspace): self.diskspace = diskspace
    def get_memory(self): return self.memory
    def set_memory(self, memory): self.memory = memory
    def get_processors(self): return self.processors
    def set_processors(self, processors): self.processors = processors
    def get_comment(self): return self.comment
    def set_comment(self, comment): self.comment = comment
    def get_pi_person_id(self): return self.pi_person_id
    def set_pi_person_id(self, pi_person_id): self.pi_person_id = pi_person_id
    def export(self, outfile, level, namespace_='', name_='bodyType9', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='bodyType9')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='bodyType9'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='bodyType9', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.action_type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%saction_type>%s</%saction_type>%s' % (namespace_, self.gds_format_string(quote_xml(self.action_type).encode(ExternalEncoding), input_name='action_type'), namespace_, eol_))
        if self.project_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sproject_id>%s</%sproject_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.project_id).encode(ExternalEncoding), input_name='project_id'), namespace_, eol_))
        if self.resource_list is not None:
            self.resource_list.export(outfile, level, namespace_, name_='resource_list', pretty_print=pretty_print)
        if self.project_title is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sproject_title>%s</%sproject_title>%s' % (namespace_, self.gds_format_string(quote_xml(self.project_title).encode(ExternalEncoding), input_name='project_title'), namespace_, eol_))
        if self.pfos is not None:
            self.pfos.export(outfile, level, namespace_, name_='pfos', pretty_print=pretty_print)
        if self.sfos_list is not None:
            self.sfos_list.export(outfile, level, namespace_, name_='sfos_list', pretty_print=pretty_print)
        if self.abstract is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sabstract>%s</%sabstract>%s' % (namespace_, self.gds_format_string(quote_xml(self.abstract).encode(ExternalEncoding), input_name='abstract'), namespace_, eol_))
        if self.sector is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssector>%s</%ssector>%s' % (namespace_, self.gds_format_string(quote_xml(self.sector).encode(ExternalEncoding), input_name='sector'), namespace_, eol_))
        if self.qualifications is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%squalifications>%s</%squalifications>%s' % (namespace_, self.gds_format_string(quote_xml(self.qualifications).encode(ExternalEncoding), input_name='qualifications'), namespace_, eol_))
        if self.methodologies is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smethodologies>%s</%smethodologies>%s' % (namespace_, self.gds_format_string(quote_xml(self.methodologies).encode(ExternalEncoding), input_name='methodologies'), namespace_, eol_))
        if self.support is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssupport>%s</%ssupport>%s' % (namespace_, self.gds_format_string(quote_xml(self.support).encode(ExternalEncoding), input_name='support'), namespace_, eol_))
        if self.other_resources is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sother_resources>%s</%sother_resources>%s' % (namespace_, self.gds_format_string(quote_xml(self.other_resources).encode(ExternalEncoding), input_name='other_resources'), namespace_, eol_))
        if self.statement_work is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstatement_work>%s</%sstatement_work>%s' % (namespace_, self.gds_format_string(quote_xml(self.statement_work).encode(ExternalEncoding), input_name='statement_work'), namespace_, eol_))
        if self.background is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sbackground>%s</%sbackground>%s' % (namespace_, self.gds_format_string(quote_xml(self.background).encode(ExternalEncoding), input_name='background'), namespace_, eol_))
        if self.justification is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sjustification>%s</%sjustification>%s' % (namespace_, self.gds_format_string(quote_xml(self.justification).encode(ExternalEncoding), input_name='justification'), namespace_, eol_))
        if self.deliverables is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdeliverables>%s</%sdeliverables>%s' % (namespace_, self.gds_format_string(quote_xml(self.deliverables).encode(ExternalEncoding), input_name='deliverables'), namespace_, eol_))
        if self.milestones is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smilestones>%s</%smilestones>%s' % (namespace_, self.gds_format_string(quote_xml(self.milestones).encode(ExternalEncoding), input_name='milestones'), namespace_, eol_))
        if self.progress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sprogress>%s</%sprogress>%s' % (namespace_, self.gds_format_string(quote_xml(self.progress).encode(ExternalEncoding), input_name='progress'), namespace_, eol_))
        if self.facilities is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfacilities>%s</%sfacilities>%s' % (namespace_, self.gds_format_string(quote_xml(self.facilities).encode(ExternalEncoding), input_name='facilities'), namespace_, eol_))
        if self.languages is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slanguages>%s</%slanguages>%s' % (namespace_, self.gds_format_string(quote_xml(self.languages).encode(ExternalEncoding), input_name='languages'), namespace_, eol_))
        if self.applications is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sapplications>%s</%sapplications>%s' % (namespace_, self.gds_format_string(quote_xml(self.applications).encode(ExternalEncoding), input_name='applications'), namespace_, eol_))
        if self.diskspace is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdiskspace>%s</%sdiskspace>%s' % (namespace_, self.gds_format_string(quote_xml(self.diskspace).encode(ExternalEncoding), input_name='diskspace'), namespace_, eol_))
        if self.memory is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smemory>%s</%smemory>%s' % (namespace_, self.gds_format_string(quote_xml(self.memory).encode(ExternalEncoding), input_name='memory'), namespace_, eol_))
        if self.processors is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sprocessors>%s</%sprocessors>%s' % (namespace_, self.gds_format_string(quote_xml(self.processors).encode(ExternalEncoding), input_name='processors'), namespace_, eol_))
        if self.comment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scomment>%s</%scomment>%s' % (namespace_, self.gds_format_string(quote_xml(self.comment).encode(ExternalEncoding), input_name='comment'), namespace_, eol_))
        if self.pi_person_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spi_person_id>%s</%spi_person_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.pi_person_id).encode(ExternalEncoding), input_name='pi_person_id'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.action_type is not None or
            self.project_id is not None or
            self.resource_list is not None or
            self.project_title is not None or
            self.pfos is not None or
            self.sfos_list is not None or
            self.abstract is not None or
            self.sector is not None or
            self.qualifications is not None or
            self.methodologies is not None or
            self.support is not None or
            self.other_resources is not None or
            self.statement_work is not None or
            self.background is not None or
            self.justification is not None or
            self.deliverables is not None or
            self.milestones is not None or
            self.progress is not None or
            self.facilities is not None or
            self.languages is not None or
            self.applications is not None or
            self.diskspace is not None or
            self.memory is not None or
            self.processors is not None or
            self.comment is not None or
            self.pi_person_id is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='bodyType9'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.action_type is not None:
            showIndent(outfile, level)
            outfile.write('action_type=%s,\n' % quote_python(self.action_type).encode(ExternalEncoding))
        if self.project_id is not None:
            showIndent(outfile, level)
            outfile.write('project_id=%s,\n' % quote_python(self.project_id).encode(ExternalEncoding))
        if self.resource_list is not None:
            showIndent(outfile, level)
            outfile.write('resource_list=model_.resource_listType7(\n')
            self.resource_list.exportLiteral(outfile, level, name_='resource_list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.project_title is not None:
            showIndent(outfile, level)
            outfile.write('project_title=%s,\n' % quote_python(self.project_title).encode(ExternalEncoding))
        if self.pfos is not None:
            showIndent(outfile, level)
            outfile.write('pfos=model_.field_of_science_type(\n')
            self.pfos.exportLiteral(outfile, level, name_='pfos')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.sfos_list is not None:
            showIndent(outfile, level)
            outfile.write('sfos_list=model_.sfos_listType3(\n')
            self.sfos_list.exportLiteral(outfile, level, name_='sfos_list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.abstract is not None:
            showIndent(outfile, level)
            outfile.write('abstract=%s,\n' % quote_python(self.abstract).encode(ExternalEncoding))
        if self.sector is not None:
            showIndent(outfile, level)
            outfile.write('sector=%s,\n' % quote_python(self.sector).encode(ExternalEncoding))
        if self.qualifications is not None:
            showIndent(outfile, level)
            outfile.write('qualifications=%s,\n' % quote_python(self.qualifications).encode(ExternalEncoding))
        if self.methodologies is not None:
            showIndent(outfile, level)
            outfile.write('methodologies=%s,\n' % quote_python(self.methodologies).encode(ExternalEncoding))
        if self.support is not None:
            showIndent(outfile, level)
            outfile.write('support=%s,\n' % quote_python(self.support).encode(ExternalEncoding))
        if self.other_resources is not None:
            showIndent(outfile, level)
            outfile.write('other_resources=%s,\n' % quote_python(self.other_resources).encode(ExternalEncoding))
        if self.statement_work is not None:
            showIndent(outfile, level)
            outfile.write('statement_work=%s,\n' % quote_python(self.statement_work).encode(ExternalEncoding))
        if self.background is not None:
            showIndent(outfile, level)
            outfile.write('background=%s,\n' % quote_python(self.background).encode(ExternalEncoding))
        if self.justification is not None:
            showIndent(outfile, level)
            outfile.write('justification=%s,\n' % quote_python(self.justification).encode(ExternalEncoding))
        if self.deliverables is not None:
            showIndent(outfile, level)
            outfile.write('deliverables=%s,\n' % quote_python(self.deliverables).encode(ExternalEncoding))
        if self.milestones is not None:
            showIndent(outfile, level)
            outfile.write('milestones=%s,\n' % quote_python(self.milestones).encode(ExternalEncoding))
        if self.progress is not None:
            showIndent(outfile, level)
            outfile.write('progress=%s,\n' % quote_python(self.progress).encode(ExternalEncoding))
        if self.facilities is not None:
            showIndent(outfile, level)
            outfile.write('facilities=%s,\n' % quote_python(self.facilities).encode(ExternalEncoding))
        if self.languages is not None:
            showIndent(outfile, level)
            outfile.write('languages=%s,\n' % quote_python(self.languages).encode(ExternalEncoding))
        if self.applications is not None:
            showIndent(outfile, level)
            outfile.write('applications=%s,\n' % quote_python(self.applications).encode(ExternalEncoding))
        if self.diskspace is not None:
            showIndent(outfile, level)
            outfile.write('diskspace=%s,\n' % quote_python(self.diskspace).encode(ExternalEncoding))
        if self.memory is not None:
            showIndent(outfile, level)
            outfile.write('memory=%s,\n' % quote_python(self.memory).encode(ExternalEncoding))
        if self.processors is not None:
            showIndent(outfile, level)
            outfile.write('processors=%s,\n' % quote_python(self.processors).encode(ExternalEncoding))
        if self.comment is not None:
            showIndent(outfile, level)
            outfile.write('comment=%s,\n' % quote_python(self.comment).encode(ExternalEncoding))
        if self.pi_person_id is not None:
            showIndent(outfile, level)
            outfile.write('pi_person_id=%s,\n' % quote_python(self.pi_person_id).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'action_type':
            action_type_ = child_.text
            action_type_ = self.gds_validate_string(action_type_, node, 'action_type')
            self.action_type = action_type_
            self.validate_modify_action_type(self.action_type)    # validate type modify_action_type
        elif nodeName_ == 'project_id':
            project_id_ = child_.text
            project_id_ = self.gds_validate_string(project_id_, node, 'project_id')
            self.project_id = project_id_
        elif nodeName_ == 'resource_list':
            obj_ = resource_listType7.factory()
            obj_.build(child_)
            self.set_resource_list(obj_)
        elif nodeName_ == 'project_title':
            project_title_ = child_.text
            project_title_ = self.gds_validate_string(project_title_, node, 'project_title')
            self.project_title = project_title_
        elif nodeName_ == 'pfos':
            obj_ = field_of_science_type.factory()
            obj_.build(child_)
            self.set_pfos(obj_)
        elif nodeName_ == 'sfos_list':
            obj_ = sfos_listType3.factory()
            obj_.build(child_)
            self.set_sfos_list(obj_)
        elif nodeName_ == 'abstract':
            abstract_ = child_.text
            abstract_ = self.gds_validate_string(abstract_, node, 'abstract')
            self.abstract = abstract_
        elif nodeName_ == 'sector':
            sector_ = child_.text
            sector_ = self.gds_validate_string(sector_, node, 'sector')
            self.sector = sector_
        elif nodeName_ == 'qualifications':
            qualifications_ = child_.text
            qualifications_ = self.gds_validate_string(qualifications_, node, 'qualifications')
            self.qualifications = qualifications_
        elif nodeName_ == 'methodologies':
            methodologies_ = child_.text
            methodologies_ = self.gds_validate_string(methodologies_, node, 'methodologies')
            self.methodologies = methodologies_
        elif nodeName_ == 'support':
            support_ = child_.text
            support_ = self.gds_validate_string(support_, node, 'support')
            self.support = support_
        elif nodeName_ == 'other_resources':
            other_resources_ = child_.text
            other_resources_ = self.gds_validate_string(other_resources_, node, 'other_resources')
            self.other_resources = other_resources_
        elif nodeName_ == 'statement_work':
            statement_work_ = child_.text
            statement_work_ = self.gds_validate_string(statement_work_, node, 'statement_work')
            self.statement_work = statement_work_
        elif nodeName_ == 'background':
            background_ = child_.text
            background_ = self.gds_validate_string(background_, node, 'background')
            self.background = background_
        elif nodeName_ == 'justification':
            justification_ = child_.text
            justification_ = self.gds_validate_string(justification_, node, 'justification')
            self.justification = justification_
        elif nodeName_ == 'deliverables':
            deliverables_ = child_.text
            deliverables_ = self.gds_validate_string(deliverables_, node, 'deliverables')
            self.deliverables = deliverables_
        elif nodeName_ == 'milestones':
            milestones_ = child_.text
            milestones_ = self.gds_validate_string(milestones_, node, 'milestones')
            self.milestones = milestones_
        elif nodeName_ == 'progress':
            progress_ = child_.text
            progress_ = self.gds_validate_string(progress_, node, 'progress')
            self.progress = progress_
        elif nodeName_ == 'facilities':
            facilities_ = child_.text
            facilities_ = self.gds_validate_string(facilities_, node, 'facilities')
            self.facilities = facilities_
        elif nodeName_ == 'languages':
            languages_ = child_.text
            languages_ = self.gds_validate_string(languages_, node, 'languages')
            self.languages = languages_
        elif nodeName_ == 'applications':
            applications_ = child_.text
            applications_ = self.gds_validate_string(applications_, node, 'applications')
            self.applications = applications_
        elif nodeName_ == 'diskspace':
            diskspace_ = child_.text
            diskspace_ = self.gds_validate_string(diskspace_, node, 'diskspace')
            self.diskspace = diskspace_
        elif nodeName_ == 'memory':
            memory_ = child_.text
            memory_ = self.gds_validate_string(memory_, node, 'memory')
            self.memory = memory_
        elif nodeName_ == 'processors':
            processors_ = child_.text
            processors_ = self.gds_validate_string(processors_, node, 'processors')
            self.processors = processors_
        elif nodeName_ == 'comment':
            comment_ = child_.text
            comment_ = self.gds_validate_string(comment_, node, 'comment')
            self.comment = comment_
        elif nodeName_ == 'pi_person_id':
            pi_person_id_ = child_.text
            pi_person_id_ = self.gds_validate_string(pi_person_id_, node, 'pi_person_id')
            self.pi_person_id = pi_person_id_
# end class bodyType9


class resource_listType7(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, resource=None):
        if resource is None:
            self.resource = []
        else:
            self.resource = resource
    def factory(*args_, **kwargs_):
        if resource_listType7.subclass:
            return resource_listType7.subclass(*args_, **kwargs_)
        else:
            return resource_listType7(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_resource(self): return self.resource
    def set_resource(self, resource): self.resource = resource
    def add_resource(self, value): self.resource.append(value)
    def insert_resource(self, index, value): self.resource[index] = value
    def export(self, outfile, level, namespace_='', name_='resource_listType7', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='resource_listType7')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='resource_listType7'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='resource_listType7', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for resource_ in self.resource:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sresource>%s</%sresource>%s' % (namespace_, self.gds_format_string(quote_xml(resource_).encode(ExternalEncoding), input_name='resource'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.resource
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='resource_listType7'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('resource=[\n')
        level += 1
        for resource_ in self.resource:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(resource_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'resource':
            resource_ = child_.text
            resource_ = self.gds_validate_string(resource_, node, 'resource')
            self.resource.append(resource_)
# end class resource_listType7


class sfos_listType3(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, sfos=None):
        if sfos is None:
            self.sfos = []
        else:
            self.sfos = sfos
    def factory(*args_, **kwargs_):
        if sfos_listType3.subclass:
            return sfos_listType3.subclass(*args_, **kwargs_)
        else:
            return sfos_listType3(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_sfos(self): return self.sfos
    def set_sfos(self, sfos): self.sfos = sfos
    def add_sfos(self, value): self.sfos.append(value)
    def insert_sfos(self, index, value): self.sfos[index] = value
    def export(self, outfile, level, namespace_='', name_='sfos_listType3', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='sfos_listType3')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='sfos_listType3'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='sfos_listType3', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for sfos_ in self.sfos:
            sfos_.export(outfile, level, namespace_, name_='sfos', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.sfos
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='sfos_listType3'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('sfos=[\n')
        level += 1
        for sfos_ in self.sfos:
            showIndent(outfile, level)
            outfile.write('model_.field_of_science_type(\n')
            sfos_.exportLiteral(outfile, level, name_='field_of_science_type')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'sfos':
            obj_ = field_of_science_type.factory()
            obj_.build(child_)
            self.sfos.append(obj_)
# end class sfos_listType3


class request_user_modifyType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, header=None, body=None):
        self.header = header
        self.body = body
    def factory(*args_, **kwargs_):
        if request_user_modifyType.subclass:
            return request_user_modifyType.subclass(*args_, **kwargs_)
        else:
            return request_user_modifyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_header(self): return self.header
    def set_header(self, header): self.header = header
    def get_body(self): return self.body
    def set_body(self, body): self.body = body
    def export(self, outfile, level, namespace_='', name_='request_user_modifyType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='request_user_modifyType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='request_user_modifyType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='request_user_modifyType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.header is not None:
            self.header.export(outfile, level, namespace_, name_='header', pretty_print=pretty_print)
        if self.body is not None:
            self.body.export(outfile, level, namespace_, name_='body', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.header is not None or
            self.body is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='request_user_modifyType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.header is not None:
            showIndent(outfile, level)
            outfile.write('header=model_.header_type(\n')
            self.header.exportLiteral(outfile, level, name_='header')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.body is not None:
            showIndent(outfile, level)
            outfile.write('body=model_.bodyType10(\n')
            self.body.exportLiteral(outfile, level, name_='body')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'header':
            obj_ = header_type.factory()
            obj_.build(child_)
            self.set_header(obj_)
        elif nodeName_ == 'body':
            obj_ = bodyType10.factory()
            obj_.build(child_)
            self.set_body(obj_)
# end class request_user_modifyType


class bodyType10(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, action_type=None, person_id=None, dn_list=None, new_dn=None, valid_cert=False, first_name=None, middle_name=None, last_name=None, email=None, fax=None, title=None, organization=None, citizenship=None, country_access=None, org_code=None, emp_code=None, dept=None, address=None, home_phone=None, business_phone=None, remote_site_login=None, requester_login=None, req_login_list=None, comment=None, position=None, nsf_status_code=None):
        self.action_type = action_type
        self.person_id = person_id
        self.dn_list = dn_list
        self.new_dn = new_dn
        self.valid_cert = valid_cert
        self.first_name = first_name
        self.middle_name = middle_name
        self.last_name = last_name
        self.email = email
        self.fax = fax
        self.title = title
        self.organization = organization
        self.citizenship = citizenship
        self.country_access = country_access
        self.org_code = org_code
        self.emp_code = emp_code
        self.dept = dept
        self.address = address
        self.home_phone = home_phone
        self.business_phone = business_phone
        self.remote_site_login = remote_site_login
        self.requester_login = requester_login
        self.req_login_list = req_login_list
        self.comment = comment
        self.position = position
        self.nsf_status_code = nsf_status_code
    def factory(*args_, **kwargs_):
        if bodyType10.subclass:
            return bodyType10.subclass(*args_, **kwargs_)
        else:
            return bodyType10(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_action_type(self): return self.action_type
    def set_action_type(self, action_type): self.action_type = action_type
    def validate_modify_action_type(self, value):
        # Validate type modify_action_type, a restriction on xs:normalizedString.
        pass
    def get_person_id(self): return self.person_id
    def set_person_id(self, person_id): self.person_id = person_id
    def get_dn_list(self): return self.dn_list
    def set_dn_list(self, dn_list): self.dn_list = dn_list
    def get_new_dn(self): return self.new_dn
    def set_new_dn(self, new_dn): self.new_dn = new_dn
    def get_valid_cert(self): return self.valid_cert
    def set_valid_cert(self, valid_cert): self.valid_cert = valid_cert
    def get_first_name(self): return self.first_name
    def set_first_name(self, first_name): self.first_name = first_name
    def get_middle_name(self): return self.middle_name
    def set_middle_name(self, middle_name): self.middle_name = middle_name
    def get_last_name(self): return self.last_name
    def set_last_name(self, last_name): self.last_name = last_name
    def get_email(self): return self.email
    def set_email(self, email): self.email = email
    def get_fax(self): return self.fax
    def set_fax(self, fax): self.fax = fax
    def get_title(self): return self.title
    def set_title(self, title): self.title = title
    def get_organization(self): return self.organization
    def set_organization(self, organization): self.organization = organization
    def get_citizenship(self): return self.citizenship
    def set_citizenship(self, citizenship): self.citizenship = citizenship
    def get_country_access(self): return self.country_access
    def set_country_access(self, country_access): self.country_access = country_access
    def get_org_code(self): return self.org_code
    def set_org_code(self, org_code): self.org_code = org_code
    def get_emp_code(self): return self.emp_code
    def set_emp_code(self, emp_code): self.emp_code = emp_code
    def get_dept(self): return self.dept
    def set_dept(self, dept): self.dept = dept
    def get_address(self): return self.address
    def set_address(self, address): self.address = address
    def get_home_phone(self): return self.home_phone
    def set_home_phone(self, home_phone): self.home_phone = home_phone
    def get_business_phone(self): return self.business_phone
    def set_business_phone(self, business_phone): self.business_phone = business_phone
    def get_remote_site_login(self): return self.remote_site_login
    def set_remote_site_login(self, remote_site_login): self.remote_site_login = remote_site_login
    def get_requester_login(self): return self.requester_login
    def set_requester_login(self, requester_login): self.requester_login = requester_login
    def get_req_login_list(self): return self.req_login_list
    def set_req_login_list(self, req_login_list): self.req_login_list = req_login_list
    def get_comment(self): return self.comment
    def set_comment(self, comment): self.comment = comment
    def get_position(self): return self.position
    def set_position(self, position): self.position = position
    def get_nsf_status_code(self): return self.nsf_status_code
    def set_nsf_status_code(self, nsf_status_code): self.nsf_status_code = nsf_status_code
    def export(self, outfile, level, namespace_='', name_='bodyType10', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='bodyType10')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='bodyType10'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='bodyType10', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.action_type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%saction_type>%s</%saction_type>%s' % (namespace_, self.gds_format_string(quote_xml(self.action_type).encode(ExternalEncoding), input_name='action_type'), namespace_, eol_))
        if self.person_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sperson_id>%s</%sperson_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.person_id).encode(ExternalEncoding), input_name='person_id'), namespace_, eol_))
        if self.dn_list is not None:
            self.dn_list.export(outfile, level, namespace_, name_='dn_list', pretty_print=pretty_print)
        if self.new_dn is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snew_dn>%s</%snew_dn>%s' % (namespace_, self.gds_format_string(quote_xml(self.new_dn).encode(ExternalEncoding), input_name='new_dn'), namespace_, eol_))
        if self.valid_cert is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalid_cert>%s</%svalid_cert>%s' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.valid_cert)), input_name='valid_cert'), namespace_, eol_))
        if self.first_name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfirst_name>%s</%sfirst_name>%s' % (namespace_, self.gds_format_string(quote_xml(self.first_name).encode(ExternalEncoding), input_name='first_name'), namespace_, eol_))
        if self.middle_name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smiddle_name>%s</%smiddle_name>%s' % (namespace_, self.gds_format_string(quote_xml(self.middle_name).encode(ExternalEncoding), input_name='middle_name'), namespace_, eol_))
        if self.last_name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slast_name>%s</%slast_name>%s' % (namespace_, self.gds_format_string(quote_xml(self.last_name).encode(ExternalEncoding), input_name='last_name'), namespace_, eol_))
        if self.email is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%semail>%s</%semail>%s' % (namespace_, self.gds_format_string(quote_xml(self.email).encode(ExternalEncoding), input_name='email'), namespace_, eol_))
        if self.fax is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfax>%s</%sfax>%s' % (namespace_, self.gds_format_string(quote_xml(self.fax).encode(ExternalEncoding), input_name='fax'), namespace_, eol_))
        if self.title is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stitle>%s</%stitle>%s' % (namespace_, self.gds_format_string(quote_xml(self.title).encode(ExternalEncoding), input_name='title'), namespace_, eol_))
        if self.organization is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sorganization>%s</%sorganization>%s' % (namespace_, self.gds_format_string(quote_xml(self.organization).encode(ExternalEncoding), input_name='organization'), namespace_, eol_))
        if self.citizenship is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scitizenship>%s</%scitizenship>%s' % (namespace_, self.gds_format_string(quote_xml(self.citizenship).encode(ExternalEncoding), input_name='citizenship'), namespace_, eol_))
        if self.country_access is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scountry_access>%s</%scountry_access>%s' % (namespace_, self.gds_format_string(quote_xml(self.country_access).encode(ExternalEncoding), input_name='country_access'), namespace_, eol_))
        if self.org_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sorg_code>%s</%sorg_code>%s' % (namespace_, self.gds_format_string(quote_xml(self.org_code).encode(ExternalEncoding), input_name='org_code'), namespace_, eol_))
        if self.emp_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%semp_code>%s</%semp_code>%s' % (namespace_, self.gds_format_string(quote_xml(self.emp_code).encode(ExternalEncoding), input_name='emp_code'), namespace_, eol_))
        if self.dept is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdept>%s</%sdept>%s' % (namespace_, self.gds_format_string(quote_xml(self.dept).encode(ExternalEncoding), input_name='dept'), namespace_, eol_))
        if self.address is not None:
            self.address.export(outfile, level, namespace_, name_='address', pretty_print=pretty_print)
        if self.home_phone is not None:
            self.home_phone.export(outfile, level, namespace_, name_='home_phone', pretty_print=pretty_print)
        if self.business_phone is not None:
            self.business_phone.export(outfile, level, namespace_, name_='business_phone', pretty_print=pretty_print)
        if self.remote_site_login is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sremote_site_login>%s</%sremote_site_login>%s' % (namespace_, self.gds_format_string(quote_xml(self.remote_site_login).encode(ExternalEncoding), input_name='remote_site_login'), namespace_, eol_))
        if self.requester_login is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srequester_login>%s</%srequester_login>%s' % (namespace_, self.gds_format_string(quote_xml(self.requester_login).encode(ExternalEncoding), input_name='requester_login'), namespace_, eol_))
        if self.req_login_list is not None:
            self.req_login_list.export(outfile, level, namespace_, name_='req_login_list', pretty_print=pretty_print)
        if self.comment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scomment>%s</%scomment>%s' % (namespace_, self.gds_format_string(quote_xml(self.comment).encode(ExternalEncoding), input_name='comment'), namespace_, eol_))
        if self.position is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sposition>%s</%sposition>%s' % (namespace_, self.gds_format_string(quote_xml(self.position).encode(ExternalEncoding), input_name='position'), namespace_, eol_))
        if self.nsf_status_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snsf_status_code>%s</%snsf_status_code>%s' % (namespace_, self.gds_format_string(quote_xml(self.nsf_status_code).encode(ExternalEncoding), input_name='nsf_status_code'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.action_type is not None or
            self.person_id is not None or
            self.dn_list is not None or
            self.new_dn is not None or
            self.valid_cert is not None or
            self.first_name is not None or
            self.middle_name is not None or
            self.last_name is not None or
            self.email is not None or
            self.fax is not None or
            self.title is not None or
            self.organization is not None or
            self.citizenship is not None or
            self.country_access is not None or
            self.org_code is not None or
            self.emp_code is not None or
            self.dept is not None or
            self.address is not None or
            self.home_phone is not None or
            self.business_phone is not None or
            self.remote_site_login is not None or
            self.requester_login is not None or
            self.req_login_list is not None or
            self.comment is not None or
            self.position is not None or
            self.nsf_status_code is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='bodyType10'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.action_type is not None:
            showIndent(outfile, level)
            outfile.write('action_type=%s,\n' % quote_python(self.action_type).encode(ExternalEncoding))
        if self.person_id is not None:
            showIndent(outfile, level)
            outfile.write('person_id=%s,\n' % quote_python(self.person_id).encode(ExternalEncoding))
        if self.dn_list is not None:
            showIndent(outfile, level)
            outfile.write('dn_list=model_.dn_listType6(\n')
            self.dn_list.exportLiteral(outfile, level, name_='dn_list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.new_dn is not None:
            showIndent(outfile, level)
            outfile.write('new_dn=%s,\n' % quote_python(self.new_dn).encode(ExternalEncoding))
        if self.valid_cert is not None:
            showIndent(outfile, level)
            outfile.write('valid_cert=%s,\n' % self.valid_cert)
        if self.first_name is not None:
            showIndent(outfile, level)
            outfile.write('first_name=%s,\n' % quote_python(self.first_name).encode(ExternalEncoding))
        if self.middle_name is not None:
            showIndent(outfile, level)
            outfile.write('middle_name=%s,\n' % quote_python(self.middle_name).encode(ExternalEncoding))
        if self.last_name is not None:
            showIndent(outfile, level)
            outfile.write('last_name=%s,\n' % quote_python(self.last_name).encode(ExternalEncoding))
        if self.email is not None:
            showIndent(outfile, level)
            outfile.write('email=%s,\n' % quote_python(self.email).encode(ExternalEncoding))
        if self.fax is not None:
            showIndent(outfile, level)
            outfile.write('fax=%s,\n' % quote_python(self.fax).encode(ExternalEncoding))
        if self.title is not None:
            showIndent(outfile, level)
            outfile.write('title=%s,\n' % quote_python(self.title).encode(ExternalEncoding))
        if self.organization is not None:
            showIndent(outfile, level)
            outfile.write('organization=%s,\n' % quote_python(self.organization).encode(ExternalEncoding))
        if self.citizenship is not None:
            showIndent(outfile, level)
            outfile.write('citizenship=%s,\n' % quote_python(self.citizenship).encode(ExternalEncoding))
        if self.country_access is not None:
            showIndent(outfile, level)
            outfile.write('country_access=%s,\n' % quote_python(self.country_access).encode(ExternalEncoding))
        if self.org_code is not None:
            showIndent(outfile, level)
            outfile.write('org_code=%s,\n' % quote_python(self.org_code).encode(ExternalEncoding))
        if self.emp_code is not None:
            showIndent(outfile, level)
            outfile.write('emp_code=%s,\n' % quote_python(self.emp_code).encode(ExternalEncoding))
        if self.dept is not None:
            showIndent(outfile, level)
            outfile.write('dept=%s,\n' % quote_python(self.dept).encode(ExternalEncoding))
        if self.address is not None:
            showIndent(outfile, level)
            outfile.write('address=model_.address(\n')
            self.address.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.home_phone is not None:
            showIndent(outfile, level)
            outfile.write('home_phone=model_.phone_type(\n')
            self.home_phone.exportLiteral(outfile, level, name_='home_phone')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.business_phone is not None:
            showIndent(outfile, level)
            outfile.write('business_phone=model_.phone_type(\n')
            self.business_phone.exportLiteral(outfile, level, name_='business_phone')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.remote_site_login is not None:
            showIndent(outfile, level)
            outfile.write('remote_site_login=%s,\n' % quote_python(self.remote_site_login).encode(ExternalEncoding))
        if self.requester_login is not None:
            showIndent(outfile, level)
            outfile.write('requester_login=%s,\n' % quote_python(self.requester_login).encode(ExternalEncoding))
        if self.req_login_list is not None:
            showIndent(outfile, level)
            outfile.write('req_login_list=model_.req_login_listType4(\n')
            self.req_login_list.exportLiteral(outfile, level, name_='req_login_list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.comment is not None:
            showIndent(outfile, level)
            outfile.write('comment=%s,\n' % quote_python(self.comment).encode(ExternalEncoding))
        if self.position is not None:
            showIndent(outfile, level)
            outfile.write('position=%s,\n' % quote_python(self.position).encode(ExternalEncoding))
        if self.nsf_status_code is not None:
            showIndent(outfile, level)
            outfile.write('nsf_status_code=%s,\n' % quote_python(self.nsf_status_code).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'action_type':
            action_type_ = child_.text
            action_type_ = self.gds_validate_string(action_type_, node, 'action_type')
            self.action_type = action_type_
            self.validate_modify_action_type(self.action_type)    # validate type modify_action_type
        elif nodeName_ == 'person_id':
            person_id_ = child_.text
            person_id_ = self.gds_validate_string(person_id_, node, 'person_id')
            self.person_id = person_id_
        elif nodeName_ == 'dn_list':
            obj_ = dn_listType6.factory()
            obj_.build(child_)
            self.set_dn_list(obj_)
        elif nodeName_ == 'new_dn':
            new_dn_ = child_.text
            new_dn_ = self.gds_validate_string(new_dn_, node, 'new_dn')
            self.new_dn = new_dn_
        elif nodeName_ == 'valid_cert':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'valid_cert')
            self.valid_cert = ival_
        elif nodeName_ == 'first_name':
            first_name_ = child_.text
            first_name_ = self.gds_validate_string(first_name_, node, 'first_name')
            self.first_name = first_name_
        elif nodeName_ == 'middle_name':
            middle_name_ = child_.text
            middle_name_ = self.gds_validate_string(middle_name_, node, 'middle_name')
            self.middle_name = middle_name_
        elif nodeName_ == 'last_name':
            last_name_ = child_.text
            last_name_ = self.gds_validate_string(last_name_, node, 'last_name')
            self.last_name = last_name_
        elif nodeName_ == 'email':
            email_ = child_.text
            email_ = self.gds_validate_string(email_, node, 'email')
            self.email = email_
        elif nodeName_ == 'fax':
            fax_ = child_.text
            fax_ = self.gds_validate_string(fax_, node, 'fax')
            self.fax = fax_
        elif nodeName_ == 'title':
            title_ = child_.text
            title_ = self.gds_validate_string(title_, node, 'title')
            self.title = title_
        elif nodeName_ == 'organization':
            organization_ = child_.text
            organization_ = self.gds_validate_string(organization_, node, 'organization')
            self.organization = organization_
        elif nodeName_ == 'citizenship':
            citizenship_ = child_.text
            citizenship_ = self.gds_validate_string(citizenship_, node, 'citizenship')
            self.citizenship = citizenship_
        elif nodeName_ == 'country_access':
            country_access_ = child_.text
            country_access_ = self.gds_validate_string(country_access_, node, 'country_access')
            self.country_access = country_access_
        elif nodeName_ == 'org_code':
            org_code_ = child_.text
            org_code_ = self.gds_validate_string(org_code_, node, 'org_code')
            self.org_code = org_code_
        elif nodeName_ == 'emp_code':
            emp_code_ = child_.text
            emp_code_ = self.gds_validate_string(emp_code_, node, 'emp_code')
            self.emp_code = emp_code_
        elif nodeName_ == 'dept':
            dept_ = child_.text
            dept_ = self.gds_validate_string(dept_, node, 'dept')
            self.dept = dept_
        elif nodeName_ == 'address':
            obj_ = address.factory()
            obj_.build(child_)
            self.set_address(obj_)
        elif nodeName_ == 'home_phone':
            obj_ = phone_type.factory()
            obj_.build(child_)
            self.set_home_phone(obj_)
        elif nodeName_ == 'business_phone':
            obj_ = phone_type.factory()
            obj_.build(child_)
            self.set_business_phone(obj_)
        elif nodeName_ == 'remote_site_login':
            remote_site_login_ = child_.text
            remote_site_login_ = self.gds_validate_string(remote_site_login_, node, 'remote_site_login')
            self.remote_site_login = remote_site_login_
        elif nodeName_ == 'requester_login':
            requester_login_ = child_.text
            requester_login_ = self.gds_validate_string(requester_login_, node, 'requester_login')
            self.requester_login = requester_login_
        elif nodeName_ == 'req_login_list':
            obj_ = req_login_listType4.factory()
            obj_.build(child_)
            self.set_req_login_list(obj_)
        elif nodeName_ == 'comment':
            comment_ = child_.text
            comment_ = self.gds_validate_string(comment_, node, 'comment')
            self.comment = comment_
        elif nodeName_ == 'position':
            position_ = child_.text
            position_ = self.gds_validate_string(position_, node, 'position')
            self.position = position_
        elif nodeName_ == 'nsf_status_code':
            nsf_status_code_ = child_.text
            nsf_status_code_ = self.gds_validate_string(nsf_status_code_, node, 'nsf_status_code')
            self.nsf_status_code = nsf_status_code_
# end class bodyType10


class dn_listType6(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dn=None):
        if dn is None:
            self.dn = []
        else:
            self.dn = dn
    def factory(*args_, **kwargs_):
        if dn_listType6.subclass:
            return dn_listType6.subclass(*args_, **kwargs_)
        else:
            return dn_listType6(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dn(self): return self.dn
    def set_dn(self, dn): self.dn = dn
    def add_dn(self, value): self.dn.append(value)
    def insert_dn(self, index, value): self.dn[index] = value
    def export(self, outfile, level, namespace_='', name_='dn_listType6', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dn_listType6')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='dn_listType6'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='dn_listType6', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for dn_ in self.dn:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdn>%s</%sdn>%s' % (namespace_, self.gds_format_string(quote_xml(dn_).encode(ExternalEncoding), input_name='dn'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.dn
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='dn_listType6'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('dn=[\n')
        level += 1
        for dn_ in self.dn:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(dn_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dn':
            dn_ = child_.text
            dn_ = self.gds_validate_string(dn_, node, 'dn')
            self.dn.append(dn_)
# end class dn_listType6


class req_login_listType4(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, req_login=None):
        if req_login is None:
            self.req_login = []
        else:
            self.req_login = req_login
    def factory(*args_, **kwargs_):
        if req_login_listType4.subclass:
            return req_login_listType4.subclass(*args_, **kwargs_)
        else:
            return req_login_listType4(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_req_login(self): return self.req_login
    def set_req_login(self, req_login): self.req_login = req_login
    def add_req_login(self, value): self.req_login.append(value)
    def insert_req_login(self, index, value): self.req_login[index] = value
    def export(self, outfile, level, namespace_='', name_='req_login_listType4', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='req_login_listType4')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='req_login_listType4'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='req_login_listType4', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for req_login_ in self.req_login:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreq_login>%s</%sreq_login>%s' % (namespace_, self.gds_format_string(quote_xml(req_login_).encode(ExternalEncoding), input_name='req_login'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.req_login
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='req_login_listType4'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('req_login=[\n')
        level += 1
        for req_login_ in self.req_login:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(req_login_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'req_login':
            req_login_ = child_.text
            req_login_ = self.gds_validate_string(req_login_, node, 'req_login')
            self.req_login.append(req_login_)
# end class req_login_listType4


class notify_user_modifyType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, header=None, body=None):
        self.header = header
        self.body = body
    def factory(*args_, **kwargs_):
        if notify_user_modifyType.subclass:
            return notify_user_modifyType.subclass(*args_, **kwargs_)
        else:
            return notify_user_modifyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_header(self): return self.header
    def set_header(self, header): self.header = header
    def get_body(self): return self.body
    def set_body(self, body): self.body = body
    def export(self, outfile, level, namespace_='', name_='notify_user_modifyType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='notify_user_modifyType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='notify_user_modifyType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='notify_user_modifyType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.header is not None:
            self.header.export(outfile, level, namespace_, name_='header', pretty_print=pretty_print)
        if self.body is not None:
            self.body.export(outfile, level, namespace_, name_='body', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.header is not None or
            self.body is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='notify_user_modifyType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.header is not None:
            showIndent(outfile, level)
            outfile.write('header=model_.header_type(\n')
            self.header.exportLiteral(outfile, level, name_='header')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.body is not None:
            showIndent(outfile, level)
            outfile.write('body=model_.bodyType11(\n')
            self.body.exportLiteral(outfile, level, name_='body')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'header':
            obj_ = header_type.factory()
            obj_.build(child_)
            self.set_header(obj_)
        elif nodeName_ == 'body':
            obj_ = bodyType11.factory()
            obj_.build(child_)
            self.set_body(obj_)
# end class notify_user_modifyType


class bodyType11(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, action_type=None, person_id=None, dn_list=None, new_dn=None, valid_cert=False, first_name=None, middle_name=None, last_name=None, email=None, fax=None, title=None, organization=None, citizenship=None, country_access=None, org_code=None, emp_code=None, dept=None, address=None, home_phone=None, business_phone=None, notifier_login=None, remote_site_login=None, req_login_list=None, comment=None, position=None):
        self.action_type = action_type
        self.person_id = person_id
        self.dn_list = dn_list
        self.new_dn = new_dn
        self.valid_cert = valid_cert
        self.first_name = first_name
        self.middle_name = middle_name
        self.last_name = last_name
        self.email = email
        self.fax = fax
        self.title = title
        self.organization = organization
        self.citizenship = citizenship
        self.country_access = country_access
        self.org_code = org_code
        self.emp_code = emp_code
        self.dept = dept
        self.address = address
        self.home_phone = home_phone
        self.business_phone = business_phone
        self.notifier_login = notifier_login
        self.remote_site_login = remote_site_login
        self.req_login_list = req_login_list
        self.comment = comment
        self.position = position
    def factory(*args_, **kwargs_):
        if bodyType11.subclass:
            return bodyType11.subclass(*args_, **kwargs_)
        else:
            return bodyType11(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_action_type(self): return self.action_type
    def set_action_type(self, action_type): self.action_type = action_type
    def validate_modify_action_type(self, value):
        # Validate type modify_action_type, a restriction on xs:normalizedString.
        pass
    def get_person_id(self): return self.person_id
    def set_person_id(self, person_id): self.person_id = person_id
    def get_dn_list(self): return self.dn_list
    def set_dn_list(self, dn_list): self.dn_list = dn_list
    def get_new_dn(self): return self.new_dn
    def set_new_dn(self, new_dn): self.new_dn = new_dn
    def get_valid_cert(self): return self.valid_cert
    def set_valid_cert(self, valid_cert): self.valid_cert = valid_cert
    def get_first_name(self): return self.first_name
    def set_first_name(self, first_name): self.first_name = first_name
    def get_middle_name(self): return self.middle_name
    def set_middle_name(self, middle_name): self.middle_name = middle_name
    def get_last_name(self): return self.last_name
    def set_last_name(self, last_name): self.last_name = last_name
    def get_email(self): return self.email
    def set_email(self, email): self.email = email
    def get_fax(self): return self.fax
    def set_fax(self, fax): self.fax = fax
    def get_title(self): return self.title
    def set_title(self, title): self.title = title
    def get_organization(self): return self.organization
    def set_organization(self, organization): self.organization = organization
    def get_citizenship(self): return self.citizenship
    def set_citizenship(self, citizenship): self.citizenship = citizenship
    def get_country_access(self): return self.country_access
    def set_country_access(self, country_access): self.country_access = country_access
    def get_org_code(self): return self.org_code
    def set_org_code(self, org_code): self.org_code = org_code
    def get_emp_code(self): return self.emp_code
    def set_emp_code(self, emp_code): self.emp_code = emp_code
    def get_dept(self): return self.dept
    def set_dept(self, dept): self.dept = dept
    def get_address(self): return self.address
    def set_address(self, address): self.address = address
    def get_home_phone(self): return self.home_phone
    def set_home_phone(self, home_phone): self.home_phone = home_phone
    def get_business_phone(self): return self.business_phone
    def set_business_phone(self, business_phone): self.business_phone = business_phone
    def get_notifier_login(self): return self.notifier_login
    def set_notifier_login(self, notifier_login): self.notifier_login = notifier_login
    def get_remote_site_login(self): return self.remote_site_login
    def set_remote_site_login(self, remote_site_login): self.remote_site_login = remote_site_login
    def get_req_login_list(self): return self.req_login_list
    def set_req_login_list(self, req_login_list): self.req_login_list = req_login_list
    def get_comment(self): return self.comment
    def set_comment(self, comment): self.comment = comment
    def get_position(self): return self.position
    def set_position(self, position): self.position = position
    def export(self, outfile, level, namespace_='', name_='bodyType11', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='bodyType11')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='bodyType11'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='bodyType11', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.action_type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%saction_type>%s</%saction_type>%s' % (namespace_, self.gds_format_string(quote_xml(self.action_type).encode(ExternalEncoding), input_name='action_type'), namespace_, eol_))
        if self.person_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sperson_id>%s</%sperson_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.person_id).encode(ExternalEncoding), input_name='person_id'), namespace_, eol_))
        if self.dn_list is not None:
            self.dn_list.export(outfile, level, namespace_, name_='dn_list', pretty_print=pretty_print)
        if self.new_dn is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snew_dn>%s</%snew_dn>%s' % (namespace_, self.gds_format_string(quote_xml(self.new_dn).encode(ExternalEncoding), input_name='new_dn'), namespace_, eol_))
        if self.valid_cert is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalid_cert>%s</%svalid_cert>%s' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.valid_cert)), input_name='valid_cert'), namespace_, eol_))
        if self.first_name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfirst_name>%s</%sfirst_name>%s' % (namespace_, self.gds_format_string(quote_xml(self.first_name).encode(ExternalEncoding), input_name='first_name'), namespace_, eol_))
        if self.middle_name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smiddle_name>%s</%smiddle_name>%s' % (namespace_, self.gds_format_string(quote_xml(self.middle_name).encode(ExternalEncoding), input_name='middle_name'), namespace_, eol_))
        if self.last_name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slast_name>%s</%slast_name>%s' % (namespace_, self.gds_format_string(quote_xml(self.last_name).encode(ExternalEncoding), input_name='last_name'), namespace_, eol_))
        if self.email is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%semail>%s</%semail>%s' % (namespace_, self.gds_format_string(quote_xml(self.email).encode(ExternalEncoding), input_name='email'), namespace_, eol_))
        if self.fax is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfax>%s</%sfax>%s' % (namespace_, self.gds_format_string(quote_xml(self.fax).encode(ExternalEncoding), input_name='fax'), namespace_, eol_))
        if self.title is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stitle>%s</%stitle>%s' % (namespace_, self.gds_format_string(quote_xml(self.title).encode(ExternalEncoding), input_name='title'), namespace_, eol_))
        if self.organization is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sorganization>%s</%sorganization>%s' % (namespace_, self.gds_format_string(quote_xml(self.organization).encode(ExternalEncoding), input_name='organization'), namespace_, eol_))
        if self.citizenship is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scitizenship>%s</%scitizenship>%s' % (namespace_, self.gds_format_string(quote_xml(self.citizenship).encode(ExternalEncoding), input_name='citizenship'), namespace_, eol_))
        if self.country_access is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scountry_access>%s</%scountry_access>%s' % (namespace_, self.gds_format_string(quote_xml(self.country_access).encode(ExternalEncoding), input_name='country_access'), namespace_, eol_))
        if self.org_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sorg_code>%s</%sorg_code>%s' % (namespace_, self.gds_format_string(quote_xml(self.org_code).encode(ExternalEncoding), input_name='org_code'), namespace_, eol_))
        if self.emp_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%semp_code>%s</%semp_code>%s' % (namespace_, self.gds_format_string(quote_xml(self.emp_code).encode(ExternalEncoding), input_name='emp_code'), namespace_, eol_))
        if self.dept is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdept>%s</%sdept>%s' % (namespace_, self.gds_format_string(quote_xml(self.dept).encode(ExternalEncoding), input_name='dept'), namespace_, eol_))
        if self.address is not None:
            self.address.export(outfile, level, namespace_, name_='address', pretty_print=pretty_print)
        if self.home_phone is not None:
            self.home_phone.export(outfile, level, namespace_, name_='home_phone', pretty_print=pretty_print)
        if self.business_phone is not None:
            self.business_phone.export(outfile, level, namespace_, name_='business_phone', pretty_print=pretty_print)
        if self.notifier_login is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snotifier_login>%s</%snotifier_login>%s' % (namespace_, self.gds_format_string(quote_xml(self.notifier_login).encode(ExternalEncoding), input_name='notifier_login'), namespace_, eol_))
        if self.remote_site_login is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sremote_site_login>%s</%sremote_site_login>%s' % (namespace_, self.gds_format_string(quote_xml(self.remote_site_login).encode(ExternalEncoding), input_name='remote_site_login'), namespace_, eol_))
        if self.req_login_list is not None:
            self.req_login_list.export(outfile, level, namespace_, name_='req_login_list', pretty_print=pretty_print)
        if self.comment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scomment>%s</%scomment>%s' % (namespace_, self.gds_format_string(quote_xml(self.comment).encode(ExternalEncoding), input_name='comment'), namespace_, eol_))
        if self.position is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sposition>%s</%sposition>%s' % (namespace_, self.gds_format_string(quote_xml(self.position).encode(ExternalEncoding), input_name='position'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.action_type is not None or
            self.person_id is not None or
            self.dn_list is not None or
            self.new_dn is not None or
            self.valid_cert is not None or
            self.first_name is not None or
            self.middle_name is not None or
            self.last_name is not None or
            self.email is not None or
            self.fax is not None or
            self.title is not None or
            self.organization is not None or
            self.citizenship is not None or
            self.country_access is not None or
            self.org_code is not None or
            self.emp_code is not None or
            self.dept is not None or
            self.address is not None or
            self.home_phone is not None or
            self.business_phone is not None or
            self.notifier_login is not None or
            self.remote_site_login is not None or
            self.req_login_list is not None or
            self.comment is not None or
            self.position is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='bodyType11'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.action_type is not None:
            showIndent(outfile, level)
            outfile.write('action_type=%s,\n' % quote_python(self.action_type).encode(ExternalEncoding))
        if self.person_id is not None:
            showIndent(outfile, level)
            outfile.write('person_id=%s,\n' % quote_python(self.person_id).encode(ExternalEncoding))
        if self.dn_list is not None:
            showIndent(outfile, level)
            outfile.write('dn_list=model_.dn_listType7(\n')
            self.dn_list.exportLiteral(outfile, level, name_='dn_list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.new_dn is not None:
            showIndent(outfile, level)
            outfile.write('new_dn=%s,\n' % quote_python(self.new_dn).encode(ExternalEncoding))
        if self.valid_cert is not None:
            showIndent(outfile, level)
            outfile.write('valid_cert=%s,\n' % self.valid_cert)
        if self.first_name is not None:
            showIndent(outfile, level)
            outfile.write('first_name=%s,\n' % quote_python(self.first_name).encode(ExternalEncoding))
        if self.middle_name is not None:
            showIndent(outfile, level)
            outfile.write('middle_name=%s,\n' % quote_python(self.middle_name).encode(ExternalEncoding))
        if self.last_name is not None:
            showIndent(outfile, level)
            outfile.write('last_name=%s,\n' % quote_python(self.last_name).encode(ExternalEncoding))
        if self.email is not None:
            showIndent(outfile, level)
            outfile.write('email=%s,\n' % quote_python(self.email).encode(ExternalEncoding))
        if self.fax is not None:
            showIndent(outfile, level)
            outfile.write('fax=%s,\n' % quote_python(self.fax).encode(ExternalEncoding))
        if self.title is not None:
            showIndent(outfile, level)
            outfile.write('title=%s,\n' % quote_python(self.title).encode(ExternalEncoding))
        if self.organization is not None:
            showIndent(outfile, level)
            outfile.write('organization=%s,\n' % quote_python(self.organization).encode(ExternalEncoding))
        if self.citizenship is not None:
            showIndent(outfile, level)
            outfile.write('citizenship=%s,\n' % quote_python(self.citizenship).encode(ExternalEncoding))
        if self.country_access is not None:
            showIndent(outfile, level)
            outfile.write('country_access=%s,\n' % quote_python(self.country_access).encode(ExternalEncoding))
        if self.org_code is not None:
            showIndent(outfile, level)
            outfile.write('org_code=%s,\n' % quote_python(self.org_code).encode(ExternalEncoding))
        if self.emp_code is not None:
            showIndent(outfile, level)
            outfile.write('emp_code=%s,\n' % quote_python(self.emp_code).encode(ExternalEncoding))
        if self.dept is not None:
            showIndent(outfile, level)
            outfile.write('dept=%s,\n' % quote_python(self.dept).encode(ExternalEncoding))
        if self.address is not None:
            showIndent(outfile, level)
            outfile.write('address=model_.address(\n')
            self.address.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.home_phone is not None:
            showIndent(outfile, level)
            outfile.write('home_phone=model_.phone_type(\n')
            self.home_phone.exportLiteral(outfile, level, name_='home_phone')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.business_phone is not None:
            showIndent(outfile, level)
            outfile.write('business_phone=model_.phone_type(\n')
            self.business_phone.exportLiteral(outfile, level, name_='business_phone')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.notifier_login is not None:
            showIndent(outfile, level)
            outfile.write('notifier_login=%s,\n' % quote_python(self.notifier_login).encode(ExternalEncoding))
        if self.remote_site_login is not None:
            showIndent(outfile, level)
            outfile.write('remote_site_login=%s,\n' % quote_python(self.remote_site_login).encode(ExternalEncoding))
        if self.req_login_list is not None:
            showIndent(outfile, level)
            outfile.write('req_login_list=model_.req_login_listType5(\n')
            self.req_login_list.exportLiteral(outfile, level, name_='req_login_list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.comment is not None:
            showIndent(outfile, level)
            outfile.write('comment=%s,\n' % quote_python(self.comment).encode(ExternalEncoding))
        if self.position is not None:
            showIndent(outfile, level)
            outfile.write('position=%s,\n' % quote_python(self.position).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'action_type':
            action_type_ = child_.text
            action_type_ = self.gds_validate_string(action_type_, node, 'action_type')
            self.action_type = action_type_
            self.validate_modify_action_type(self.action_type)    # validate type modify_action_type
        elif nodeName_ == 'person_id':
            person_id_ = child_.text
            person_id_ = self.gds_validate_string(person_id_, node, 'person_id')
            self.person_id = person_id_
        elif nodeName_ == 'dn_list':
            obj_ = dn_listType7.factory()
            obj_.build(child_)
            self.set_dn_list(obj_)
        elif nodeName_ == 'new_dn':
            new_dn_ = child_.text
            new_dn_ = self.gds_validate_string(new_dn_, node, 'new_dn')
            self.new_dn = new_dn_
        elif nodeName_ == 'valid_cert':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'valid_cert')
            self.valid_cert = ival_
        elif nodeName_ == 'first_name':
            first_name_ = child_.text
            first_name_ = self.gds_validate_string(first_name_, node, 'first_name')
            self.first_name = first_name_
        elif nodeName_ == 'middle_name':
            middle_name_ = child_.text
            middle_name_ = self.gds_validate_string(middle_name_, node, 'middle_name')
            self.middle_name = middle_name_
        elif nodeName_ == 'last_name':
            last_name_ = child_.text
            last_name_ = self.gds_validate_string(last_name_, node, 'last_name')
            self.last_name = last_name_
        elif nodeName_ == 'email':
            email_ = child_.text
            email_ = self.gds_validate_string(email_, node, 'email')
            self.email = email_
        elif nodeName_ == 'fax':
            fax_ = child_.text
            fax_ = self.gds_validate_string(fax_, node, 'fax')
            self.fax = fax_
        elif nodeName_ == 'title':
            title_ = child_.text
            title_ = self.gds_validate_string(title_, node, 'title')
            self.title = title_
        elif nodeName_ == 'organization':
            organization_ = child_.text
            organization_ = self.gds_validate_string(organization_, node, 'organization')
            self.organization = organization_
        elif nodeName_ == 'citizenship':
            citizenship_ = child_.text
            citizenship_ = self.gds_validate_string(citizenship_, node, 'citizenship')
            self.citizenship = citizenship_
        elif nodeName_ == 'country_access':
            country_access_ = child_.text
            country_access_ = self.gds_validate_string(country_access_, node, 'country_access')
            self.country_access = country_access_
        elif nodeName_ == 'org_code':
            org_code_ = child_.text
            org_code_ = self.gds_validate_string(org_code_, node, 'org_code')
            self.org_code = org_code_
        elif nodeName_ == 'emp_code':
            emp_code_ = child_.text
            emp_code_ = self.gds_validate_string(emp_code_, node, 'emp_code')
            self.emp_code = emp_code_
        elif nodeName_ == 'dept':
            dept_ = child_.text
            dept_ = self.gds_validate_string(dept_, node, 'dept')
            self.dept = dept_
        elif nodeName_ == 'address':
            obj_ = address.factory()
            obj_.build(child_)
            self.set_address(obj_)
        elif nodeName_ == 'home_phone':
            obj_ = phone_type.factory()
            obj_.build(child_)
            self.set_home_phone(obj_)
        elif nodeName_ == 'business_phone':
            obj_ = phone_type.factory()
            obj_.build(child_)
            self.set_business_phone(obj_)
        elif nodeName_ == 'notifier_login':
            notifier_login_ = child_.text
            notifier_login_ = self.gds_validate_string(notifier_login_, node, 'notifier_login')
            self.notifier_login = notifier_login_
        elif nodeName_ == 'remote_site_login':
            remote_site_login_ = child_.text
            remote_site_login_ = self.gds_validate_string(remote_site_login_, node, 'remote_site_login')
            self.remote_site_login = remote_site_login_
        elif nodeName_ == 'req_login_list':
            obj_ = req_login_listType5.factory()
            obj_.build(child_)
            self.set_req_login_list(obj_)
        elif nodeName_ == 'comment':
            comment_ = child_.text
            comment_ = self.gds_validate_string(comment_, node, 'comment')
            self.comment = comment_
        elif nodeName_ == 'position':
            position_ = child_.text
            position_ = self.gds_validate_string(position_, node, 'position')
            self.position = position_
# end class bodyType11


class dn_listType7(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dn=None):
        if dn is None:
            self.dn = []
        else:
            self.dn = dn
    def factory(*args_, **kwargs_):
        if dn_listType7.subclass:
            return dn_listType7.subclass(*args_, **kwargs_)
        else:
            return dn_listType7(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dn(self): return self.dn
    def set_dn(self, dn): self.dn = dn
    def add_dn(self, value): self.dn.append(value)
    def insert_dn(self, index, value): self.dn[index] = value
    def export(self, outfile, level, namespace_='', name_='dn_listType7', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dn_listType7')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='dn_listType7'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='dn_listType7', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for dn_ in self.dn:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdn>%s</%sdn>%s' % (namespace_, self.gds_format_string(quote_xml(dn_).encode(ExternalEncoding), input_name='dn'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.dn
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='dn_listType7'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('dn=[\n')
        level += 1
        for dn_ in self.dn:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(dn_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dn':
            dn_ = child_.text
            dn_ = self.gds_validate_string(dn_, node, 'dn')
            self.dn.append(dn_)
# end class dn_listType7


class req_login_listType5(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, req_login=None):
        if req_login is None:
            self.req_login = []
        else:
            self.req_login = req_login
    def factory(*args_, **kwargs_):
        if req_login_listType5.subclass:
            return req_login_listType5.subclass(*args_, **kwargs_)
        else:
            return req_login_listType5(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_req_login(self): return self.req_login
    def set_req_login(self, req_login): self.req_login = req_login
    def add_req_login(self, value): self.req_login.append(value)
    def insert_req_login(self, index, value): self.req_login[index] = value
    def export(self, outfile, level, namespace_='', name_='req_login_listType5', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='req_login_listType5')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='req_login_listType5'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='req_login_listType5', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for req_login_ in self.req_login:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreq_login>%s</%sreq_login>%s' % (namespace_, self.gds_format_string(quote_xml(req_login_).encode(ExternalEncoding), input_name='req_login'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.req_login
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='req_login_listType5'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('req_login=[\n')
        level += 1
        for req_login_ in self.req_login:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(req_login_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'req_login':
            req_login_ = child_.text
            req_login_ = self.gds_validate_string(req_login_, node, 'req_login')
            self.req_login.append(req_login_)
# end class req_login_listType5


class request_project_inactivateType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, header=None, body=None):
        self.header = header
        self.body = body
    def factory(*args_, **kwargs_):
        if request_project_inactivateType.subclass:
            return request_project_inactivateType.subclass(*args_, **kwargs_)
        else:
            return request_project_inactivateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_header(self): return self.header
    def set_header(self, header): self.header = header
    def get_body(self): return self.body
    def set_body(self, body): self.body = body
    def export(self, outfile, level, namespace_='', name_='request_project_inactivateType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='request_project_inactivateType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='request_project_inactivateType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='request_project_inactivateType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.header is not None:
            self.header.export(outfile, level, namespace_, name_='header', pretty_print=pretty_print)
        if self.body is not None:
            self.body.export(outfile, level, namespace_, name_='body', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.header is not None or
            self.body is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='request_project_inactivateType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.header is not None:
            showIndent(outfile, level)
            outfile.write('header=model_.header_type(\n')
            self.header.exportLiteral(outfile, level, name_='header')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.body is not None:
            showIndent(outfile, level)
            outfile.write('body=model_.bodyType12(\n')
            self.body.exportLiteral(outfile, level, name_='body')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'header':
            obj_ = header_type.factory()
            obj_.build(child_)
            self.set_header(obj_)
        elif nodeName_ == 'body':
            obj_ = bodyType12.factory()
            obj_.build(child_)
            self.set_body(obj_)
# end class request_project_inactivateType


class bodyType12(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, project_id=None, resource_list=None, comment=None, start_date=None, end_date=None, grant_num=None, alloc_resource=None, su_alloc=None, su_remain=None):
        self.project_id = project_id
        self.resource_list = resource_list
        self.comment = comment
        self.start_date = start_date
        self.end_date = end_date
        self.grant_num = grant_num
        self.alloc_resource = alloc_resource
        self.su_alloc = su_alloc
        self.su_remain = su_remain
    def factory(*args_, **kwargs_):
        if bodyType12.subclass:
            return bodyType12.subclass(*args_, **kwargs_)
        else:
            return bodyType12(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_project_id(self): return self.project_id
    def set_project_id(self, project_id): self.project_id = project_id
    def get_resource_list(self): return self.resource_list
    def set_resource_list(self, resource_list): self.resource_list = resource_list
    def get_comment(self): return self.comment
    def set_comment(self, comment): self.comment = comment
    def get_start_date(self): return self.start_date
    def set_start_date(self, start_date): self.start_date = start_date
    def get_end_date(self): return self.end_date
    def set_end_date(self, end_date): self.end_date = end_date
    def get_grant_num(self): return self.grant_num
    def set_grant_num(self, grant_num): self.grant_num = grant_num
    def get_alloc_resource(self): return self.alloc_resource
    def set_alloc_resource(self, alloc_resource): self.alloc_resource = alloc_resource
    def get_su_alloc(self): return self.su_alloc
    def set_su_alloc(self, su_alloc): self.su_alloc = su_alloc
    def get_su_remain(self): return self.su_remain
    def set_su_remain(self, su_remain): self.su_remain = su_remain
    def export(self, outfile, level, namespace_='', name_='bodyType12', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='bodyType12')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='bodyType12'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='bodyType12', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.project_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sproject_id>%s</%sproject_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.project_id).encode(ExternalEncoding), input_name='project_id'), namespace_, eol_))
        if self.resource_list is not None:
            self.resource_list.export(outfile, level, namespace_, name_='resource_list', pretty_print=pretty_print)
        if self.comment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scomment>%s</%scomment>%s' % (namespace_, self.gds_format_string(quote_xml(self.comment).encode(ExternalEncoding), input_name='comment'), namespace_, eol_))
        if self.start_date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstart_date>%s</%sstart_date>%s' % (namespace_, self.gds_format_string(quote_xml(self.start_date).encode(ExternalEncoding), input_name='start_date'), namespace_, eol_))
        if self.end_date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%send_date>%s</%send_date>%s' % (namespace_, self.gds_format_string(quote_xml(self.end_date).encode(ExternalEncoding), input_name='end_date'), namespace_, eol_))
        if self.grant_num is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sgrant_num>%s</%sgrant_num>%s' % (namespace_, self.gds_format_string(quote_xml(self.grant_num).encode(ExternalEncoding), input_name='grant_num'), namespace_, eol_))
        if self.alloc_resource is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%salloc_resource>%s</%salloc_resource>%s' % (namespace_, self.gds_format_string(quote_xml(self.alloc_resource).encode(ExternalEncoding), input_name='alloc_resource'), namespace_, eol_))
        if self.su_alloc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssu_alloc>%s</%ssu_alloc>%s' % (namespace_, self.gds_format_float(self.su_alloc, input_name='su_alloc'), namespace_, eol_))
        if self.su_remain is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssu_remain>%s</%ssu_remain>%s' % (namespace_, self.gds_format_float(self.su_remain, input_name='su_remain'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.project_id is not None or
            self.resource_list is not None or
            self.comment is not None or
            self.start_date is not None or
            self.end_date is not None or
            self.grant_num is not None or
            self.alloc_resource is not None or
            self.su_alloc is not None or
            self.su_remain is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='bodyType12'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.project_id is not None:
            showIndent(outfile, level)
            outfile.write('project_id=%s,\n' % quote_python(self.project_id).encode(ExternalEncoding))
        if self.resource_list is not None:
            showIndent(outfile, level)
            outfile.write('resource_list=model_.resource_listType8(\n')
            self.resource_list.exportLiteral(outfile, level, name_='resource_list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.comment is not None:
            showIndent(outfile, level)
            outfile.write('comment=%s,\n' % quote_python(self.comment).encode(ExternalEncoding))
        if self.start_date is not None:
            showIndent(outfile, level)
            outfile.write('start_date=%s,\n' % quote_python(self.start_date).encode(ExternalEncoding))
        if self.end_date is not None:
            showIndent(outfile, level)
            outfile.write('end_date=%s,\n' % quote_python(self.end_date).encode(ExternalEncoding))
        if self.grant_num is not None:
            showIndent(outfile, level)
            outfile.write('grant_num=%s,\n' % quote_python(self.grant_num).encode(ExternalEncoding))
        if self.alloc_resource is not None:
            showIndent(outfile, level)
            outfile.write('alloc_resource=%s,\n' % quote_python(self.alloc_resource).encode(ExternalEncoding))
        if self.su_alloc is not None:
            showIndent(outfile, level)
            outfile.write('su_alloc=%f,\n' % self.su_alloc)
        if self.su_remain is not None:
            showIndent(outfile, level)
            outfile.write('su_remain=%f,\n' % self.su_remain)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'project_id':
            project_id_ = child_.text
            project_id_ = self.gds_validate_string(project_id_, node, 'project_id')
            self.project_id = project_id_
        elif nodeName_ == 'resource_list':
            obj_ = resource_listType8.factory()
            obj_.build(child_)
            self.set_resource_list(obj_)
        elif nodeName_ == 'comment':
            comment_ = child_.text
            comment_ = self.gds_validate_string(comment_, node, 'comment')
            self.comment = comment_
        elif nodeName_ == 'start_date':
            start_date_ = child_.text
            start_date_ = self.gds_validate_string(start_date_, node, 'start_date')
            self.start_date = start_date_
        elif nodeName_ == 'end_date':
            end_date_ = child_.text
            end_date_ = self.gds_validate_string(end_date_, node, 'end_date')
            self.end_date = end_date_
        elif nodeName_ == 'grant_num':
            grant_num_ = child_.text
            grant_num_ = self.gds_validate_string(grant_num_, node, 'grant_num')
            self.grant_num = grant_num_
        elif nodeName_ == 'alloc_resource':
            alloc_resource_ = child_.text
            alloc_resource_ = self.gds_validate_string(alloc_resource_, node, 'alloc_resource')
            self.alloc_resource = alloc_resource_
        elif nodeName_ == 'su_alloc':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'su_alloc')
            self.su_alloc = fval_
        elif nodeName_ == 'su_remain':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'su_remain')
            self.su_remain = fval_
# end class bodyType12


class resource_listType8(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, resource=None):
        if resource is None:
            self.resource = []
        else:
            self.resource = resource
    def factory(*args_, **kwargs_):
        if resource_listType8.subclass:
            return resource_listType8.subclass(*args_, **kwargs_)
        else:
            return resource_listType8(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_resource(self): return self.resource
    def set_resource(self, resource): self.resource = resource
    def add_resource(self, value): self.resource.append(value)
    def insert_resource(self, index, value): self.resource[index] = value
    def export(self, outfile, level, namespace_='', name_='resource_listType8', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='resource_listType8')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='resource_listType8'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='resource_listType8', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for resource_ in self.resource:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sresource>%s</%sresource>%s' % (namespace_, self.gds_format_string(quote_xml(resource_).encode(ExternalEncoding), input_name='resource'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.resource
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='resource_listType8'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('resource=[\n')
        level += 1
        for resource_ in self.resource:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(resource_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'resource':
            resource_ = child_.text
            resource_ = self.gds_validate_string(resource_, node, 'resource')
            self.resource.append(resource_)
# end class resource_listType8


class notify_project_inactivateType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, header=None, body=None):
        self.header = header
        self.body = body
    def factory(*args_, **kwargs_):
        if notify_project_inactivateType.subclass:
            return notify_project_inactivateType.subclass(*args_, **kwargs_)
        else:
            return notify_project_inactivateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_header(self): return self.header
    def set_header(self, header): self.header = header
    def get_body(self): return self.body
    def set_body(self, body): self.body = body
    def export(self, outfile, level, namespace_='', name_='notify_project_inactivateType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='notify_project_inactivateType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='notify_project_inactivateType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='notify_project_inactivateType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.header is not None:
            self.header.export(outfile, level, namespace_, name_='header', pretty_print=pretty_print)
        if self.body is not None:
            self.body.export(outfile, level, namespace_, name_='body', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.header is not None or
            self.body is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='notify_project_inactivateType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.header is not None:
            showIndent(outfile, level)
            outfile.write('header=model_.header_type(\n')
            self.header.exportLiteral(outfile, level, name_='header')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.body is not None:
            showIndent(outfile, level)
            outfile.write('body=model_.bodyType13(\n')
            self.body.exportLiteral(outfile, level, name_='body')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'header':
            obj_ = header_type.factory()
            obj_.build(child_)
            self.set_header(obj_)
        elif nodeName_ == 'body':
            obj_ = bodyType13.factory()
            obj_.build(child_)
            self.set_body(obj_)
# end class notify_project_inactivateType


class bodyType13(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, project_id=None, resource_list=None, comment=None, account_activity_time=None):
        self.project_id = project_id
        self.resource_list = resource_list
        self.comment = comment
        self.account_activity_time = account_activity_time
    def factory(*args_, **kwargs_):
        if bodyType13.subclass:
            return bodyType13.subclass(*args_, **kwargs_)
        else:
            return bodyType13(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_project_id(self): return self.project_id
    def set_project_id(self, project_id): self.project_id = project_id
    def get_resource_list(self): return self.resource_list
    def set_resource_list(self, resource_list): self.resource_list = resource_list
    def get_comment(self): return self.comment
    def set_comment(self, comment): self.comment = comment
    def get_account_activity_time(self): return self.account_activity_time
    def set_account_activity_time(self, account_activity_time): self.account_activity_time = account_activity_time
    def export(self, outfile, level, namespace_='', name_='bodyType13', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='bodyType13')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='bodyType13'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='bodyType13', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.project_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sproject_id>%s</%sproject_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.project_id).encode(ExternalEncoding), input_name='project_id'), namespace_, eol_))
        if self.resource_list is not None:
            self.resource_list.export(outfile, level, namespace_, name_='resource_list', pretty_print=pretty_print)
        if self.comment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scomment>%s</%scomment>%s' % (namespace_, self.gds_format_string(quote_xml(self.comment).encode(ExternalEncoding), input_name='comment'), namespace_, eol_))
        if self.account_activity_time is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%saccount_activity_time>%s</%saccount_activity_time>%s' % (namespace_, self.gds_format_string(quote_xml(self.account_activity_time).encode(ExternalEncoding), input_name='account_activity_time'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.project_id is not None or
            self.resource_list is not None or
            self.comment is not None or
            self.account_activity_time is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='bodyType13'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.project_id is not None:
            showIndent(outfile, level)
            outfile.write('project_id=%s,\n' % quote_python(self.project_id).encode(ExternalEncoding))
        if self.resource_list is not None:
            showIndent(outfile, level)
            outfile.write('resource_list=model_.resource_listType9(\n')
            self.resource_list.exportLiteral(outfile, level, name_='resource_list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.comment is not None:
            showIndent(outfile, level)
            outfile.write('comment=%s,\n' % quote_python(self.comment).encode(ExternalEncoding))
        if self.account_activity_time is not None:
            showIndent(outfile, level)
            outfile.write('account_activity_time=%s,\n' % quote_python(self.account_activity_time).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'project_id':
            project_id_ = child_.text
            project_id_ = self.gds_validate_string(project_id_, node, 'project_id')
            self.project_id = project_id_
        elif nodeName_ == 'resource_list':
            obj_ = resource_listType9.factory()
            obj_.build(child_)
            self.set_resource_list(obj_)
        elif nodeName_ == 'comment':
            comment_ = child_.text
            comment_ = self.gds_validate_string(comment_, node, 'comment')
            self.comment = comment_
        elif nodeName_ == 'account_activity_time':
            account_activity_time_ = child_.text
            account_activity_time_ = self.gds_validate_string(account_activity_time_, node, 'account_activity_time')
            self.account_activity_time = account_activity_time_
# end class bodyType13


class resource_listType9(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, resource=None):
        if resource is None:
            self.resource = []
        else:
            self.resource = resource
    def factory(*args_, **kwargs_):
        if resource_listType9.subclass:
            return resource_listType9.subclass(*args_, **kwargs_)
        else:
            return resource_listType9(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_resource(self): return self.resource
    def set_resource(self, resource): self.resource = resource
    def add_resource(self, value): self.resource.append(value)
    def insert_resource(self, index, value): self.resource[index] = value
    def export(self, outfile, level, namespace_='', name_='resource_listType9', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='resource_listType9')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='resource_listType9'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='resource_listType9', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for resource_ in self.resource:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sresource>%s</%sresource>%s' % (namespace_, self.gds_format_string(quote_xml(resource_).encode(ExternalEncoding), input_name='resource'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.resource
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='resource_listType9'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('resource=[\n')
        level += 1
        for resource_ in self.resource:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(resource_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'resource':
            resource_ = child_.text
            resource_ = self.gds_validate_string(resource_, node, 'resource')
            self.resource.append(resource_)
# end class resource_listType9


class request_project_reactivateType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, header=None, body=None):
        self.header = header
        self.body = body
    def factory(*args_, **kwargs_):
        if request_project_reactivateType.subclass:
            return request_project_reactivateType.subclass(*args_, **kwargs_)
        else:
            return request_project_reactivateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_header(self): return self.header
    def set_header(self, header): self.header = header
    def get_body(self): return self.body
    def set_body(self, body): self.body = body
    def export(self, outfile, level, namespace_='', name_='request_project_reactivateType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='request_project_reactivateType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='request_project_reactivateType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='request_project_reactivateType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.header is not None:
            self.header.export(outfile, level, namespace_, name_='header', pretty_print=pretty_print)
        if self.body is not None:
            self.body.export(outfile, level, namespace_, name_='body', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.header is not None or
            self.body is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='request_project_reactivateType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.header is not None:
            showIndent(outfile, level)
            outfile.write('header=model_.header_type(\n')
            self.header.exportLiteral(outfile, level, name_='header')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.body is not None:
            showIndent(outfile, level)
            outfile.write('body=model_.bodyType14(\n')
            self.body.exportLiteral(outfile, level, name_='body')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'header':
            obj_ = header_type.factory()
            obj_.build(child_)
            self.set_header(obj_)
        elif nodeName_ == 'body':
            obj_ = bodyType14.factory()
            obj_.build(child_)
            self.set_body(obj_)
# end class request_project_reactivateType


class bodyType14(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, project_id=None, resource_list=None, person_id=None, comment=None, start_date=None, end_date=None, grant_num=None, alloc_resource=None, su_alloc=None, su_remain=None):
        self.project_id = project_id
        self.resource_list = resource_list
        self.person_id = person_id
        self.comment = comment
        self.start_date = start_date
        self.end_date = end_date
        self.grant_num = grant_num
        self.alloc_resource = alloc_resource
        self.su_alloc = su_alloc
        self.su_remain = su_remain
    def factory(*args_, **kwargs_):
        if bodyType14.subclass:
            return bodyType14.subclass(*args_, **kwargs_)
        else:
            return bodyType14(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_project_id(self): return self.project_id
    def set_project_id(self, project_id): self.project_id = project_id
    def get_resource_list(self): return self.resource_list
    def set_resource_list(self, resource_list): self.resource_list = resource_list
    def get_person_id(self): return self.person_id
    def set_person_id(self, person_id): self.person_id = person_id
    def get_comment(self): return self.comment
    def set_comment(self, comment): self.comment = comment
    def get_start_date(self): return self.start_date
    def set_start_date(self, start_date): self.start_date = start_date
    def get_end_date(self): return self.end_date
    def set_end_date(self, end_date): self.end_date = end_date
    def get_grant_num(self): return self.grant_num
    def set_grant_num(self, grant_num): self.grant_num = grant_num
    def get_alloc_resource(self): return self.alloc_resource
    def set_alloc_resource(self, alloc_resource): self.alloc_resource = alloc_resource
    def get_su_alloc(self): return self.su_alloc
    def set_su_alloc(self, su_alloc): self.su_alloc = su_alloc
    def get_su_remain(self): return self.su_remain
    def set_su_remain(self, su_remain): self.su_remain = su_remain
    def export(self, outfile, level, namespace_='', name_='bodyType14', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='bodyType14')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='bodyType14'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='bodyType14', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.project_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sproject_id>%s</%sproject_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.project_id).encode(ExternalEncoding), input_name='project_id'), namespace_, eol_))
        if self.resource_list is not None:
            self.resource_list.export(outfile, level, namespace_, name_='resource_list', pretty_print=pretty_print)
        if self.person_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sperson_id>%s</%sperson_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.person_id).encode(ExternalEncoding), input_name='person_id'), namespace_, eol_))
        if self.comment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scomment>%s</%scomment>%s' % (namespace_, self.gds_format_string(quote_xml(self.comment).encode(ExternalEncoding), input_name='comment'), namespace_, eol_))
        if self.start_date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstart_date>%s</%sstart_date>%s' % (namespace_, self.gds_format_string(quote_xml(self.start_date).encode(ExternalEncoding), input_name='start_date'), namespace_, eol_))
        if self.end_date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%send_date>%s</%send_date>%s' % (namespace_, self.gds_format_string(quote_xml(self.end_date).encode(ExternalEncoding), input_name='end_date'), namespace_, eol_))
        if self.grant_num is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sgrant_num>%s</%sgrant_num>%s' % (namespace_, self.gds_format_string(quote_xml(self.grant_num).encode(ExternalEncoding), input_name='grant_num'), namespace_, eol_))
        if self.alloc_resource is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%salloc_resource>%s</%salloc_resource>%s' % (namespace_, self.gds_format_string(quote_xml(self.alloc_resource).encode(ExternalEncoding), input_name='alloc_resource'), namespace_, eol_))
        if self.su_alloc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssu_alloc>%s</%ssu_alloc>%s' % (namespace_, self.gds_format_float(self.su_alloc, input_name='su_alloc'), namespace_, eol_))
        if self.su_remain is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssu_remain>%s</%ssu_remain>%s' % (namespace_, self.gds_format_float(self.su_remain, input_name='su_remain'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.project_id is not None or
            self.resource_list is not None or
            self.person_id is not None or
            self.comment is not None or
            self.start_date is not None or
            self.end_date is not None or
            self.grant_num is not None or
            self.alloc_resource is not None or
            self.su_alloc is not None or
            self.su_remain is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='bodyType14'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.project_id is not None:
            showIndent(outfile, level)
            outfile.write('project_id=%s,\n' % quote_python(self.project_id).encode(ExternalEncoding))
        if self.resource_list is not None:
            showIndent(outfile, level)
            outfile.write('resource_list=model_.resource_listType10(\n')
            self.resource_list.exportLiteral(outfile, level, name_='resource_list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.person_id is not None:
            showIndent(outfile, level)
            outfile.write('person_id=%s,\n' % quote_python(self.person_id).encode(ExternalEncoding))
        if self.comment is not None:
            showIndent(outfile, level)
            outfile.write('comment=%s,\n' % quote_python(self.comment).encode(ExternalEncoding))
        if self.start_date is not None:
            showIndent(outfile, level)
            outfile.write('start_date=%s,\n' % quote_python(self.start_date).encode(ExternalEncoding))
        if self.end_date is not None:
            showIndent(outfile, level)
            outfile.write('end_date=%s,\n' % quote_python(self.end_date).encode(ExternalEncoding))
        if self.grant_num is not None:
            showIndent(outfile, level)
            outfile.write('grant_num=%s,\n' % quote_python(self.grant_num).encode(ExternalEncoding))
        if self.alloc_resource is not None:
            showIndent(outfile, level)
            outfile.write('alloc_resource=%s,\n' % quote_python(self.alloc_resource).encode(ExternalEncoding))
        if self.su_alloc is not None:
            showIndent(outfile, level)
            outfile.write('su_alloc=%f,\n' % self.su_alloc)
        if self.su_remain is not None:
            showIndent(outfile, level)
            outfile.write('su_remain=%f,\n' % self.su_remain)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'project_id':
            project_id_ = child_.text
            project_id_ = self.gds_validate_string(project_id_, node, 'project_id')
            self.project_id = project_id_
        elif nodeName_ == 'resource_list':
            obj_ = resource_listType10.factory()
            obj_.build(child_)
            self.set_resource_list(obj_)
        elif nodeName_ == 'person_id':
            person_id_ = child_.text
            person_id_ = self.gds_validate_string(person_id_, node, 'person_id')
            self.person_id = person_id_
        elif nodeName_ == 'comment':
            comment_ = child_.text
            comment_ = self.gds_validate_string(comment_, node, 'comment')
            self.comment = comment_
        elif nodeName_ == 'start_date':
            start_date_ = child_.text
            start_date_ = self.gds_validate_string(start_date_, node, 'start_date')
            self.start_date = start_date_
        elif nodeName_ == 'end_date':
            end_date_ = child_.text
            end_date_ = self.gds_validate_string(end_date_, node, 'end_date')
            self.end_date = end_date_
        elif nodeName_ == 'grant_num':
            grant_num_ = child_.text
            grant_num_ = self.gds_validate_string(grant_num_, node, 'grant_num')
            self.grant_num = grant_num_
        elif nodeName_ == 'alloc_resource':
            alloc_resource_ = child_.text
            alloc_resource_ = self.gds_validate_string(alloc_resource_, node, 'alloc_resource')
            self.alloc_resource = alloc_resource_
        elif nodeName_ == 'su_alloc':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'su_alloc')
            self.su_alloc = fval_
        elif nodeName_ == 'su_remain':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'su_remain')
            self.su_remain = fval_
# end class bodyType14


class resource_listType10(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, resource=None):
        if resource is None:
            self.resource = []
        else:
            self.resource = resource
    def factory(*args_, **kwargs_):
        if resource_listType10.subclass:
            return resource_listType10.subclass(*args_, **kwargs_)
        else:
            return resource_listType10(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_resource(self): return self.resource
    def set_resource(self, resource): self.resource = resource
    def add_resource(self, value): self.resource.append(value)
    def insert_resource(self, index, value): self.resource[index] = value
    def export(self, outfile, level, namespace_='', name_='resource_listType10', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='resource_listType10')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='resource_listType10'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='resource_listType10', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for resource_ in self.resource:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sresource>%s</%sresource>%s' % (namespace_, self.gds_format_string(quote_xml(resource_).encode(ExternalEncoding), input_name='resource'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.resource
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='resource_listType10'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('resource=[\n')
        level += 1
        for resource_ in self.resource:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(resource_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'resource':
            resource_ = child_.text
            resource_ = self.gds_validate_string(resource_, node, 'resource')
            self.resource.append(resource_)
# end class resource_listType10


class notify_project_reactivateType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, header=None, body=None):
        self.header = header
        self.body = body
    def factory(*args_, **kwargs_):
        if notify_project_reactivateType.subclass:
            return notify_project_reactivateType.subclass(*args_, **kwargs_)
        else:
            return notify_project_reactivateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_header(self): return self.header
    def set_header(self, header): self.header = header
    def get_body(self): return self.body
    def set_body(self, body): self.body = body
    def export(self, outfile, level, namespace_='', name_='notify_project_reactivateType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='notify_project_reactivateType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='notify_project_reactivateType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='notify_project_reactivateType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.header is not None:
            self.header.export(outfile, level, namespace_, name_='header', pretty_print=pretty_print)
        if self.body is not None:
            self.body.export(outfile, level, namespace_, name_='body', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.header is not None or
            self.body is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='notify_project_reactivateType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.header is not None:
            showIndent(outfile, level)
            outfile.write('header=model_.header_type(\n')
            self.header.exportLiteral(outfile, level, name_='header')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.body is not None:
            showIndent(outfile, level)
            outfile.write('body=model_.bodyType15(\n')
            self.body.exportLiteral(outfile, level, name_='body')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'header':
            obj_ = header_type.factory()
            obj_.build(child_)
            self.set_header(obj_)
        elif nodeName_ == 'body':
            obj_ = bodyType15.factory()
            obj_.build(child_)
            self.set_body(obj_)
# end class notify_project_reactivateType


class bodyType15(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, project_id=None, resource_list=None, comment=None, account_activity_time=None):
        self.project_id = project_id
        self.resource_list = resource_list
        self.comment = comment
        self.account_activity_time = account_activity_time
    def factory(*args_, **kwargs_):
        if bodyType15.subclass:
            return bodyType15.subclass(*args_, **kwargs_)
        else:
            return bodyType15(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_project_id(self): return self.project_id
    def set_project_id(self, project_id): self.project_id = project_id
    def get_resource_list(self): return self.resource_list
    def set_resource_list(self, resource_list): self.resource_list = resource_list
    def get_comment(self): return self.comment
    def set_comment(self, comment): self.comment = comment
    def get_account_activity_time(self): return self.account_activity_time
    def set_account_activity_time(self, account_activity_time): self.account_activity_time = account_activity_time
    def export(self, outfile, level, namespace_='', name_='bodyType15', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='bodyType15')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='bodyType15'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='bodyType15', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.project_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sproject_id>%s</%sproject_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.project_id).encode(ExternalEncoding), input_name='project_id'), namespace_, eol_))
        if self.resource_list is not None:
            self.resource_list.export(outfile, level, namespace_, name_='resource_list', pretty_print=pretty_print)
        if self.comment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scomment>%s</%scomment>%s' % (namespace_, self.gds_format_string(quote_xml(self.comment).encode(ExternalEncoding), input_name='comment'), namespace_, eol_))
        if self.account_activity_time is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%saccount_activity_time>%s</%saccount_activity_time>%s' % (namespace_, self.gds_format_string(quote_xml(self.account_activity_time).encode(ExternalEncoding), input_name='account_activity_time'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.project_id is not None or
            self.resource_list is not None or
            self.comment is not None or
            self.account_activity_time is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='bodyType15'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.project_id is not None:
            showIndent(outfile, level)
            outfile.write('project_id=%s,\n' % quote_python(self.project_id).encode(ExternalEncoding))
        if self.resource_list is not None:
            showIndent(outfile, level)
            outfile.write('resource_list=model_.resource_listType11(\n')
            self.resource_list.exportLiteral(outfile, level, name_='resource_list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.comment is not None:
            showIndent(outfile, level)
            outfile.write('comment=%s,\n' % quote_python(self.comment).encode(ExternalEncoding))
        if self.account_activity_time is not None:
            showIndent(outfile, level)
            outfile.write('account_activity_time=%s,\n' % quote_python(self.account_activity_time).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'project_id':
            project_id_ = child_.text
            project_id_ = self.gds_validate_string(project_id_, node, 'project_id')
            self.project_id = project_id_
        elif nodeName_ == 'resource_list':
            obj_ = resource_listType11.factory()
            obj_.build(child_)
            self.set_resource_list(obj_)
        elif nodeName_ == 'comment':
            comment_ = child_.text
            comment_ = self.gds_validate_string(comment_, node, 'comment')
            self.comment = comment_
        elif nodeName_ == 'account_activity_time':
            account_activity_time_ = child_.text
            account_activity_time_ = self.gds_validate_string(account_activity_time_, node, 'account_activity_time')
            self.account_activity_time = account_activity_time_
# end class bodyType15


class resource_listType11(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, resource=None):
        if resource is None:
            self.resource = []
        else:
            self.resource = resource
    def factory(*args_, **kwargs_):
        if resource_listType11.subclass:
            return resource_listType11.subclass(*args_, **kwargs_)
        else:
            return resource_listType11(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_resource(self): return self.resource
    def set_resource(self, resource): self.resource = resource
    def add_resource(self, value): self.resource.append(value)
    def insert_resource(self, index, value): self.resource[index] = value
    def export(self, outfile, level, namespace_='', name_='resource_listType11', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='resource_listType11')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='resource_listType11'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='resource_listType11', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for resource_ in self.resource:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sresource>%s</%sresource>%s' % (namespace_, self.gds_format_string(quote_xml(resource_).encode(ExternalEncoding), input_name='resource'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.resource
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='resource_listType11'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('resource=[\n')
        level += 1
        for resource_ in self.resource:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(resource_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'resource':
            resource_ = child_.text
            resource_ = self.gds_validate_string(resource_, node, 'resource')
            self.resource.append(resource_)
# end class resource_listType11


class request_account_inactivateType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, header=None, body=None):
        self.header = header
        self.body = body
    def factory(*args_, **kwargs_):
        if request_account_inactivateType.subclass:
            return request_account_inactivateType.subclass(*args_, **kwargs_)
        else:
            return request_account_inactivateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_header(self): return self.header
    def set_header(self, header): self.header = header
    def get_body(self): return self.body
    def set_body(self, body): self.body = body
    def export(self, outfile, level, namespace_='', name_='request_account_inactivateType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='request_account_inactivateType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='request_account_inactivateType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='request_account_inactivateType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.header is not None:
            self.header.export(outfile, level, namespace_, name_='header', pretty_print=pretty_print)
        if self.body is not None:
            self.body.export(outfile, level, namespace_, name_='body', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.header is not None or
            self.body is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='request_account_inactivateType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.header is not None:
            showIndent(outfile, level)
            outfile.write('header=model_.header_type(\n')
            self.header.exportLiteral(outfile, level, name_='header')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.body is not None:
            showIndent(outfile, level)
            outfile.write('body=model_.bodyType16(\n')
            self.body.exportLiteral(outfile, level, name_='body')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'header':
            obj_ = header_type.factory()
            obj_.build(child_)
            self.set_header(obj_)
        elif nodeName_ == 'body':
            obj_ = bodyType16.factory()
            obj_.build(child_)
            self.set_body(obj_)
# end class request_account_inactivateType


class bodyType16(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, project_id=None, person_id=None, alloc_resource=None, resource_list=None, comment=None, account_activity_time=None):
        self.project_id = project_id
        self.person_id = person_id
        self.alloc_resource = alloc_resource
        self.resource_list = resource_list
        self.comment = comment
        self.account_activity_time = account_activity_time
    def factory(*args_, **kwargs_):
        if bodyType16.subclass:
            return bodyType16.subclass(*args_, **kwargs_)
        else:
            return bodyType16(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_project_id(self): return self.project_id
    def set_project_id(self, project_id): self.project_id = project_id
    def get_person_id(self): return self.person_id
    def set_person_id(self, person_id): self.person_id = person_id
    def get_alloc_resource(self): return self.alloc_resource
    def set_alloc_resource(self, alloc_resource): self.alloc_resource = alloc_resource
    def get_resource_list(self): return self.resource_list
    def set_resource_list(self, resource_list): self.resource_list = resource_list
    def get_comment(self): return self.comment
    def set_comment(self, comment): self.comment = comment
    def get_account_activity_time(self): return self.account_activity_time
    def set_account_activity_time(self, account_activity_time): self.account_activity_time = account_activity_time
    def export(self, outfile, level, namespace_='', name_='bodyType16', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='bodyType16')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='bodyType16'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='bodyType16', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.project_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sproject_id>%s</%sproject_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.project_id).encode(ExternalEncoding), input_name='project_id'), namespace_, eol_))
        if self.person_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sperson_id>%s</%sperson_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.person_id).encode(ExternalEncoding), input_name='person_id'), namespace_, eol_))
        if self.alloc_resource is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%salloc_resource>%s</%salloc_resource>%s' % (namespace_, self.gds_format_string(quote_xml(self.alloc_resource).encode(ExternalEncoding), input_name='alloc_resource'), namespace_, eol_))
        if self.resource_list is not None:
            self.resource_list.export(outfile, level, namespace_, name_='resource_list', pretty_print=pretty_print)
        if self.comment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scomment>%s</%scomment>%s' % (namespace_, self.gds_format_string(quote_xml(self.comment).encode(ExternalEncoding), input_name='comment'), namespace_, eol_))
        if self.account_activity_time is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%saccount_activity_time>%s</%saccount_activity_time>%s' % (namespace_, self.gds_format_string(quote_xml(self.account_activity_time).encode(ExternalEncoding), input_name='account_activity_time'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.project_id is not None or
            self.person_id is not None or
            self.alloc_resource is not None or
            self.resource_list is not None or
            self.comment is not None or
            self.account_activity_time is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='bodyType16'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.project_id is not None:
            showIndent(outfile, level)
            outfile.write('project_id=%s,\n' % quote_python(self.project_id).encode(ExternalEncoding))
        if self.person_id is not None:
            showIndent(outfile, level)
            outfile.write('person_id=%s,\n' % quote_python(self.person_id).encode(ExternalEncoding))
        if self.alloc_resource is not None:
            showIndent(outfile, level)
            outfile.write('alloc_resource=%s,\n' % quote_python(self.alloc_resource).encode(ExternalEncoding))
        if self.resource_list is not None:
            showIndent(outfile, level)
            outfile.write('resource_list=model_.resource_listType12(\n')
            self.resource_list.exportLiteral(outfile, level, name_='resource_list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.comment is not None:
            showIndent(outfile, level)
            outfile.write('comment=%s,\n' % quote_python(self.comment).encode(ExternalEncoding))
        if self.account_activity_time is not None:
            showIndent(outfile, level)
            outfile.write('account_activity_time=%s,\n' % quote_python(self.account_activity_time).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'project_id':
            project_id_ = child_.text
            project_id_ = self.gds_validate_string(project_id_, node, 'project_id')
            self.project_id = project_id_
        elif nodeName_ == 'person_id':
            person_id_ = child_.text
            person_id_ = self.gds_validate_string(person_id_, node, 'person_id')
            self.person_id = person_id_
        elif nodeName_ == 'alloc_resource':
            alloc_resource_ = child_.text
            alloc_resource_ = self.gds_validate_string(alloc_resource_, node, 'alloc_resource')
            self.alloc_resource = alloc_resource_
        elif nodeName_ == 'resource_list':
            obj_ = resource_listType12.factory()
            obj_.build(child_)
            self.set_resource_list(obj_)
        elif nodeName_ == 'comment':
            comment_ = child_.text
            comment_ = self.gds_validate_string(comment_, node, 'comment')
            self.comment = comment_
        elif nodeName_ == 'account_activity_time':
            account_activity_time_ = child_.text
            account_activity_time_ = self.gds_validate_string(account_activity_time_, node, 'account_activity_time')
            self.account_activity_time = account_activity_time_
# end class bodyType16


class resource_listType12(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, resource=None):
        if resource is None:
            self.resource = []
        else:
            self.resource = resource
    def factory(*args_, **kwargs_):
        if resource_listType12.subclass:
            return resource_listType12.subclass(*args_, **kwargs_)
        else:
            return resource_listType12(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_resource(self): return self.resource
    def set_resource(self, resource): self.resource = resource
    def add_resource(self, value): self.resource.append(value)
    def insert_resource(self, index, value): self.resource[index] = value
    def export(self, outfile, level, namespace_='', name_='resource_listType12', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='resource_listType12')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='resource_listType12'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='resource_listType12', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for resource_ in self.resource:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sresource>%s</%sresource>%s' % (namespace_, self.gds_format_string(quote_xml(resource_).encode(ExternalEncoding), input_name='resource'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.resource
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='resource_listType12'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('resource=[\n')
        level += 1
        for resource_ in self.resource:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(resource_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'resource':
            resource_ = child_.text
            resource_ = self.gds_validate_string(resource_, node, 'resource')
            self.resource.append(resource_)
# end class resource_listType12


class notify_account_inactivateType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, header=None, body=None):
        self.header = header
        self.body = body
    def factory(*args_, **kwargs_):
        if notify_account_inactivateType.subclass:
            return notify_account_inactivateType.subclass(*args_, **kwargs_)
        else:
            return notify_account_inactivateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_header(self): return self.header
    def set_header(self, header): self.header = header
    def get_body(self): return self.body
    def set_body(self, body): self.body = body
    def export(self, outfile, level, namespace_='', name_='notify_account_inactivateType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='notify_account_inactivateType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='notify_account_inactivateType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='notify_account_inactivateType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.header is not None:
            self.header.export(outfile, level, namespace_, name_='header', pretty_print=pretty_print)
        if self.body is not None:
            self.body.export(outfile, level, namespace_, name_='body', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.header is not None or
            self.body is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='notify_account_inactivateType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.header is not None:
            showIndent(outfile, level)
            outfile.write('header=model_.header_type(\n')
            self.header.exportLiteral(outfile, level, name_='header')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.body is not None:
            showIndent(outfile, level)
            outfile.write('body=model_.bodyType17(\n')
            self.body.exportLiteral(outfile, level, name_='body')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'header':
            obj_ = header_type.factory()
            obj_.build(child_)
            self.set_header(obj_)
        elif nodeName_ == 'body':
            obj_ = bodyType17.factory()
            obj_.build(child_)
            self.set_body(obj_)
# end class notify_account_inactivateType


class bodyType17(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, project_id=None, person_id=None, resource_list=None, comment=None, account_activity_time=None):
        self.project_id = project_id
        self.person_id = person_id
        self.resource_list = resource_list
        self.comment = comment
        self.account_activity_time = account_activity_time
    def factory(*args_, **kwargs_):
        if bodyType17.subclass:
            return bodyType17.subclass(*args_, **kwargs_)
        else:
            return bodyType17(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_project_id(self): return self.project_id
    def set_project_id(self, project_id): self.project_id = project_id
    def get_person_id(self): return self.person_id
    def set_person_id(self, person_id): self.person_id = person_id
    def get_resource_list(self): return self.resource_list
    def set_resource_list(self, resource_list): self.resource_list = resource_list
    def get_comment(self): return self.comment
    def set_comment(self, comment): self.comment = comment
    def get_account_activity_time(self): return self.account_activity_time
    def set_account_activity_time(self, account_activity_time): self.account_activity_time = account_activity_time
    def export(self, outfile, level, namespace_='', name_='bodyType17', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='bodyType17')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='bodyType17'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='bodyType17', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.project_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sproject_id>%s</%sproject_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.project_id).encode(ExternalEncoding), input_name='project_id'), namespace_, eol_))
        if self.person_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sperson_id>%s</%sperson_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.person_id).encode(ExternalEncoding), input_name='person_id'), namespace_, eol_))
        if self.resource_list is not None:
            self.resource_list.export(outfile, level, namespace_, name_='resource_list', pretty_print=pretty_print)
        if self.comment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scomment>%s</%scomment>%s' % (namespace_, self.gds_format_string(quote_xml(self.comment).encode(ExternalEncoding), input_name='comment'), namespace_, eol_))
        if self.account_activity_time is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%saccount_activity_time>%s</%saccount_activity_time>%s' % (namespace_, self.gds_format_string(quote_xml(self.account_activity_time).encode(ExternalEncoding), input_name='account_activity_time'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.project_id is not None or
            self.person_id is not None or
            self.resource_list is not None or
            self.comment is not None or
            self.account_activity_time is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='bodyType17'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.project_id is not None:
            showIndent(outfile, level)
            outfile.write('project_id=%s,\n' % quote_python(self.project_id).encode(ExternalEncoding))
        if self.person_id is not None:
            showIndent(outfile, level)
            outfile.write('person_id=%s,\n' % quote_python(self.person_id).encode(ExternalEncoding))
        if self.resource_list is not None:
            showIndent(outfile, level)
            outfile.write('resource_list=model_.resource_listType13(\n')
            self.resource_list.exportLiteral(outfile, level, name_='resource_list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.comment is not None:
            showIndent(outfile, level)
            outfile.write('comment=%s,\n' % quote_python(self.comment).encode(ExternalEncoding))
        if self.account_activity_time is not None:
            showIndent(outfile, level)
            outfile.write('account_activity_time=%s,\n' % quote_python(self.account_activity_time).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'project_id':
            project_id_ = child_.text
            project_id_ = self.gds_validate_string(project_id_, node, 'project_id')
            self.project_id = project_id_
        elif nodeName_ == 'person_id':
            person_id_ = child_.text
            person_id_ = self.gds_validate_string(person_id_, node, 'person_id')
            self.person_id = person_id_
        elif nodeName_ == 'resource_list':
            obj_ = resource_listType13.factory()
            obj_.build(child_)
            self.set_resource_list(obj_)
        elif nodeName_ == 'comment':
            comment_ = child_.text
            comment_ = self.gds_validate_string(comment_, node, 'comment')
            self.comment = comment_
        elif nodeName_ == 'account_activity_time':
            account_activity_time_ = child_.text
            account_activity_time_ = self.gds_validate_string(account_activity_time_, node, 'account_activity_time')
            self.account_activity_time = account_activity_time_
# end class bodyType17


class resource_listType13(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, resource=None):
        if resource is None:
            self.resource = []
        else:
            self.resource = resource
    def factory(*args_, **kwargs_):
        if resource_listType13.subclass:
            return resource_listType13.subclass(*args_, **kwargs_)
        else:
            return resource_listType13(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_resource(self): return self.resource
    def set_resource(self, resource): self.resource = resource
    def add_resource(self, value): self.resource.append(value)
    def insert_resource(self, index, value): self.resource[index] = value
    def export(self, outfile, level, namespace_='', name_='resource_listType13', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='resource_listType13')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='resource_listType13'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='resource_listType13', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for resource_ in self.resource:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sresource>%s</%sresource>%s' % (namespace_, self.gds_format_string(quote_xml(resource_).encode(ExternalEncoding), input_name='resource'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.resource
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='resource_listType13'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('resource=[\n')
        level += 1
        for resource_ in self.resource:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(resource_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'resource':
            resource_ = child_.text
            resource_ = self.gds_validate_string(resource_, node, 'resource')
            self.resource.append(resource_)
# end class resource_listType13


class request_account_reactivateType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, header=None, body=None):
        self.header = header
        self.body = body
    def factory(*args_, **kwargs_):
        if request_account_reactivateType.subclass:
            return request_account_reactivateType.subclass(*args_, **kwargs_)
        else:
            return request_account_reactivateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_header(self): return self.header
    def set_header(self, header): self.header = header
    def get_body(self): return self.body
    def set_body(self, body): self.body = body
    def export(self, outfile, level, namespace_='', name_='request_account_reactivateType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='request_account_reactivateType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='request_account_reactivateType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='request_account_reactivateType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.header is not None:
            self.header.export(outfile, level, namespace_, name_='header', pretty_print=pretty_print)
        if self.body is not None:
            self.body.export(outfile, level, namespace_, name_='body', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.header is not None or
            self.body is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='request_account_reactivateType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.header is not None:
            showIndent(outfile, level)
            outfile.write('header=model_.header_type(\n')
            self.header.exportLiteral(outfile, level, name_='header')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.body is not None:
            showIndent(outfile, level)
            outfile.write('body=model_.bodyType18(\n')
            self.body.exportLiteral(outfile, level, name_='body')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'header':
            obj_ = header_type.factory()
            obj_.build(child_)
            self.set_header(obj_)
        elif nodeName_ == 'body':
            obj_ = bodyType18.factory()
            obj_.build(child_)
            self.set_body(obj_)
# end class request_account_reactivateType


class bodyType18(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, project_id=None, person_id=None, alloc_resource=None, resource_list=None, comment=None, account_activity_time=None):
        self.project_id = project_id
        self.person_id = person_id
        self.alloc_resource = alloc_resource
        self.resource_list = resource_list
        self.comment = comment
        self.account_activity_time = account_activity_time
    def factory(*args_, **kwargs_):
        if bodyType18.subclass:
            return bodyType18.subclass(*args_, **kwargs_)
        else:
            return bodyType18(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_project_id(self): return self.project_id
    def set_project_id(self, project_id): self.project_id = project_id
    def get_person_id(self): return self.person_id
    def set_person_id(self, person_id): self.person_id = person_id
    def get_alloc_resource(self): return self.alloc_resource
    def set_alloc_resource(self, alloc_resource): self.alloc_resource = alloc_resource
    def get_resource_list(self): return self.resource_list
    def set_resource_list(self, resource_list): self.resource_list = resource_list
    def get_comment(self): return self.comment
    def set_comment(self, comment): self.comment = comment
    def get_account_activity_time(self): return self.account_activity_time
    def set_account_activity_time(self, account_activity_time): self.account_activity_time = account_activity_time
    def export(self, outfile, level, namespace_='', name_='bodyType18', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='bodyType18')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='bodyType18'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='bodyType18', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.project_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sproject_id>%s</%sproject_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.project_id).encode(ExternalEncoding), input_name='project_id'), namespace_, eol_))
        if self.person_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sperson_id>%s</%sperson_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.person_id).encode(ExternalEncoding), input_name='person_id'), namespace_, eol_))
        if self.alloc_resource is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%salloc_resource>%s</%salloc_resource>%s' % (namespace_, self.gds_format_string(quote_xml(self.alloc_resource).encode(ExternalEncoding), input_name='alloc_resource'), namespace_, eol_))
        if self.resource_list is not None:
            self.resource_list.export(outfile, level, namespace_, name_='resource_list', pretty_print=pretty_print)
        if self.comment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scomment>%s</%scomment>%s' % (namespace_, self.gds_format_string(quote_xml(self.comment).encode(ExternalEncoding), input_name='comment'), namespace_, eol_))
        if self.account_activity_time is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%saccount_activity_time>%s</%saccount_activity_time>%s' % (namespace_, self.gds_format_string(quote_xml(self.account_activity_time).encode(ExternalEncoding), input_name='account_activity_time'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.project_id is not None or
            self.person_id is not None or
            self.alloc_resource is not None or
            self.resource_list is not None or
            self.comment is not None or
            self.account_activity_time is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='bodyType18'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.project_id is not None:
            showIndent(outfile, level)
            outfile.write('project_id=%s,\n' % quote_python(self.project_id).encode(ExternalEncoding))
        if self.person_id is not None:
            showIndent(outfile, level)
            outfile.write('person_id=%s,\n' % quote_python(self.person_id).encode(ExternalEncoding))
        if self.alloc_resource is not None:
            showIndent(outfile, level)
            outfile.write('alloc_resource=%s,\n' % quote_python(self.alloc_resource).encode(ExternalEncoding))
        if self.resource_list is not None:
            showIndent(outfile, level)
            outfile.write('resource_list=model_.resource_listType14(\n')
            self.resource_list.exportLiteral(outfile, level, name_='resource_list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.comment is not None:
            showIndent(outfile, level)
            outfile.write('comment=%s,\n' % quote_python(self.comment).encode(ExternalEncoding))
        if self.account_activity_time is not None:
            showIndent(outfile, level)
            outfile.write('account_activity_time=%s,\n' % quote_python(self.account_activity_time).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'project_id':
            project_id_ = child_.text
            project_id_ = self.gds_validate_string(project_id_, node, 'project_id')
            self.project_id = project_id_
        elif nodeName_ == 'person_id':
            person_id_ = child_.text
            person_id_ = self.gds_validate_string(person_id_, node, 'person_id')
            self.person_id = person_id_
        elif nodeName_ == 'alloc_resource':
            alloc_resource_ = child_.text
            alloc_resource_ = self.gds_validate_string(alloc_resource_, node, 'alloc_resource')
            self.alloc_resource = alloc_resource_
        elif nodeName_ == 'resource_list':
            obj_ = resource_listType14.factory()
            obj_.build(child_)
            self.set_resource_list(obj_)
        elif nodeName_ == 'comment':
            comment_ = child_.text
            comment_ = self.gds_validate_string(comment_, node, 'comment')
            self.comment = comment_
        elif nodeName_ == 'account_activity_time':
            account_activity_time_ = child_.text
            account_activity_time_ = self.gds_validate_string(account_activity_time_, node, 'account_activity_time')
            self.account_activity_time = account_activity_time_
# end class bodyType18


class resource_listType14(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, resource=None):
        if resource is None:
            self.resource = []
        else:
            self.resource = resource
    def factory(*args_, **kwargs_):
        if resource_listType14.subclass:
            return resource_listType14.subclass(*args_, **kwargs_)
        else:
            return resource_listType14(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_resource(self): return self.resource
    def set_resource(self, resource): self.resource = resource
    def add_resource(self, value): self.resource.append(value)
    def insert_resource(self, index, value): self.resource[index] = value
    def export(self, outfile, level, namespace_='', name_='resource_listType14', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='resource_listType14')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='resource_listType14'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='resource_listType14', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for resource_ in self.resource:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sresource>%s</%sresource>%s' % (namespace_, self.gds_format_string(quote_xml(resource_).encode(ExternalEncoding), input_name='resource'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.resource
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='resource_listType14'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('resource=[\n')
        level += 1
        for resource_ in self.resource:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(resource_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'resource':
            resource_ = child_.text
            resource_ = self.gds_validate_string(resource_, node, 'resource')
            self.resource.append(resource_)
# end class resource_listType14


class notify_account_reactivateType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, header=None, body=None):
        self.header = header
        self.body = body
    def factory(*args_, **kwargs_):
        if notify_account_reactivateType.subclass:
            return notify_account_reactivateType.subclass(*args_, **kwargs_)
        else:
            return notify_account_reactivateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_header(self): return self.header
    def set_header(self, header): self.header = header
    def get_body(self): return self.body
    def set_body(self, body): self.body = body
    def export(self, outfile, level, namespace_='', name_='notify_account_reactivateType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='notify_account_reactivateType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='notify_account_reactivateType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='notify_account_reactivateType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.header is not None:
            self.header.export(outfile, level, namespace_, name_='header', pretty_print=pretty_print)
        if self.body is not None:
            self.body.export(outfile, level, namespace_, name_='body', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.header is not None or
            self.body is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='notify_account_reactivateType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.header is not None:
            showIndent(outfile, level)
            outfile.write('header=model_.header_type(\n')
            self.header.exportLiteral(outfile, level, name_='header')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.body is not None:
            showIndent(outfile, level)
            outfile.write('body=model_.bodyType19(\n')
            self.body.exportLiteral(outfile, level, name_='body')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'header':
            obj_ = header_type.factory()
            obj_.build(child_)
            self.set_header(obj_)
        elif nodeName_ == 'body':
            obj_ = bodyType19.factory()
            obj_.build(child_)
            self.set_body(obj_)
# end class notify_account_reactivateType


class bodyType19(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, project_id=None, person_id=None, resource_list=None, comment=None, account_activity_time=None):
        self.project_id = project_id
        self.person_id = person_id
        self.resource_list = resource_list
        self.comment = comment
        self.account_activity_time = account_activity_time
    def factory(*args_, **kwargs_):
        if bodyType19.subclass:
            return bodyType19.subclass(*args_, **kwargs_)
        else:
            return bodyType19(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_project_id(self): return self.project_id
    def set_project_id(self, project_id): self.project_id = project_id
    def get_person_id(self): return self.person_id
    def set_person_id(self, person_id): self.person_id = person_id
    def get_resource_list(self): return self.resource_list
    def set_resource_list(self, resource_list): self.resource_list = resource_list
    def get_comment(self): return self.comment
    def set_comment(self, comment): self.comment = comment
    def get_account_activity_time(self): return self.account_activity_time
    def set_account_activity_time(self, account_activity_time): self.account_activity_time = account_activity_time
    def export(self, outfile, level, namespace_='', name_='bodyType19', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='bodyType19')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='bodyType19'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='bodyType19', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.project_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sproject_id>%s</%sproject_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.project_id).encode(ExternalEncoding), input_name='project_id'), namespace_, eol_))
        if self.person_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sperson_id>%s</%sperson_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.person_id).encode(ExternalEncoding), input_name='person_id'), namespace_, eol_))
        if self.resource_list is not None:
            self.resource_list.export(outfile, level, namespace_, name_='resource_list', pretty_print=pretty_print)
        if self.comment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scomment>%s</%scomment>%s' % (namespace_, self.gds_format_string(quote_xml(self.comment).encode(ExternalEncoding), input_name='comment'), namespace_, eol_))
        if self.account_activity_time is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%saccount_activity_time>%s</%saccount_activity_time>%s' % (namespace_, self.gds_format_string(quote_xml(self.account_activity_time).encode(ExternalEncoding), input_name='account_activity_time'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.project_id is not None or
            self.person_id is not None or
            self.resource_list is not None or
            self.comment is not None or
            self.account_activity_time is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='bodyType19'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.project_id is not None:
            showIndent(outfile, level)
            outfile.write('project_id=%s,\n' % quote_python(self.project_id).encode(ExternalEncoding))
        if self.person_id is not None:
            showIndent(outfile, level)
            outfile.write('person_id=%s,\n' % quote_python(self.person_id).encode(ExternalEncoding))
        if self.resource_list is not None:
            showIndent(outfile, level)
            outfile.write('resource_list=model_.resource_listType15(\n')
            self.resource_list.exportLiteral(outfile, level, name_='resource_list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.comment is not None:
            showIndent(outfile, level)
            outfile.write('comment=%s,\n' % quote_python(self.comment).encode(ExternalEncoding))
        if self.account_activity_time is not None:
            showIndent(outfile, level)
            outfile.write('account_activity_time=%s,\n' % quote_python(self.account_activity_time).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'project_id':
            project_id_ = child_.text
            project_id_ = self.gds_validate_string(project_id_, node, 'project_id')
            self.project_id = project_id_
        elif nodeName_ == 'person_id':
            person_id_ = child_.text
            person_id_ = self.gds_validate_string(person_id_, node, 'person_id')
            self.person_id = person_id_
        elif nodeName_ == 'resource_list':
            obj_ = resource_listType15.factory()
            obj_.build(child_)
            self.set_resource_list(obj_)
        elif nodeName_ == 'comment':
            comment_ = child_.text
            comment_ = self.gds_validate_string(comment_, node, 'comment')
            self.comment = comment_
        elif nodeName_ == 'account_activity_time':
            account_activity_time_ = child_.text
            account_activity_time_ = self.gds_validate_string(account_activity_time_, node, 'account_activity_time')
            self.account_activity_time = account_activity_time_
# end class bodyType19


class resource_listType15(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, resource=None):
        if resource is None:
            self.resource = []
        else:
            self.resource = resource
    def factory(*args_, **kwargs_):
        if resource_listType15.subclass:
            return resource_listType15.subclass(*args_, **kwargs_)
        else:
            return resource_listType15(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_resource(self): return self.resource
    def set_resource(self, resource): self.resource = resource
    def add_resource(self, value): self.resource.append(value)
    def insert_resource(self, index, value): self.resource[index] = value
    def export(self, outfile, level, namespace_='', name_='resource_listType15', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='resource_listType15')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='resource_listType15'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='resource_listType15', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for resource_ in self.resource:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sresource>%s</%sresource>%s' % (namespace_, self.gds_format_string(quote_xml(resource_).encode(ExternalEncoding), input_name='resource'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.resource
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='resource_listType15'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('resource=[\n')
        level += 1
        for resource_ in self.resource:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(resource_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'resource':
            resource_ = child_.text
            resource_ = self.gds_validate_string(resource_, node, 'resource')
            self.resource.append(resource_)
# end class resource_listType15


class request_user_suspendType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, header=None, body=None):
        self.header = header
        self.body = body
    def factory(*args_, **kwargs_):
        if request_user_suspendType.subclass:
            return request_user_suspendType.subclass(*args_, **kwargs_)
        else:
            return request_user_suspendType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_header(self): return self.header
    def set_header(self, header): self.header = header
    def get_body(self): return self.body
    def set_body(self, body): self.body = body
    def export(self, outfile, level, namespace_='', name_='request_user_suspendType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='request_user_suspendType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='request_user_suspendType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='request_user_suspendType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.header is not None:
            self.header.export(outfile, level, namespace_, name_='header', pretty_print=pretty_print)
        if self.body is not None:
            self.body.export(outfile, level, namespace_, name_='body', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.header is not None or
            self.body is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='request_user_suspendType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.header is not None:
            showIndent(outfile, level)
            outfile.write('header=model_.header_type(\n')
            self.header.exportLiteral(outfile, level, name_='header')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.body is not None:
            showIndent(outfile, level)
            outfile.write('body=model_.bodyType20(\n')
            self.body.exportLiteral(outfile, level, name_='body')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'header':
            obj_ = header_type.factory()
            obj_.build(child_)
            self.set_header(obj_)
        elif nodeName_ == 'body':
            obj_ = bodyType20.factory()
            obj_.build(child_)
            self.set_body(obj_)
# end class request_user_suspendType


class bodyType20(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, project_id=None, dn_list=None, reason=None, comment=None, person_id=None):
        self.project_id = project_id
        self.dn_list = dn_list
        self.reason = reason
        self.comment = comment
        self.person_id = person_id
    def factory(*args_, **kwargs_):
        if bodyType20.subclass:
            return bodyType20.subclass(*args_, **kwargs_)
        else:
            return bodyType20(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_project_id(self): return self.project_id
    def set_project_id(self, project_id): self.project_id = project_id
    def get_dn_list(self): return self.dn_list
    def set_dn_list(self, dn_list): self.dn_list = dn_list
    def get_reason(self): return self.reason
    def set_reason(self, reason): self.reason = reason
    def get_comment(self): return self.comment
    def set_comment(self, comment): self.comment = comment
    def get_person_id(self): return self.person_id
    def set_person_id(self, person_id): self.person_id = person_id
    def export(self, outfile, level, namespace_='', name_='bodyType20', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='bodyType20')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='bodyType20'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='bodyType20', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.project_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sproject_id>%s</%sproject_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.project_id).encode(ExternalEncoding), input_name='project_id'), namespace_, eol_))
        if self.dn_list is not None:
            self.dn_list.export(outfile, level, namespace_, name_='dn_list', pretty_print=pretty_print)
        if self.reason is not None:
            self.reason.export(outfile, level, namespace_, name_='reason', pretty_print=pretty_print)
        if self.comment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scomment>%s</%scomment>%s' % (namespace_, self.gds_format_string(quote_xml(self.comment).encode(ExternalEncoding), input_name='comment'), namespace_, eol_))
        if self.person_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sperson_id>%s</%sperson_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.person_id).encode(ExternalEncoding), input_name='person_id'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.project_id is not None or
            self.dn_list is not None or
            self.reason is not None or
            self.comment is not None or
            self.person_id is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='bodyType20'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.project_id is not None:
            showIndent(outfile, level)
            outfile.write('project_id=%s,\n' % quote_python(self.project_id).encode(ExternalEncoding))
        if self.dn_list is not None:
            showIndent(outfile, level)
            outfile.write('dn_list=model_.dn_listType8(\n')
            self.dn_list.exportLiteral(outfile, level, name_='dn_list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.reason is not None:
            showIndent(outfile, level)
            outfile.write('reason=model_.reason(\n')
            self.reason.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.comment is not None:
            showIndent(outfile, level)
            outfile.write('comment=%s,\n' % quote_python(self.comment).encode(ExternalEncoding))
        if self.person_id is not None:
            showIndent(outfile, level)
            outfile.write('person_id=%s,\n' % quote_python(self.person_id).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'project_id':
            project_id_ = child_.text
            project_id_ = self.gds_validate_string(project_id_, node, 'project_id')
            self.project_id = project_id_
        elif nodeName_ == 'dn_list':
            obj_ = dn_listType8.factory()
            obj_.build(child_)
            self.set_dn_list(obj_)
        elif nodeName_ == 'reason':
            obj_ = reason.factory()
            obj_.build(child_)
            self.set_reason(obj_)
        elif nodeName_ == 'comment':
            comment_ = child_.text
            comment_ = self.gds_validate_string(comment_, node, 'comment')
            self.comment = comment_
        elif nodeName_ == 'person_id':
            person_id_ = child_.text
            person_id_ = self.gds_validate_string(person_id_, node, 'person_id')
            self.person_id = person_id_
# end class bodyType20


class dn_listType8(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dn=None):
        if dn is None:
            self.dn = []
        else:
            self.dn = dn
    def factory(*args_, **kwargs_):
        if dn_listType8.subclass:
            return dn_listType8.subclass(*args_, **kwargs_)
        else:
            return dn_listType8(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dn(self): return self.dn
    def set_dn(self, dn): self.dn = dn
    def add_dn(self, value): self.dn.append(value)
    def insert_dn(self, index, value): self.dn[index] = value
    def export(self, outfile, level, namespace_='', name_='dn_listType8', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dn_listType8')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='dn_listType8'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='dn_listType8', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for dn_ in self.dn:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdn>%s</%sdn>%s' % (namespace_, self.gds_format_string(quote_xml(dn_).encode(ExternalEncoding), input_name='dn'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.dn
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='dn_listType8'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('dn=[\n')
        level += 1
        for dn_ in self.dn:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(dn_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dn':
            dn_ = child_.text
            dn_ = self.gds_validate_string(dn_, node, 'dn')
            self.dn.append(dn_)
# end class dn_listType8


class notify_user_suspendType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, header=None, body=None):
        self.header = header
        self.body = body
    def factory(*args_, **kwargs_):
        if notify_user_suspendType.subclass:
            return notify_user_suspendType.subclass(*args_, **kwargs_)
        else:
            return notify_user_suspendType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_header(self): return self.header
    def set_header(self, header): self.header = header
    def get_body(self): return self.body
    def set_body(self, body): self.body = body
    def export(self, outfile, level, namespace_='', name_='notify_user_suspendType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='notify_user_suspendType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='notify_user_suspendType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='notify_user_suspendType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.header is not None:
            self.header.export(outfile, level, namespace_, name_='header', pretty_print=pretty_print)
        if self.body is not None:
            self.body.export(outfile, level, namespace_, name_='body', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.header is not None or
            self.body is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='notify_user_suspendType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.header is not None:
            showIndent(outfile, level)
            outfile.write('header=model_.header_type(\n')
            self.header.exportLiteral(outfile, level, name_='header')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.body is not None:
            showIndent(outfile, level)
            outfile.write('body=model_.bodyType21(\n')
            self.body.exportLiteral(outfile, level, name_='body')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'header':
            obj_ = header_type.factory()
            obj_.build(child_)
            self.set_header(obj_)
        elif nodeName_ == 'body':
            obj_ = bodyType21.factory()
            obj_.build(child_)
            self.set_body(obj_)
# end class notify_user_suspendType


class bodyType21(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, project_id=None, dn_list=None, reason=None, comment=None, person_id=None):
        self.project_id = project_id
        self.dn_list = dn_list
        self.reason = reason
        self.comment = comment
        self.person_id = person_id
    def factory(*args_, **kwargs_):
        if bodyType21.subclass:
            return bodyType21.subclass(*args_, **kwargs_)
        else:
            return bodyType21(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_project_id(self): return self.project_id
    def set_project_id(self, project_id): self.project_id = project_id
    def get_dn_list(self): return self.dn_list
    def set_dn_list(self, dn_list): self.dn_list = dn_list
    def get_reason(self): return self.reason
    def set_reason(self, reason): self.reason = reason
    def get_comment(self): return self.comment
    def set_comment(self, comment): self.comment = comment
    def get_person_id(self): return self.person_id
    def set_person_id(self, person_id): self.person_id = person_id
    def export(self, outfile, level, namespace_='', name_='bodyType21', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='bodyType21')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='bodyType21'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='bodyType21', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.project_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sproject_id>%s</%sproject_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.project_id).encode(ExternalEncoding), input_name='project_id'), namespace_, eol_))
        if self.dn_list is not None:
            self.dn_list.export(outfile, level, namespace_, name_='dn_list', pretty_print=pretty_print)
        if self.reason is not None:
            self.reason.export(outfile, level, namespace_, name_='reason', pretty_print=pretty_print)
        if self.comment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scomment>%s</%scomment>%s' % (namespace_, self.gds_format_string(quote_xml(self.comment).encode(ExternalEncoding), input_name='comment'), namespace_, eol_))
        if self.person_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sperson_id>%s</%sperson_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.person_id).encode(ExternalEncoding), input_name='person_id'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.project_id is not None or
            self.dn_list is not None or
            self.reason is not None or
            self.comment is not None or
            self.person_id is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='bodyType21'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.project_id is not None:
            showIndent(outfile, level)
            outfile.write('project_id=%s,\n' % quote_python(self.project_id).encode(ExternalEncoding))
        if self.dn_list is not None:
            showIndent(outfile, level)
            outfile.write('dn_list=model_.dn_listType9(\n')
            self.dn_list.exportLiteral(outfile, level, name_='dn_list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.reason is not None:
            showIndent(outfile, level)
            outfile.write('reason=model_.reason(\n')
            self.reason.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.comment is not None:
            showIndent(outfile, level)
            outfile.write('comment=%s,\n' % quote_python(self.comment).encode(ExternalEncoding))
        if self.person_id is not None:
            showIndent(outfile, level)
            outfile.write('person_id=%s,\n' % quote_python(self.person_id).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'project_id':
            project_id_ = child_.text
            project_id_ = self.gds_validate_string(project_id_, node, 'project_id')
            self.project_id = project_id_
        elif nodeName_ == 'dn_list':
            obj_ = dn_listType9.factory()
            obj_.build(child_)
            self.set_dn_list(obj_)
        elif nodeName_ == 'reason':
            obj_ = reason.factory()
            obj_.build(child_)
            self.set_reason(obj_)
        elif nodeName_ == 'comment':
            comment_ = child_.text
            comment_ = self.gds_validate_string(comment_, node, 'comment')
            self.comment = comment_
        elif nodeName_ == 'person_id':
            person_id_ = child_.text
            person_id_ = self.gds_validate_string(person_id_, node, 'person_id')
            self.person_id = person_id_
# end class bodyType21


class dn_listType9(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dn=None):
        if dn is None:
            self.dn = []
        else:
            self.dn = dn
    def factory(*args_, **kwargs_):
        if dn_listType9.subclass:
            return dn_listType9.subclass(*args_, **kwargs_)
        else:
            return dn_listType9(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dn(self): return self.dn
    def set_dn(self, dn): self.dn = dn
    def add_dn(self, value): self.dn.append(value)
    def insert_dn(self, index, value): self.dn[index] = value
    def export(self, outfile, level, namespace_='', name_='dn_listType9', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dn_listType9')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='dn_listType9'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='dn_listType9', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for dn_ in self.dn:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdn>%s</%sdn>%s' % (namespace_, self.gds_format_string(quote_xml(dn_).encode(ExternalEncoding), input_name='dn'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.dn
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='dn_listType9'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('dn=[\n')
        level += 1
        for dn_ in self.dn:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(dn_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dn':
            dn_ = child_.text
            dn_ = self.gds_validate_string(dn_, node, 'dn')
            self.dn.append(dn_)
# end class dn_listType9


class request_user_reactivateType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, header=None, body=None):
        self.header = header
        self.body = body
    def factory(*args_, **kwargs_):
        if request_user_reactivateType.subclass:
            return request_user_reactivateType.subclass(*args_, **kwargs_)
        else:
            return request_user_reactivateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_header(self): return self.header
    def set_header(self, header): self.header = header
    def get_body(self): return self.body
    def set_body(self, body): self.body = body
    def export(self, outfile, level, namespace_='', name_='request_user_reactivateType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='request_user_reactivateType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='request_user_reactivateType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='request_user_reactivateType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.header is not None:
            self.header.export(outfile, level, namespace_, name_='header', pretty_print=pretty_print)
        if self.body is not None:
            self.body.export(outfile, level, namespace_, name_='body', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.header is not None or
            self.body is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='request_user_reactivateType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.header is not None:
            showIndent(outfile, level)
            outfile.write('header=model_.header_type(\n')
            self.header.exportLiteral(outfile, level, name_='header')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.body is not None:
            showIndent(outfile, level)
            outfile.write('body=model_.bodyType22(\n')
            self.body.exportLiteral(outfile, level, name_='body')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'header':
            obj_ = header_type.factory()
            obj_.build(child_)
            self.set_header(obj_)
        elif nodeName_ == 'body':
            obj_ = bodyType22.factory()
            obj_.build(child_)
            self.set_body(obj_)
# end class request_user_reactivateType


class bodyType22(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, project_id=None, dn_list=None, reason=None, comment=None, person_id=None):
        self.project_id = project_id
        self.dn_list = dn_list
        self.reason = reason
        self.comment = comment
        self.person_id = person_id
    def factory(*args_, **kwargs_):
        if bodyType22.subclass:
            return bodyType22.subclass(*args_, **kwargs_)
        else:
            return bodyType22(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_project_id(self): return self.project_id
    def set_project_id(self, project_id): self.project_id = project_id
    def get_dn_list(self): return self.dn_list
    def set_dn_list(self, dn_list): self.dn_list = dn_list
    def get_reason(self): return self.reason
    def set_reason(self, reason): self.reason = reason
    def get_comment(self): return self.comment
    def set_comment(self, comment): self.comment = comment
    def get_person_id(self): return self.person_id
    def set_person_id(self, person_id): self.person_id = person_id
    def export(self, outfile, level, namespace_='', name_='bodyType22', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='bodyType22')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='bodyType22'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='bodyType22', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.project_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sproject_id>%s</%sproject_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.project_id).encode(ExternalEncoding), input_name='project_id'), namespace_, eol_))
        if self.dn_list is not None:
            self.dn_list.export(outfile, level, namespace_, name_='dn_list', pretty_print=pretty_print)
        if self.reason is not None:
            self.reason.export(outfile, level, namespace_, name_='reason', pretty_print=pretty_print)
        if self.comment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scomment>%s</%scomment>%s' % (namespace_, self.gds_format_string(quote_xml(self.comment).encode(ExternalEncoding), input_name='comment'), namespace_, eol_))
        if self.person_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sperson_id>%s</%sperson_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.person_id).encode(ExternalEncoding), input_name='person_id'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.project_id is not None or
            self.dn_list is not None or
            self.reason is not None or
            self.comment is not None or
            self.person_id is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='bodyType22'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.project_id is not None:
            showIndent(outfile, level)
            outfile.write('project_id=%s,\n' % quote_python(self.project_id).encode(ExternalEncoding))
        if self.dn_list is not None:
            showIndent(outfile, level)
            outfile.write('dn_list=model_.dn_listType10(\n')
            self.dn_list.exportLiteral(outfile, level, name_='dn_list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.reason is not None:
            showIndent(outfile, level)
            outfile.write('reason=model_.reason(\n')
            self.reason.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.comment is not None:
            showIndent(outfile, level)
            outfile.write('comment=%s,\n' % quote_python(self.comment).encode(ExternalEncoding))
        if self.person_id is not None:
            showIndent(outfile, level)
            outfile.write('person_id=%s,\n' % quote_python(self.person_id).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'project_id':
            project_id_ = child_.text
            project_id_ = self.gds_validate_string(project_id_, node, 'project_id')
            self.project_id = project_id_
        elif nodeName_ == 'dn_list':
            obj_ = dn_listType10.factory()
            obj_.build(child_)
            self.set_dn_list(obj_)
        elif nodeName_ == 'reason':
            obj_ = reason.factory()
            obj_.build(child_)
            self.set_reason(obj_)
        elif nodeName_ == 'comment':
            comment_ = child_.text
            comment_ = self.gds_validate_string(comment_, node, 'comment')
            self.comment = comment_
        elif nodeName_ == 'person_id':
            person_id_ = child_.text
            person_id_ = self.gds_validate_string(person_id_, node, 'person_id')
            self.person_id = person_id_
# end class bodyType22


class dn_listType10(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dn=None):
        if dn is None:
            self.dn = []
        else:
            self.dn = dn
    def factory(*args_, **kwargs_):
        if dn_listType10.subclass:
            return dn_listType10.subclass(*args_, **kwargs_)
        else:
            return dn_listType10(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dn(self): return self.dn
    def set_dn(self, dn): self.dn = dn
    def add_dn(self, value): self.dn.append(value)
    def insert_dn(self, index, value): self.dn[index] = value
    def export(self, outfile, level, namespace_='', name_='dn_listType10', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dn_listType10')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='dn_listType10'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='dn_listType10', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for dn_ in self.dn:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdn>%s</%sdn>%s' % (namespace_, self.gds_format_string(quote_xml(dn_).encode(ExternalEncoding), input_name='dn'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.dn
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='dn_listType10'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('dn=[\n')
        level += 1
        for dn_ in self.dn:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(dn_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dn':
            dn_ = child_.text
            dn_ = self.gds_validate_string(dn_, node, 'dn')
            self.dn.append(dn_)
# end class dn_listType10


class notify_user_reactivateType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, header=None, body=None):
        self.header = header
        self.body = body
    def factory(*args_, **kwargs_):
        if notify_user_reactivateType.subclass:
            return notify_user_reactivateType.subclass(*args_, **kwargs_)
        else:
            return notify_user_reactivateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_header(self): return self.header
    def set_header(self, header): self.header = header
    def get_body(self): return self.body
    def set_body(self, body): self.body = body
    def export(self, outfile, level, namespace_='', name_='notify_user_reactivateType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='notify_user_reactivateType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='notify_user_reactivateType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='notify_user_reactivateType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.header is not None:
            self.header.export(outfile, level, namespace_, name_='header', pretty_print=pretty_print)
        if self.body is not None:
            self.body.export(outfile, level, namespace_, name_='body', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.header is not None or
            self.body is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='notify_user_reactivateType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.header is not None:
            showIndent(outfile, level)
            outfile.write('header=model_.header_type(\n')
            self.header.exportLiteral(outfile, level, name_='header')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.body is not None:
            showIndent(outfile, level)
            outfile.write('body=model_.bodyType23(\n')
            self.body.exportLiteral(outfile, level, name_='body')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'header':
            obj_ = header_type.factory()
            obj_.build(child_)
            self.set_header(obj_)
        elif nodeName_ == 'body':
            obj_ = bodyType23.factory()
            obj_.build(child_)
            self.set_body(obj_)
# end class notify_user_reactivateType


class bodyType23(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, project_id=None, dn_list=None, reason=None, comment=None, person_id=None):
        self.project_id = project_id
        self.dn_list = dn_list
        self.reason = reason
        self.comment = comment
        self.person_id = person_id
    def factory(*args_, **kwargs_):
        if bodyType23.subclass:
            return bodyType23.subclass(*args_, **kwargs_)
        else:
            return bodyType23(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_project_id(self): return self.project_id
    def set_project_id(self, project_id): self.project_id = project_id
    def get_dn_list(self): return self.dn_list
    def set_dn_list(self, dn_list): self.dn_list = dn_list
    def get_reason(self): return self.reason
    def set_reason(self, reason): self.reason = reason
    def get_comment(self): return self.comment
    def set_comment(self, comment): self.comment = comment
    def get_person_id(self): return self.person_id
    def set_person_id(self, person_id): self.person_id = person_id
    def export(self, outfile, level, namespace_='', name_='bodyType23', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='bodyType23')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='bodyType23'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='bodyType23', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.project_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sproject_id>%s</%sproject_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.project_id).encode(ExternalEncoding), input_name='project_id'), namespace_, eol_))
        if self.dn_list is not None:
            self.dn_list.export(outfile, level, namespace_, name_='dn_list', pretty_print=pretty_print)
        if self.reason is not None:
            self.reason.export(outfile, level, namespace_, name_='reason', pretty_print=pretty_print)
        if self.comment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scomment>%s</%scomment>%s' % (namespace_, self.gds_format_string(quote_xml(self.comment).encode(ExternalEncoding), input_name='comment'), namespace_, eol_))
        if self.person_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sperson_id>%s</%sperson_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.person_id).encode(ExternalEncoding), input_name='person_id'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.project_id is not None or
            self.dn_list is not None or
            self.reason is not None or
            self.comment is not None or
            self.person_id is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='bodyType23'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.project_id is not None:
            showIndent(outfile, level)
            outfile.write('project_id=%s,\n' % quote_python(self.project_id).encode(ExternalEncoding))
        if self.dn_list is not None:
            showIndent(outfile, level)
            outfile.write('dn_list=model_.dn_listType11(\n')
            self.dn_list.exportLiteral(outfile, level, name_='dn_list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.reason is not None:
            showIndent(outfile, level)
            outfile.write('reason=model_.reason(\n')
            self.reason.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.comment is not None:
            showIndent(outfile, level)
            outfile.write('comment=%s,\n' % quote_python(self.comment).encode(ExternalEncoding))
        if self.person_id is not None:
            showIndent(outfile, level)
            outfile.write('person_id=%s,\n' % quote_python(self.person_id).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'project_id':
            project_id_ = child_.text
            project_id_ = self.gds_validate_string(project_id_, node, 'project_id')
            self.project_id = project_id_
        elif nodeName_ == 'dn_list':
            obj_ = dn_listType11.factory()
            obj_.build(child_)
            self.set_dn_list(obj_)
        elif nodeName_ == 'reason':
            obj_ = reason.factory()
            obj_.build(child_)
            self.set_reason(obj_)
        elif nodeName_ == 'comment':
            comment_ = child_.text
            comment_ = self.gds_validate_string(comment_, node, 'comment')
            self.comment = comment_
        elif nodeName_ == 'person_id':
            person_id_ = child_.text
            person_id_ = self.gds_validate_string(person_id_, node, 'person_id')
            self.person_id = person_id_
# end class bodyType23


class dn_listType11(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dn=None):
        if dn is None:
            self.dn = []
        else:
            self.dn = dn
    def factory(*args_, **kwargs_):
        if dn_listType11.subclass:
            return dn_listType11.subclass(*args_, **kwargs_)
        else:
            return dn_listType11(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dn(self): return self.dn
    def set_dn(self, dn): self.dn = dn
    def add_dn(self, value): self.dn.append(value)
    def insert_dn(self, index, value): self.dn[index] = value
    def export(self, outfile, level, namespace_='', name_='dn_listType11', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dn_listType11')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='dn_listType11'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='dn_listType11', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for dn_ in self.dn:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdn>%s</%sdn>%s' % (namespace_, self.gds_format_string(quote_xml(dn_).encode(ExternalEncoding), input_name='dn'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.dn
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='dn_listType11'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('dn=[\n')
        level += 1
        for dn_ in self.dn:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(dn_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dn':
            dn_ = child_.text
            dn_ = self.gds_validate_string(dn_, node, 'dn')
            self.dn.append(dn_)
# end class dn_listType11


class notify_project_usageType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, header=None, body=None):
        self.header = header
        self.body = body
    def factory(*args_, **kwargs_):
        if notify_project_usageType.subclass:
            return notify_project_usageType.subclass(*args_, **kwargs_)
        else:
            return notify_project_usageType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_header(self): return self.header
    def set_header(self, header): self.header = header
    def get_body(self): return self.body
    def set_body(self, body): self.body = body
    def export(self, outfile, level, namespace_='', name_='notify_project_usageType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='notify_project_usageType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='notify_project_usageType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='notify_project_usageType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.header is not None:
            self.header.export(outfile, level, namespace_, name_='header', pretty_print=pretty_print)
        if self.body is not None:
            self.body.export(outfile, level, namespace_, name_='body', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.header is not None or
            self.body is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='notify_project_usageType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.header is not None:
            showIndent(outfile, level)
            outfile.write('header=model_.header_type(\n')
            self.header.exportLiteral(outfile, level, name_='header')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.body is not None:
            showIndent(outfile, level)
            outfile.write('body=model_.bodyType24(\n')
            self.body.exportLiteral(outfile, level, name_='body')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'header':
            obj_ = header_type.factory()
            obj_.build(child_)
            self.set_header(obj_)
        elif nodeName_ == 'body':
            obj_ = bodyType24.factory()
            obj_.build(child_)
            self.set_body(obj_)
# end class notify_project_usageType


class bodyType24(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, usage_type=None, project_id=None, machine_name=None, record_identity=None, start_time=None, end_time=None, job_identity=None, user_login=None, job_name=None, charge=None, wall_duration=None, comment=None, cpu_duration=None, node_count=None, processors=None, submit_host=None, submit_time=None, queue=None, exec_host_list=None, attribute_list=None, bytes_stored=None, bytes_read=None, bytes_written=None, number_of_files=None, files_read=None, files_written=None, user_copies=None, system_copies=None, collection_time=None, collection_interval=None, media_type=None, storage_software=None):
        self.usage_type = usage_type
        self.project_id = project_id
        self.machine_name = machine_name
        self.record_identity = record_identity
        self.start_time = start_time
        self.end_time = end_time
        self.job_identity = job_identity
        self.user_login = user_login
        self.job_name = job_name
        self.charge = charge
        self.wall_duration = wall_duration
        self.comment = comment
        self.cpu_duration = cpu_duration
        self.node_count = node_count
        self.processors = processors
        self.submit_host = submit_host
        self.submit_time = submit_time
        self.queue = queue
        self.exec_host_list = exec_host_list
        self.attribute_list = attribute_list
        self.bytes_stored = bytes_stored
        self.bytes_read = bytes_read
        self.bytes_written = bytes_written
        self.number_of_files = number_of_files
        self.files_read = files_read
        self.files_written = files_written
        self.user_copies = user_copies
        self.system_copies = system_copies
        self.collection_time = collection_time
        self.collection_interval = collection_interval
        self.media_type = media_type
        self.storage_software = storage_software
    def factory(*args_, **kwargs_):
        if bodyType24.subclass:
            return bodyType24.subclass(*args_, **kwargs_)
        else:
            return bodyType24(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_usage_type(self): return self.usage_type
    def set_usage_type(self, usage_type): self.usage_type = usage_type
    def get_project_id(self): return self.project_id
    def set_project_id(self, project_id): self.project_id = project_id
    def get_machine_name(self): return self.machine_name
    def set_machine_name(self, machine_name): self.machine_name = machine_name
    def get_record_identity(self): return self.record_identity
    def set_record_identity(self, record_identity): self.record_identity = record_identity
    def get_start_time(self): return self.start_time
    def set_start_time(self, start_time): self.start_time = start_time
    def get_end_time(self): return self.end_time
    def set_end_time(self, end_time): self.end_time = end_time
    def get_job_identity(self): return self.job_identity
    def set_job_identity(self, job_identity): self.job_identity = job_identity
    def get_user_login(self): return self.user_login
    def set_user_login(self, user_login): self.user_login = user_login
    def get_job_name(self): return self.job_name
    def set_job_name(self, job_name): self.job_name = job_name
    def get_charge(self): return self.charge
    def set_charge(self, charge): self.charge = charge
    def get_wall_duration(self): return self.wall_duration
    def set_wall_duration(self, wall_duration): self.wall_duration = wall_duration
    def get_comment(self): return self.comment
    def set_comment(self, comment): self.comment = comment
    def get_cpu_duration(self): return self.cpu_duration
    def set_cpu_duration(self, cpu_duration): self.cpu_duration = cpu_duration
    def get_node_count(self): return self.node_count
    def set_node_count(self, node_count): self.node_count = node_count
    def get_processors(self): return self.processors
    def set_processors(self, processors): self.processors = processors
    def get_submit_host(self): return self.submit_host
    def set_submit_host(self, submit_host): self.submit_host = submit_host
    def get_submit_time(self): return self.submit_time
    def set_submit_time(self, submit_time): self.submit_time = submit_time
    def get_queue(self): return self.queue
    def set_queue(self, queue): self.queue = queue
    def get_exec_host_list(self): return self.exec_host_list
    def set_exec_host_list(self, exec_host_list): self.exec_host_list = exec_host_list
    def get_attribute_list(self): return self.attribute_list
    def set_attribute_list(self, attribute_list): self.attribute_list = attribute_list
    def get_bytes_stored(self): return self.bytes_stored
    def set_bytes_stored(self, bytes_stored): self.bytes_stored = bytes_stored
    def get_bytes_read(self): return self.bytes_read
    def set_bytes_read(self, bytes_read): self.bytes_read = bytes_read
    def get_bytes_written(self): return self.bytes_written
    def set_bytes_written(self, bytes_written): self.bytes_written = bytes_written
    def get_number_of_files(self): return self.number_of_files
    def set_number_of_files(self, number_of_files): self.number_of_files = number_of_files
    def get_files_read(self): return self.files_read
    def set_files_read(self, files_read): self.files_read = files_read
    def get_files_written(self): return self.files_written
    def set_files_written(self, files_written): self.files_written = files_written
    def get_user_copies(self): return self.user_copies
    def set_user_copies(self, user_copies): self.user_copies = user_copies
    def get_system_copies(self): return self.system_copies
    def set_system_copies(self, system_copies): self.system_copies = system_copies
    def get_collection_time(self): return self.collection_time
    def set_collection_time(self, collection_time): self.collection_time = collection_time
    def get_collection_interval(self): return self.collection_interval
    def set_collection_interval(self, collection_interval): self.collection_interval = collection_interval
    def get_media_type(self): return self.media_type
    def set_media_type(self, media_type): self.media_type = media_type
    def get_storage_software(self): return self.storage_software
    def set_storage_software(self, storage_software): self.storage_software = storage_software
    def export(self, outfile, level, namespace_='', name_='bodyType24', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='bodyType24')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='bodyType24'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='bodyType24', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.usage_type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%susage_type>%s</%susage_type>%s' % (namespace_, self.gds_format_string(quote_xml(self.usage_type).encode(ExternalEncoding), input_name='usage_type'), namespace_, eol_))
        if self.project_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sproject_id>%s</%sproject_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.project_id).encode(ExternalEncoding), input_name='project_id'), namespace_, eol_))
        if self.machine_name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smachine_name>%s</%smachine_name>%s' % (namespace_, self.gds_format_string(quote_xml(self.machine_name).encode(ExternalEncoding), input_name='machine_name'), namespace_, eol_))
        if self.record_identity is not None:
            self.record_identity.export(outfile, level, namespace_, name_='record_identity', pretty_print=pretty_print)
        if self.start_time is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstart_time>%s</%sstart_time>%s' % (namespace_, self.gds_format_string(quote_xml(self.start_time).encode(ExternalEncoding), input_name='start_time'), namespace_, eol_))
        if self.end_time is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%send_time>%s</%send_time>%s' % (namespace_, self.gds_format_string(quote_xml(self.end_time).encode(ExternalEncoding), input_name='end_time'), namespace_, eol_))
        if self.job_identity is not None:
            self.job_identity.export(outfile, level, namespace_, name_='job_identity', pretty_print=pretty_print)
        if self.user_login is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%suser_login>%s</%suser_login>%s' % (namespace_, self.gds_format_string(quote_xml(self.user_login).encode(ExternalEncoding), input_name='user_login'), namespace_, eol_))
        if self.job_name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sjob_name>%s</%sjob_name>%s' % (namespace_, self.gds_format_string(quote_xml(self.job_name).encode(ExternalEncoding), input_name='job_name'), namespace_, eol_))
        if self.charge is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scharge>%s</%scharge>%s' % (namespace_, self.gds_format_double(self.charge, input_name='charge'), namespace_, eol_))
        if self.wall_duration is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%swall_duration>%s</%swall_duration>%s' % (namespace_, self.gds_format_string(quote_xml(self.wall_duration).encode(ExternalEncoding), input_name='wall_duration'), namespace_, eol_))
        if self.comment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scomment>%s</%scomment>%s' % (namespace_, self.gds_format_string(quote_xml(self.comment).encode(ExternalEncoding), input_name='comment'), namespace_, eol_))
        if self.cpu_duration is not None:
            self.cpu_duration.export(outfile, level, namespace_, name_='cpu_duration', pretty_print=pretty_print)
        if self.node_count is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snode_count>%s</%snode_count>%s' % (namespace_, self.gds_format_integer(self.node_count, input_name='node_count'), namespace_, eol_))
        if self.processors is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sprocessors>%s</%sprocessors>%s' % (namespace_, self.gds_format_integer(self.processors, input_name='processors'), namespace_, eol_))
        if self.submit_host is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssubmit_host>%s</%ssubmit_host>%s' % (namespace_, self.gds_format_string(quote_xml(self.submit_host).encode(ExternalEncoding), input_name='submit_host'), namespace_, eol_))
        if self.submit_time is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssubmit_time>%s</%ssubmit_time>%s' % (namespace_, self.gds_format_string(quote_xml(self.submit_time).encode(ExternalEncoding), input_name='submit_time'), namespace_, eol_))
        if self.queue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%squeue>%s</%squeue>%s' % (namespace_, self.gds_format_string(quote_xml(self.queue).encode(ExternalEncoding), input_name='queue'), namespace_, eol_))
        if self.exec_host_list is not None:
            self.exec_host_list.export(outfile, level, namespace_, name_='exec_host_list', pretty_print=pretty_print)
        if self.attribute_list is not None:
            self.attribute_list.export(outfile, level, namespace_, name_='attribute_list', pretty_print=pretty_print)
        if self.bytes_stored is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sbytes_stored>%s</%sbytes_stored>%s' % (namespace_, self.gds_format_string(quote_xml(self.bytes_stored).encode(ExternalEncoding), input_name='bytes_stored'), namespace_, eol_))
        if self.bytes_read is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sbytes_read>%s</%sbytes_read>%s' % (namespace_, self.gds_format_string(quote_xml(self.bytes_read).encode(ExternalEncoding), input_name='bytes_read'), namespace_, eol_))
        if self.bytes_written is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sbytes_written>%s</%sbytes_written>%s' % (namespace_, self.gds_format_string(quote_xml(self.bytes_written).encode(ExternalEncoding), input_name='bytes_written'), namespace_, eol_))
        if self.number_of_files is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumber_of_files>%s</%snumber_of_files>%s' % (namespace_, self.gds_format_string(quote_xml(self.number_of_files).encode(ExternalEncoding), input_name='number_of_files'), namespace_, eol_))
        if self.files_read is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfiles_read>%s</%sfiles_read>%s' % (namespace_, self.gds_format_string(quote_xml(self.files_read).encode(ExternalEncoding), input_name='files_read'), namespace_, eol_))
        if self.files_written is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfiles_written>%s</%sfiles_written>%s' % (namespace_, self.gds_format_string(quote_xml(self.files_written).encode(ExternalEncoding), input_name='files_written'), namespace_, eol_))
        if self.user_copies is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%suser_copies>%s</%suser_copies>%s' % (namespace_, self.gds_format_string(quote_xml(self.user_copies).encode(ExternalEncoding), input_name='user_copies'), namespace_, eol_))
        if self.system_copies is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssystem_copies>%s</%ssystem_copies>%s' % (namespace_, self.gds_format_string(quote_xml(self.system_copies).encode(ExternalEncoding), input_name='system_copies'), namespace_, eol_))
        if self.collection_time is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scollection_time>%s</%scollection_time>%s' % (namespace_, self.gds_format_string(quote_xml(self.collection_time).encode(ExternalEncoding), input_name='collection_time'), namespace_, eol_))
        if self.collection_interval is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scollection_interval>%s</%scollection_interval>%s' % (namespace_, self.gds_format_double(self.collection_interval, input_name='collection_interval'), namespace_, eol_))
        if self.media_type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smedia_type>%s</%smedia_type>%s' % (namespace_, self.gds_format_string(quote_xml(self.media_type).encode(ExternalEncoding), input_name='media_type'), namespace_, eol_))
        if self.storage_software is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstorage_software>%s</%sstorage_software>%s' % (namespace_, self.gds_format_string(quote_xml(self.storage_software).encode(ExternalEncoding), input_name='storage_software'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.usage_type is not None or
            self.project_id is not None or
            self.machine_name is not None or
            self.record_identity is not None or
            self.start_time is not None or
            self.end_time is not None or
            self.job_identity is not None or
            self.user_login is not None or
            self.job_name is not None or
            self.charge is not None or
            self.wall_duration is not None or
            self.comment is not None or
            self.cpu_duration is not None or
            self.node_count is not None or
            self.processors is not None or
            self.submit_host is not None or
            self.submit_time is not None or
            self.queue is not None or
            self.exec_host_list is not None or
            self.attribute_list is not None or
            self.bytes_stored is not None or
            self.bytes_read is not None or
            self.bytes_written is not None or
            self.number_of_files is not None or
            self.files_read is not None or
            self.files_written is not None or
            self.user_copies is not None or
            self.system_copies is not None or
            self.collection_time is not None or
            self.collection_interval is not None or
            self.media_type is not None or
            self.storage_software is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='bodyType24'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.usage_type is not None:
            showIndent(outfile, level)
            outfile.write('usage_type=%s,\n' % quote_python(self.usage_type).encode(ExternalEncoding))
        if self.project_id is not None:
            showIndent(outfile, level)
            outfile.write('project_id=%s,\n' % quote_python(self.project_id).encode(ExternalEncoding))
        if self.machine_name is not None:
            showIndent(outfile, level)
            outfile.write('machine_name=%s,\n' % quote_python(self.machine_name).encode(ExternalEncoding))
        if self.record_identity is not None:
            showIndent(outfile, level)
            outfile.write('record_identity=model_.record_identityType(\n')
            self.record_identity.exportLiteral(outfile, level, name_='record_identity')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.start_time is not None:
            showIndent(outfile, level)
            outfile.write('start_time=%s,\n' % quote_python(self.start_time).encode(ExternalEncoding))
        if self.end_time is not None:
            showIndent(outfile, level)
            outfile.write('end_time=%s,\n' % quote_python(self.end_time).encode(ExternalEncoding))
        if self.job_identity is not None:
            showIndent(outfile, level)
            outfile.write('job_identity=model_.job_identityType(\n')
            self.job_identity.exportLiteral(outfile, level, name_='job_identity')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.user_login is not None:
            showIndent(outfile, level)
            outfile.write('user_login=%s,\n' % quote_python(self.user_login).encode(ExternalEncoding))
        if self.job_name is not None:
            showIndent(outfile, level)
            outfile.write('job_name=%s,\n' % quote_python(self.job_name).encode(ExternalEncoding))
        if self.charge is not None:
            showIndent(outfile, level)
            outfile.write('charge=%e,\n' % self.charge)
        if self.wall_duration is not None:
            showIndent(outfile, level)
            outfile.write('wall_duration=%s,\n' % quote_python(self.wall_duration).encode(ExternalEncoding))
        if self.comment is not None:
            showIndent(outfile, level)
            outfile.write('comment=%s,\n' % quote_python(self.comment).encode(ExternalEncoding))
        if self.cpu_duration is not None:
            showIndent(outfile, level)
            outfile.write('cpu_duration=model_.cpu_durationType(\n')
            self.cpu_duration.exportLiteral(outfile, level, name_='cpu_duration')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.node_count is not None:
            showIndent(outfile, level)
            outfile.write('node_count=%d,\n' % self.node_count)
        if self.processors is not None:
            showIndent(outfile, level)
            outfile.write('processors=%d,\n' % self.processors)
        if self.submit_host is not None:
            showIndent(outfile, level)
            outfile.write('submit_host=%s,\n' % quote_python(self.submit_host).encode(ExternalEncoding))
        if self.submit_time is not None:
            showIndent(outfile, level)
            outfile.write('submit_time=%s,\n' % quote_python(self.submit_time).encode(ExternalEncoding))
        if self.queue is not None:
            showIndent(outfile, level)
            outfile.write('queue=%s,\n' % quote_python(self.queue).encode(ExternalEncoding))
        if self.exec_host_list is not None:
            showIndent(outfile, level)
            outfile.write('exec_host_list=model_.exec_host_listType(\n')
            self.exec_host_list.exportLiteral(outfile, level, name_='exec_host_list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.attribute_list is not None:
            showIndent(outfile, level)
            outfile.write('attribute_list=model_.attribute_listType(\n')
            self.attribute_list.exportLiteral(outfile, level, name_='attribute_list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.bytes_stored is not None:
            showIndent(outfile, level)
            outfile.write('bytes_stored=%s,\n' % quote_python(self.bytes_stored).encode(ExternalEncoding))
        if self.bytes_read is not None:
            showIndent(outfile, level)
            outfile.write('bytes_read=%s,\n' % quote_python(self.bytes_read).encode(ExternalEncoding))
        if self.bytes_written is not None:
            showIndent(outfile, level)
            outfile.write('bytes_written=%s,\n' % quote_python(self.bytes_written).encode(ExternalEncoding))
        if self.number_of_files is not None:
            showIndent(outfile, level)
            outfile.write('number_of_files=%s,\n' % quote_python(self.number_of_files).encode(ExternalEncoding))
        if self.files_read is not None:
            showIndent(outfile, level)
            outfile.write('files_read=%s,\n' % quote_python(self.files_read).encode(ExternalEncoding))
        if self.files_written is not None:
            showIndent(outfile, level)
            outfile.write('files_written=%s,\n' % quote_python(self.files_written).encode(ExternalEncoding))
        if self.user_copies is not None:
            showIndent(outfile, level)
            outfile.write('user_copies=%s,\n' % quote_python(self.user_copies).encode(ExternalEncoding))
        if self.system_copies is not None:
            showIndent(outfile, level)
            outfile.write('system_copies=%s,\n' % quote_python(self.system_copies).encode(ExternalEncoding))
        if self.collection_time is not None:
            showIndent(outfile, level)
            outfile.write('collection_time=%s,\n' % quote_python(self.collection_time).encode(ExternalEncoding))
        if self.collection_interval is not None:
            showIndent(outfile, level)
            outfile.write('collection_interval=%e,\n' % self.collection_interval)
        if self.media_type is not None:
            showIndent(outfile, level)
            outfile.write('media_type=%s,\n' % quote_python(self.media_type).encode(ExternalEncoding))
        if self.storage_software is not None:
            showIndent(outfile, level)
            outfile.write('storage_software=%s,\n' % quote_python(self.storage_software).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'usage_type':
            usage_type_ = child_.text
            usage_type_ = self.gds_validate_string(usage_type_, node, 'usage_type')
            self.usage_type = usage_type_
        elif nodeName_ == 'project_id':
            project_id_ = child_.text
            project_id_ = self.gds_validate_string(project_id_, node, 'project_id')
            self.project_id = project_id_
        elif nodeName_ == 'machine_name':
            machine_name_ = child_.text
            machine_name_ = self.gds_validate_string(machine_name_, node, 'machine_name')
            self.machine_name = machine_name_
        elif nodeName_ == 'record_identity':
            obj_ = record_identityType.factory()
            obj_.build(child_)
            self.set_record_identity(obj_)
        elif nodeName_ == 'start_time':
            start_time_ = child_.text
            start_time_ = self.gds_validate_string(start_time_, node, 'start_time')
            self.start_time = start_time_
        elif nodeName_ == 'end_time':
            end_time_ = child_.text
            end_time_ = self.gds_validate_string(end_time_, node, 'end_time')
            self.end_time = end_time_
        elif nodeName_ == 'job_identity':
            obj_ = job_identityType.factory()
            obj_.build(child_)
            self.set_job_identity(obj_)
        elif nodeName_ == 'user_login':
            user_login_ = child_.text
            user_login_ = self.gds_validate_string(user_login_, node, 'user_login')
            self.user_login = user_login_
        elif nodeName_ == 'job_name':
            job_name_ = child_.text
            job_name_ = self.gds_validate_string(job_name_, node, 'job_name')
            self.job_name = job_name_
        elif nodeName_ == 'charge':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'charge')
            self.charge = fval_
        elif nodeName_ == 'wall_duration':
            wall_duration_ = child_.text
            wall_duration_ = self.gds_validate_string(wall_duration_, node, 'wall_duration')
            self.wall_duration = wall_duration_
        elif nodeName_ == 'comment':
            comment_ = child_.text
            comment_ = self.gds_validate_string(comment_, node, 'comment')
            self.comment = comment_
        elif nodeName_ == 'cpu_duration':
            obj_ = cpu_durationType.factory()
            obj_.build(child_)
            self.set_cpu_duration(obj_)
        elif nodeName_ == 'node_count':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'node_count')
            self.node_count = ival_
        elif nodeName_ == 'processors':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'processors')
            self.processors = ival_
        elif nodeName_ == 'submit_host':
            submit_host_ = child_.text
            submit_host_ = self.gds_validate_string(submit_host_, node, 'submit_host')
            self.submit_host = submit_host_
        elif nodeName_ == 'submit_time':
            submit_time_ = child_.text
            submit_time_ = self.gds_validate_string(submit_time_, node, 'submit_time')
            self.submit_time = submit_time_
        elif nodeName_ == 'queue':
            queue_ = child_.text
            queue_ = re_.sub(String_cleanup_pat_, " ", queue_).strip()
            queue_ = self.gds_validate_string(queue_, node, 'queue')
            self.queue = queue_
        elif nodeName_ == 'exec_host_list':
            obj_ = exec_host_listType.factory()
            obj_.build(child_)
            self.set_exec_host_list(obj_)
        elif nodeName_ == 'attribute_list':
            obj_ = attribute_listType.factory()
            obj_.build(child_)
            self.set_attribute_list(obj_)
        elif nodeName_ == 'bytes_stored':
            bytes_stored_ = child_.text
            bytes_stored_ = self.gds_validate_string(bytes_stored_, node, 'bytes_stored')
            self.bytes_stored = bytes_stored_
        elif nodeName_ == 'bytes_read':
            bytes_read_ = child_.text
            bytes_read_ = self.gds_validate_string(bytes_read_, node, 'bytes_read')
            self.bytes_read = bytes_read_
        elif nodeName_ == 'bytes_written':
            bytes_written_ = child_.text
            bytes_written_ = self.gds_validate_string(bytes_written_, node, 'bytes_written')
            self.bytes_written = bytes_written_
        elif nodeName_ == 'number_of_files':
            number_of_files_ = child_.text
            number_of_files_ = self.gds_validate_string(number_of_files_, node, 'number_of_files')
            self.number_of_files = number_of_files_
        elif nodeName_ == 'files_read':
            files_read_ = child_.text
            files_read_ = self.gds_validate_string(files_read_, node, 'files_read')
            self.files_read = files_read_
        elif nodeName_ == 'files_written':
            files_written_ = child_.text
            files_written_ = self.gds_validate_string(files_written_, node, 'files_written')
            self.files_written = files_written_
        elif nodeName_ == 'user_copies':
            user_copies_ = child_.text
            user_copies_ = self.gds_validate_string(user_copies_, node, 'user_copies')
            self.user_copies = user_copies_
        elif nodeName_ == 'system_copies':
            system_copies_ = child_.text
            system_copies_ = self.gds_validate_string(system_copies_, node, 'system_copies')
            self.system_copies = system_copies_
        elif nodeName_ == 'collection_time':
            collection_time_ = child_.text
            collection_time_ = self.gds_validate_string(collection_time_, node, 'collection_time')
            self.collection_time = collection_time_
        elif nodeName_ == 'collection_interval':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'collection_interval')
            self.collection_interval = fval_
        elif nodeName_ == 'media_type':
            media_type_ = child_.text
            media_type_ = self.gds_validate_string(media_type_, node, 'media_type')
            self.media_type = media_type_
        elif nodeName_ == 'storage_software':
            storage_software_ = child_.text
            storage_software_ = self.gds_validate_string(storage_software_, node, 'storage_software')
            self.storage_software = storage_software_
# end class bodyType24


class record_identityType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, record_id=None, create_time=None):
        self.record_id = record_id
        self.create_time = create_time
    def factory(*args_, **kwargs_):
        if record_identityType.subclass:
            return record_identityType.subclass(*args_, **kwargs_)
        else:
            return record_identityType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_record_id(self): return self.record_id
    def set_record_id(self, record_id): self.record_id = record_id
    def get_create_time(self): return self.create_time
    def set_create_time(self, create_time): self.create_time = create_time
    def export(self, outfile, level, namespace_='', name_='record_identityType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='record_identityType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='record_identityType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='record_identityType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.record_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srecord_id>%s</%srecord_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.record_id).encode(ExternalEncoding), input_name='record_id'), namespace_, eol_))
        if self.create_time is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%screate_time>%s</%screate_time>%s' % (namespace_, self.gds_format_string(quote_xml(self.create_time).encode(ExternalEncoding), input_name='create_time'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.record_id is not None or
            self.create_time is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='record_identityType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.record_id is not None:
            showIndent(outfile, level)
            outfile.write('record_id=%s,\n' % quote_python(self.record_id).encode(ExternalEncoding))
        if self.create_time is not None:
            showIndent(outfile, level)
            outfile.write('create_time=%s,\n' % quote_python(self.create_time).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'record_id':
            record_id_ = child_.text
            record_id_ = re_.sub(String_cleanup_pat_, " ", record_id_).strip()
            record_id_ = self.gds_validate_string(record_id_, node, 'record_id')
            self.record_id = record_id_
        elif nodeName_ == 'create_time':
            create_time_ = child_.text
            create_time_ = self.gds_validate_string(create_time_, node, 'create_time')
            self.create_time = create_time_
# end class record_identityType


class job_identityType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, local_job_id=None, global_job_id=None):
        self.local_job_id = local_job_id
        self.global_job_id = global_job_id
    def factory(*args_, **kwargs_):
        if job_identityType.subclass:
            return job_identityType.subclass(*args_, **kwargs_)
        else:
            return job_identityType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_local_job_id(self): return self.local_job_id
    def set_local_job_id(self, local_job_id): self.local_job_id = local_job_id
    def get_global_job_id(self): return self.global_job_id
    def set_global_job_id(self, global_job_id): self.global_job_id = global_job_id
    def export(self, outfile, level, namespace_='', name_='job_identityType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='job_identityType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='job_identityType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='job_identityType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.local_job_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slocal_job_id>%s</%slocal_job_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.local_job_id).encode(ExternalEncoding), input_name='local_job_id'), namespace_, eol_))
        if self.global_job_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sglobal_job_id>%s</%sglobal_job_id>%s' % (namespace_, self.gds_format_string(quote_xml(self.global_job_id).encode(ExternalEncoding), input_name='global_job_id'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.local_job_id is not None or
            self.global_job_id is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='job_identityType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.local_job_id is not None:
            showIndent(outfile, level)
            outfile.write('local_job_id=%s,\n' % quote_python(self.local_job_id).encode(ExternalEncoding))
        if self.global_job_id is not None:
            showIndent(outfile, level)
            outfile.write('global_job_id=%s,\n' % quote_python(self.global_job_id).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'local_job_id':
            local_job_id_ = child_.text
            local_job_id_ = self.gds_validate_string(local_job_id_, node, 'local_job_id')
            self.local_job_id = local_job_id_
        elif nodeName_ == 'global_job_id':
            global_job_id_ = child_.text
            global_job_id_ = self.gds_validate_string(global_job_id_, node, 'global_job_id')
            self.global_job_id = global_job_id_
# end class job_identityType


class cpu_durationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, user=None, system=None):
        self.user = user
        self.system = system
    def factory(*args_, **kwargs_):
        if cpu_durationType.subclass:
            return cpu_durationType.subclass(*args_, **kwargs_)
        else:
            return cpu_durationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_user(self): return self.user
    def set_user(self, user): self.user = user
    def get_system(self): return self.system
    def set_system(self, system): self.system = system
    def export(self, outfile, level, namespace_='', name_='cpu_durationType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='cpu_durationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='cpu_durationType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='cpu_durationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.user is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%suser>%s</%suser>%s' % (namespace_, self.gds_format_string(quote_xml(self.user).encode(ExternalEncoding), input_name='user'), namespace_, eol_))
        if self.system is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssystem>%s</%ssystem>%s' % (namespace_, self.gds_format_string(quote_xml(self.system).encode(ExternalEncoding), input_name='system'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.user is not None or
            self.system is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='cpu_durationType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.user is not None:
            showIndent(outfile, level)
            outfile.write('user=%s,\n' % quote_python(self.user).encode(ExternalEncoding))
        if self.system is not None:
            showIndent(outfile, level)
            outfile.write('system=%s,\n' % quote_python(self.system).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'user':
            user_ = child_.text
            user_ = self.gds_validate_string(user_, node, 'user')
            self.user = user_
        elif nodeName_ == 'system':
            system_ = child_.text
            system_ = self.gds_validate_string(system_, node, 'system')
            self.system = system_
# end class cpu_durationType


class exec_host_listType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, host_info=None):
        if host_info is None:
            self.host_info = []
        else:
            self.host_info = host_info
    def factory(*args_, **kwargs_):
        if exec_host_listType.subclass:
            return exec_host_listType.subclass(*args_, **kwargs_)
        else:
            return exec_host_listType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_host_info(self): return self.host_info
    def set_host_info(self, host_info): self.host_info = host_info
    def add_host_info(self, value): self.host_info.append(value)
    def insert_host_info(self, index, value): self.host_info[index] = value
    def export(self, outfile, level, namespace_='', name_='exec_host_listType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='exec_host_listType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='exec_host_listType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='exec_host_listType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for host_info_ in self.host_info:
            host_info_.export(outfile, level, namespace_, name_='host_info', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.host_info
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='exec_host_listType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('host_info=[\n')
        level += 1
        for host_info_ in self.host_info:
            showIndent(outfile, level)
            outfile.write('model_.host_info_type(\n')
            host_info_.exportLiteral(outfile, level, name_='host_info_type')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'host_info':
            obj_ = host_info_type.factory()
            obj_.build(child_)
            self.host_info.append(obj_)
# end class exec_host_listType


class attribute_listType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, attribute=None):
        if attribute is None:
            self.attribute = []
        else:
            self.attribute = attribute
    def factory(*args_, **kwargs_):
        if attribute_listType.subclass:
            return attribute_listType.subclass(*args_, **kwargs_)
        else:
            return attribute_listType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_attribute(self): return self.attribute
    def set_attribute(self, attribute): self.attribute = attribute
    def add_attribute(self, value): self.attribute.append(value)
    def insert_attribute(self, index, value): self.attribute[index] = value
    def export(self, outfile, level, namespace_='', name_='attribute_listType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='attribute_listType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='attribute_listType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='attribute_listType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for attribute_ in self.attribute:
            attribute_.export(outfile, level, namespace_, name_='attribute', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.attribute
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='attribute_listType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('attribute=[\n')
        level += 1
        for attribute_ in self.attribute:
            showIndent(outfile, level)
            outfile.write('model_.attribute_type(\n')
            attribute_.exportLiteral(outfile, level, name_='attribute_type')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'attribute':
            obj_ = attribute_type.factory()
            obj_.build(child_)
            self.attribute.append(obj_)
# end class attribute_listType


class request_user_createType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, header=None, body=None):
        self.header = header
        self.body = body
    def factory(*args_, **kwargs_):
        if request_user_createType.subclass:
            return request_user_createType.subclass(*args_, **kwargs_)
        else:
            return request_user_createType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_header(self): return self.header
    def set_header(self, header): self.header = header
    def get_body(self): return self.body
    def set_body(self, body): self.body = body
    def export(self, outfile, level, namespace_='', name_='request_user_createType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='request_user_createType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='request_user_createType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='request_user_createType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.header is not None:
            self.header.export(outfile, level, namespace_, name_='header', pretty_print=pretty_print)
        if self.body is not None:
            self.body.export(outfile, level, namespace_, name_='body', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.header is not None or
            self.body is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='request_user_createType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.header is not None:
            showIndent(outfile, level)
            outfile.write('header=model_.header_type(\n')
            self.header.exportLiteral(outfile, level, name_='header')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.body is not None:
            showIndent(outfile, level)
            outfile.write('body=model_.bodyType25(\n')
            self.body.exportLiteral(outfile, level, name_='body')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'header':
            obj_ = header_type.factory()
            obj_.build(child_)
            self.set_header(obj_)
        elif nodeName_ == 'body':
            obj_ = bodyType25.factory()
            obj_.build(child_)
            self.set_body(obj_)
# end class request_user_createType


class bodyType25(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, nsf_status_code=None, site_person_id_list=None, user=None):
        self.nsf_status_code = nsf_status_code
        self.site_person_id_list = site_person_id_list
        self.user = user
    def factory(*args_, **kwargs_):
        if bodyType25.subclass:
            return bodyType25.subclass(*args_, **kwargs_)
        else:
            return bodyType25(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_nsf_status_code(self): return self.nsf_status_code
    def set_nsf_status_code(self, nsf_status_code): self.nsf_status_code = nsf_status_code
    def get_site_person_id_list(self): return self.site_person_id_list
    def set_site_person_id_list(self, site_person_id_list): self.site_person_id_list = site_person_id_list
    def get_user(self): return self.user
    def set_user(self, user): self.user = user
    def export(self, outfile, level, namespace_='', name_='bodyType25', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='bodyType25')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='bodyType25'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='bodyType25', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.nsf_status_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snsf_status_code>%s</%snsf_status_code>%s' % (namespace_, self.gds_format_string(quote_xml(self.nsf_status_code).encode(ExternalEncoding), input_name='nsf_status_code'), namespace_, eol_))
        if self.site_person_id_list is not None:
            self.site_person_id_list.export(outfile, level, namespace_, name_='site_person_id_list', pretty_print=pretty_print)
        if self.user is not None:
            self.user.export(outfile, level, namespace_, name_='user', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.nsf_status_code is not None or
            self.site_person_id_list is not None or
            self.user is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='bodyType25'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.nsf_status_code is not None:
            showIndent(outfile, level)
            outfile.write('nsf_status_code=%s,\n' % quote_python(self.nsf_status_code).encode(ExternalEncoding))
        if self.site_person_id_list is not None:
            showIndent(outfile, level)
            outfile.write('site_person_id_list=model_.site_person_id_list(\n')
            self.site_person_id_list.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.user is not None:
            showIndent(outfile, level)
            outfile.write('user=model_.userType2(\n')
            self.user.exportLiteral(outfile, level, name_='user')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'nsf_status_code':
            nsf_status_code_ = child_.text
            nsf_status_code_ = self.gds_validate_string(nsf_status_code_, node, 'nsf_status_code')
            self.nsf_status_code = nsf_status_code_
        elif nodeName_ == 'site_person_id_list':
            obj_ = site_person_id_list.factory()
            obj_.build(child_)
            self.set_site_person_id_list(obj_)
        elif nodeName_ == 'user':
            obj_ = userType2.factory()
            obj_.build(child_)
            self.set_user(obj_)
# end class bodyType25


class userType2(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, personal_info=None, dn_list=None):
        self.personal_info = personal_info
        self.dn_list = dn_list
    def factory(*args_, **kwargs_):
        if userType2.subclass:
            return userType2.subclass(*args_, **kwargs_)
        else:
            return userType2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_personal_info(self): return self.personal_info
    def set_personal_info(self, personal_info): self.personal_info = personal_info
    def get_dn_list(self): return self.dn_list
    def set_dn_list(self, dn_list): self.dn_list = dn_list
    def export(self, outfile, level, namespace_='', name_='userType2', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='userType2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='userType2'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='userType2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.personal_info is not None:
            self.personal_info.export(outfile, level, namespace_, name_='personal_info', pretty_print=pretty_print)
        if self.dn_list is not None:
            self.dn_list.export(outfile, level, namespace_, name_='dn_list', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.personal_info is not None or
            self.dn_list is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='userType2'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.personal_info is not None:
            showIndent(outfile, level)
            outfile.write('personal_info=model_.person_type(\n')
            self.personal_info.exportLiteral(outfile, level, name_='personal_info')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dn_list is not None:
            showIndent(outfile, level)
            outfile.write('dn_list=model_.dn_listType12(\n')
            self.dn_list.exportLiteral(outfile, level, name_='dn_list')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'personal_info':
            obj_ = person_type.factory()
            obj_.build(child_)
            self.set_personal_info(obj_)
        elif nodeName_ == 'dn_list':
            obj_ = dn_listType12.factory()
            obj_.build(child_)
            self.set_dn_list(obj_)
# end class userType2


class dn_listType12(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dn=None):
        if dn is None:
            self.dn = []
        else:
            self.dn = dn
    def factory(*args_, **kwargs_):
        if dn_listType12.subclass:
            return dn_listType12.subclass(*args_, **kwargs_)
        else:
            return dn_listType12(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dn(self): return self.dn
    def set_dn(self, dn): self.dn = dn
    def add_dn(self, value): self.dn.append(value)
    def insert_dn(self, index, value): self.dn[index] = value
    def export(self, outfile, level, namespace_='', name_='dn_listType12', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dn_listType12')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='dn_listType12'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='dn_listType12', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for dn_ in self.dn:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdn>%s</%sdn>%s' % (namespace_, self.gds_format_string(quote_xml(dn_).encode(ExternalEncoding), input_name='dn'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.dn
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='dn_listType12'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('dn=[\n')
        level += 1
        for dn_ in self.dn:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(dn_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dn':
            dn_ = child_.text
            dn_ = self.gds_validate_string(dn_, node, 'dn')
            self.dn.append(dn_)
# end class dn_listType12


class notify_user_createType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, header=None, body=None):
        self.header = header
        self.body = body
    def factory(*args_, **kwargs_):
        if notify_user_createType.subclass:
            return notify_user_createType.subclass(*args_, **kwargs_)
        else:
            return notify_user_createType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_header(self): return self.header
    def set_header(self, header): self.header = header
    def get_body(self): return self.body
    def set_body(self, body): self.body = body
    def export(self, outfile, level, namespace_='', name_='notify_user_createType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='notify_user_createType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='notify_user_createType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='notify_user_createType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.header is not None:
            self.header.export(outfile, level, namespace_, name_='header', pretty_print=pretty_print)
        if self.body is not None:
            self.body.export(outfile, level, namespace_, name_='body', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.header is not None or
            self.body is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='notify_user_createType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.header is not None:
            showIndent(outfile, level)
            outfile.write('header=model_.header_type(\n')
            self.header.exportLiteral(outfile, level, name_='header')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.body is not None:
            showIndent(outfile, level)
            outfile.write('body=model_.bodyType26(\n')
            self.body.exportLiteral(outfile, level, name_='body')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'header':
            obj_ = header_type.factory()
            obj_.build(child_)
            self.set_header(obj_)
        elif nodeName_ == 'body':
            obj_ = bodyType26.factory()
            obj_.build(child_)
            self.set_body(obj_)
# end class notify_user_createType


class bodyType26(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, nsf_status_code=None, site_person_id_list=None, user=None):
        self.nsf_status_code = nsf_status_code
        self.site_person_id_list = site_person_id_list
        self.user = user
    def factory(*args_, **kwargs_):
        if bodyType26.subclass:
            return bodyType26.subclass(*args_, **kwargs_)
        else:
            return bodyType26(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_nsf_status_code(self): return self.nsf_status_code
    def set_nsf_status_code(self, nsf_status_code): self.nsf_status_code = nsf_status_code
    def get_site_person_id_list(self): return self.site_person_id_list
    def set_site_person_id_list(self, site_person_id_list): self.site_person_id_list = site_person_id_list
    def get_user(self): return self.user
    def set_user(self, user): self.user = user
    def export(self, outfile, level, namespace_='', name_='bodyType26', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='bodyType26')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='bodyType26'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='bodyType26', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.nsf_status_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snsf_status_code>%s</%snsf_status_code>%s' % (namespace_, self.gds_format_string(quote_xml(self.nsf_status_code).encode(ExternalEncoding), input_name='nsf_status_code'), namespace_, eol_))
        if self.site_person_id_list is not None:
            self.site_person_id_list.export(outfile, level, namespace_, name_='site_person_id_list', pretty_print=pretty_print)
        if self.user is not None:
            self.user.export(outfile, level, namespace_, name_='user', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.nsf_status_code is not None or
            self.site_person_id_list is not None or
            self.user is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='bodyType26'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.nsf_status_code is not None:
            showIndent(outfile, level)
            outfile.write('nsf_status_code=%s,\n' % quote_python(self.nsf_status_code).encode(ExternalEncoding))
        if self.site_person_id_list is not None:
            showIndent(outfile, level)
            outfile.write('site_person_id_list=model_.site_person_id_list(\n')
            self.site_person_id_list.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.user is not None:
            showIndent(outfile, level)
            outfile.write('user=model_.userType3(\n')
            self.user.exportLiteral(outfile, level, name_='user')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'nsf_status_code':
            nsf_status_code_ = child_.text
            nsf_status_code_ = self.gds_validate_string(nsf_status_code_, node, 'nsf_status_code')
            self.nsf_status_code = nsf_status_code_
        elif nodeName_ == 'site_person_id_list':
            obj_ = site_person_id_list.factory()
            obj_.build(child_)
            self.set_site_person_id_list(obj_)
        elif nodeName_ == 'user':
            obj_ = userType3.factory()
            obj_.build(child_)
            self.set_user(obj_)
# end class bodyType26


class userType3(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, personal_info=None, dn_list=None):
        self.personal_info = personal_info
        self.dn_list = dn_list
    def factory(*args_, **kwargs_):
        if userType3.subclass:
            return userType3.subclass(*args_, **kwargs_)
        else:
            return userType3(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_personal_info(self): return self.personal_info
    def set_personal_info(self, personal_info): self.personal_info = personal_info
    def get_dn_list(self): return self.dn_list
    def set_dn_list(self, dn_list): self.dn_list = dn_list
    def export(self, outfile, level, namespace_='', name_='userType3', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='userType3')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='userType3'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='userType3', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.personal_info is not None:
            self.personal_info.export(outfile, level, namespace_, name_='personal_info', pretty_print=pretty_print)
        if self.dn_list is not None:
            self.dn_list.export(outfile, level, namespace_, name_='dn_list', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.personal_info is not None or
            self.dn_list is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='userType3'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.personal_info is not None:
            showIndent(outfile, level)
            outfile.write('personal_info=model_.person_type(\n')
            self.personal_info.exportLiteral(outfile, level, name_='personal_info')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dn_list is not None:
            showIndent(outfile, level)
            outfile.write('dn_list=model_.dn_listType13(\n')
            self.dn_list.exportLiteral(outfile, level, name_='dn_list')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'personal_info':
            obj_ = person_type.factory()
            obj_.build(child_)
            self.set_personal_info(obj_)
        elif nodeName_ == 'dn_list':
            obj_ = dn_listType13.factory()
            obj_.build(child_)
            self.set_dn_list(obj_)
# end class userType3


class dn_listType13(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dn=None):
        if dn is None:
            self.dn = []
        else:
            self.dn = dn
    def factory(*args_, **kwargs_):
        if dn_listType13.subclass:
            return dn_listType13.subclass(*args_, **kwargs_)
        else:
            return dn_listType13(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dn(self): return self.dn
    def set_dn(self, dn): self.dn = dn
    def add_dn(self, value): self.dn.append(value)
    def insert_dn(self, index, value): self.dn[index] = value
    def export(self, outfile, level, namespace_='', name_='dn_listType13', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dn_listType13')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='dn_listType13'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='dn_listType13', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for dn_ in self.dn:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdn>%s</%sdn>%s' % (namespace_, self.gds_format_string(quote_xml(dn_).encode(ExternalEncoding), input_name='dn'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.dn
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='dn_listType13'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('dn=[\n')
        level += 1
        for dn_ in self.dn:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(dn_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dn':
            dn_ = child_.text
            dn_ = self.gds_validate_string(dn_, node, 'dn')
            self.dn.append(dn_)
# end class dn_listType13


class inform_transaction_completeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, header=None, body=None):
        self.header = header
        self.body = body
    def factory(*args_, **kwargs_):
        if inform_transaction_completeType.subclass:
            return inform_transaction_completeType.subclass(*args_, **kwargs_)
        else:
            return inform_transaction_completeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_header(self): return self.header
    def set_header(self, header): self.header = header
    def get_body(self): return self.body
    def set_body(self, body): self.body = body
    def export(self, outfile, level, namespace_='', name_='inform_transaction_completeType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='inform_transaction_completeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='inform_transaction_completeType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='inform_transaction_completeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.header is not None:
            self.header.export(outfile, level, namespace_, name_='header', pretty_print=pretty_print)
        if self.body is not None:
            self.body.export(outfile, level, namespace_, name_='body', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.header is not None or
            self.body is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='inform_transaction_completeType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.header is not None:
            showIndent(outfile, level)
            outfile.write('header=model_.header_type(\n')
            self.header.exportLiteral(outfile, level, name_='header')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.body is not None:
            showIndent(outfile, level)
            outfile.write('body=model_.bodyType27(\n')
            self.body.exportLiteral(outfile, level, name_='body')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'header':
            obj_ = header_type.factory()
            obj_.build(child_)
            self.set_header(obj_)
        elif nodeName_ == 'body':
            obj_ = bodyType27.factory()
            obj_.build(child_)
            self.set_body(obj_)
# end class inform_transaction_completeType


class bodyType27(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, message=None, status_code=None, detail_code=None):
        self.message = message
        self.status_code = status_code
        self.detail_code = detail_code
    def factory(*args_, **kwargs_):
        if bodyType27.subclass:
            return bodyType27.subclass(*args_, **kwargs_)
        else:
            return bodyType27(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_message(self): return self.message
    def set_message(self, message): self.message = message
    def get_status_code(self): return self.status_code
    def set_status_code(self, status_code): self.status_code = status_code
    def validate_itc_status_code_type(self, value):
        # Validate type itc_status_code_type, a restriction on xs:normalizedString.
        pass
    def get_detail_code(self): return self.detail_code
    def set_detail_code(self, detail_code): self.detail_code = detail_code
    def export(self, outfile, level, namespace_='', name_='bodyType27', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='bodyType27')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='bodyType27'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='bodyType27', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.message is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smessage>%s</%smessage>%s' % (namespace_, self.gds_format_string(quote_xml(self.message).encode(ExternalEncoding), input_name='message'), namespace_, eol_))
        if self.status_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstatus_code>%s</%sstatus_code>%s' % (namespace_, self.gds_format_string(quote_xml(self.status_code).encode(ExternalEncoding), input_name='status_code'), namespace_, eol_))
        if self.detail_code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdetail_code>%s</%sdetail_code>%s' % (namespace_, self.gds_format_integer(self.detail_code, input_name='detail_code'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.message is not None or
            self.status_code is not None or
            self.detail_code is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='bodyType27'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.message is not None:
            showIndent(outfile, level)
            outfile.write('message=%s,\n' % quote_python(self.message).encode(ExternalEncoding))
        if self.status_code is not None:
            showIndent(outfile, level)
            outfile.write('status_code=%s,\n' % quote_python(self.status_code).encode(ExternalEncoding))
        if self.detail_code is not None:
            showIndent(outfile, level)
            outfile.write('detail_code=%d,\n' % self.detail_code)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'message':
            message_ = child_.text
            message_ = self.gds_validate_string(message_, node, 'message')
            self.message = message_
        elif nodeName_ == 'status_code':
            status_code_ = child_.text
            status_code_ = self.gds_validate_string(status_code_, node, 'status_code')
            self.status_code = status_code_
            self.validate_itc_status_code_type(self.status_code)    # validate type itc_status_code_type
        elif nodeName_ == 'detail_code':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'detail_code')
            self.detail_code = ival_
# end class bodyType27


class responseType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, header=None):
        self.header = header
    def factory(*args_, **kwargs_):
        if responseType.subclass:
            return responseType.subclass(*args_, **kwargs_)
        else:
            return responseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_header(self): return self.header
    def set_header(self, header): self.header = header
    def export(self, outfile, level, namespace_='', name_='responseType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='responseType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='responseType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='responseType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.header is not None:
            self.header.export(outfile, level, namespace_, name_='header', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.header is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='responseType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.header is not None:
            showIndent(outfile, level)
            outfile.write('header=model_.response_header_type(\n')
            self.header.exportLiteral(outfile, level, name_='header')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'header':
            obj_ = response_header_type.factory()
            obj_.build(child_)
            self.set_header(obj_)
# end class responseType


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""

def usage():
    print USAGE_TEXT
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'header_type'
        rootClass = header_type
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_=rootTag,
        namespacedef_='',
        pretty_print=True)
    return rootObj


def parseString(inString):
    from StringIO import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'header_type'
        rootClass = header_type
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_="header_type",
        namespacedef_='')
    return rootObj


def parseLiteral(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'header_type'
        rootClass = header_type
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('#from amie import *\n\n')
    sys.stdout.write('import amie as model_\n\n')
    sys.stdout.write('rootObj = model_.rootTag(\n')
    rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
    sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "address",
    "amie",
    "attribute_listType",
    "attribute_type",
    "bodyType",
    "bodyType1",
    "bodyType10",
    "bodyType11",
    "bodyType12",
    "bodyType13",
    "bodyType14",
    "bodyType15",
    "bodyType16",
    "bodyType17",
    "bodyType18",
    "bodyType19",
    "bodyType2",
    "bodyType20",
    "bodyType21",
    "bodyType22",
    "bodyType23",
    "bodyType24",
    "bodyType25",
    "bodyType26",
    "bodyType27",
    "bodyType3",
    "bodyType4",
    "bodyType5",
    "bodyType6",
    "bodyType7",
    "bodyType8",
    "bodyType9",
    "changed_field_optionType",
    "changed_field_optionType1",
    "cpu_durationType",
    "data_account_createType",
    "data_project_createType",
    "date",
    "dn_listType",
    "dn_listType1",
    "dn_listType10",
    "dn_listType11",
    "dn_listType12",
    "dn_listType13",
    "dn_listType2",
    "dn_listType3",
    "dn_listType4",
    "dn_listType5",
    "dn_listType6",
    "dn_listType7",
    "dn_listType8",
    "dn_listType9",
    "exec_host_listType",
    "expected_reply_list",
    "expected_reply_type",
    "field_of_science_type",
    "header_type",
    "host_info_type",
    "inform_transaction_completeType",
    "job_identityType",
    "notify_account_createType",
    "notify_account_inactivateType",
    "notify_account_reactivateType",
    "notify_project_createType",
    "notify_project_inactivateType",
    "notify_project_modifyType",
    "notify_project_reactivateType",
    "notify_project_resourcesType",
    "notify_project_usageType",
    "notify_user_createType",
    "notify_user_modifyType",
    "notify_user_reactivateType",
    "notify_user_suspendType",
    "person_type",
    "phone_type",
    "piType",
    "piType1",
    "reason",
    "record_identityType",
    "req_login_listType",
    "req_login_listType1",
    "req_login_listType2",
    "req_login_listType3",
    "req_login_listType4",
    "req_login_listType5",
    "request_account_createType",
    "request_account_inactivateType",
    "request_account_reactivateType",
    "request_project_createType",
    "request_project_inactivateType",
    "request_project_modifyType",
    "request_project_reactivateType",
    "request_project_resourcesType",
    "request_user_createType",
    "request_user_modifyType",
    "request_user_reactivateType",
    "request_user_suspendType",
    "resource_listType",
    "resource_listType1",
    "resource_listType10",
    "resource_listType11",
    "resource_listType12",
    "resource_listType13",
    "resource_listType14",
    "resource_listType15",
    "resource_listType2",
    "resource_listType3",
    "resource_listType4",
    "resource_listType5",
    "resource_listType6",
    "resource_listType7",
    "resource_listType8",
    "resource_listType9",
    "resource_login_listType",
    "resource_login_listType1",
    "resource_login_type",
    "responseType",
    "response_header_type",
    "role_listType",
    "role_listType1",
    "role_listType2",
    "role_listType3",
    "sfos_listType",
    "sfos_listType1",
    "sfos_listType2",
    "sfos_listType3",
    "site_person_id_list",
    "site_person_id_type",
    "su_alloc_infoType",
    "su_alloc_infoType1",
    "userType",
    "userType1",
    "userType2",
    "userType3"
    ]
